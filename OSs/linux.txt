https://www.reddit.com/r/pop_os/comments/xuq2pm/can_someone_explain_to_me_like_im_five_why_linux/
macOS and Windows has a single platform vendor, Apple and Microsoft.

Apple has a complete vertical stack integration; they control both the hardware and software, so they can provide a tight experience for their consumers.

In addition, Apple continuously update their APIs and guidelines for app design, rules, and issue platform-wide updates once a year with their annual software refreshes. This allows developers with predicable schedules and docs to update their apps. This also allows Apple to simplify the packaging experience, such as the DMG and PKG.

Microsoft has both EXE, MSI but they're not as tight as Apple because of backward compat support, which means apps often have to deal with registry, hardware tech (32bit/64bit/arm) that macOS devs do not have to deal with. This is because Microsoft does not own the hardware stack, so they have to provide backward compat to ensure everyone can use any software compiled to Windows for the past few decades, not permitting an easy one-win solution like Apple.

Linux is an open source community project, it belongs to the public with no restrictions. There's no single vendor (Linus is Benevolent dictator for life but he doesn't really fully control it). There are several standard bodies to try to centralize the work going into Linux like free desktop APIs, but no one is required to follow it. Since there's no enforcement at all levels, there's also no way to ensure a consistent packaging experience for all users either. We do have some universal packaging solution such as Flatpak, AppImage, Snap but they're not available in all distros, it is up to the public.

However, note majority of users download their apps from the package manager; apt, dnf, etc or the software store apps that is available for their distro. So they don't have to deal with the packaging either.





conclusion:

openSUSE
  - Tumbleweed or Leap

(def not nixOS, nor archlinux)



to install an app manually:
copy the binary to /usr/bin/ for most distros
then you should be able to run the binary via command line

# distros
https://www.reddit.com/r/openSUSE/comments/x7ge7j/thinking_about_moving_from_arch_based_to_opensuse/
https://www.reddit.com/r/NixOS/comments/zwqaxz/arch_user_convince_me_to_hop_to_nix/

NixOS
  - **reproducible env** via declarative configs
  - https://www.felixsanz.dev/articles/nixos-made-me-go-back-to-windows
    - a soid personal blog post of a person who went from using linux as a child, mostly arch linux, for 20 years, then trying nixOS, then running to Windows
    - "Without a doubt this is the feature of NixOS that I liked the most. Nix is, besides a package manager, a pure, functional, lazy, declarative and reproducible programming language to express (in .nix files) the state of your system. In other words, you will not have to execute commands that you will later forget nor will you have to modify files scattered around the system. You will perform all the configuration of your system through files that you can save in Git or wherever you want."
  - In these files you can specify the packages that must be installed, the hardware configuration (kernel, partitions, encryption, ...), the system users, the Google Chrome extensions that will be installed automatically, the GTK theme... practically everything. Altering the system configuration will be as simple as modifying these files and changing the system to the new state. Furthermore, you will be able to modularize the configuration as you like thanks to the import function. Wonderful.
  - modify state of machine temporarily (like sandboxing the entire OS)
    - "The Nix shell is a powerful tool that allows you to temporarily modify the state of the machine. For example, you will be able to run an application without having it installed. You create a shell with that package/configuration and when you close it, it will leave no trace."
  - **steep learning curve**
    - uses a purely-functional lang (also named nix)
  - uses a lot of time
    - "all the time you spend generating this configuration, looking for the options, dealing with their inconsistencies, etc."
      - options, the .toml-like key-value settings, are created by the folks that package the nix package? Otherwise, you'd have to manually configure it elsewhere
  - maintaining packages is complicated, and the crux of the whole idea of nix
    - if the nix store doesn't have the package you want, you will waste days making one, let alone maintaining it
  - **no documentation**
    - people just look at source code of packages, or rely on the very helpful community on discord
  - just one version of most software is available (so no installing old versions, before their dev turned the wrong way)
    - this conflicts with scripting languages which often want certain versions of dependent modules
      - also the packages, and thus modules/libs must be compiled! yikes..
  - it's built on linux
    - yet, given the amount of more things you must do, on top of a broken linux ecosystem, it's just asking for self-torture. All of linux's hardware problems: especially GPU-related, will still haunt you, but from another level of abstraction away
  - NOTE: should use flakes
  - no games??
  - can start with Home Manager
    - "NixOS manages system configuration but not user-related configuration. Home Manager, a project created by third parties, takes care of that."

**arch linux**
  - for people that want to install linux from nothing (or the most minimal amount of software)
    - though, there is an install script (archinstall) to help/guide newer users
  - rolling release system-packages + user-maintained user-packages, continuously / no release
    - meaning, you must update the entire system every time you want to get package that uses another package (dependency) that has a release newer than your system
      - aka **you must update your entire system nearly every-time you want to get a package!!**
    - tested by a volunteer testing team
  - great wiki: documentation on everything, great way to learn linux
  - need to install your own backup software (BtrFs, etc.)
  - "Arch recommends you check the wiki before every update to see if the update is going to break something. Tumbleweed just works"
  - in general, to install or config apps, you read the wiki and manually config it yourself
  - **if it crashes, you're screwed, so you def need to setup a backup system and backup frequently**

**openSUSE**
  - for people that just want a hassle-free working system that doesn't want to waste time tinkering and building everything from scratch
  - provides options to customize making a great out-of-the-box experience
    - OBS, OpenQA, snapper, BtrFs by default, YasT
      - **YaST**, an all-in-one system config tool
      - "snapper saves your @$$"
      - AUR (arch's user repo) > OBS
      - BtrFs
        - a file-system that allows quick 'n small snapshots, among many other contemporary disk-related features
    
  - Tumbleweed
    - rolling release, 1 snapshot max per day, so more like release nearly every-day
      - tested by a company
    - "Tumbleweed feels like Fedora, works like arch and installs like Debian. The best of all."

  - Leap
    - intervalled release

fedora
  - releases every 6 months
  - dnf > apt
    - dnf history list
    - dnf history undo
  - encourages using flatpaks (cross-platform, portable packages) over third-party repos

debian
  - releases every 2 years!!
    - meaning your software will nearly always be out-dated!
    - the debian security team only works on the current release, so you must update it (except for LTS versions, which have security updates for 5 years)
  - can use unstable and testing/"sid" branches of the repo for latest, untested software
  - the free and open-source (FOSS) standard
  - the main community-based distro
    - (as opposed to company-owned)
  - to use more recent packages, just download them using snap, flatpak, etc.
    - benefits from being safe too





# customization (gui packages)
NOTE: cli apps 'n setup are listed in the-tui-dream.txt and setup.sh
the linux world is full of customization, like the way kids do for desktop computer hardware, bicycles, motorcycles, and cars.

https://www.reddit.com/r/unixporn/wiki/themeing/dictionary/#wiki_rice/
  - /r/unixporn is full of ricers suping up their desktop environments


package managers:
native package managers:
  - each linux distro has it's own package manager: apt for debian, dnf for fedora, etc.
  - checked by the people that maintain the distro
native
nix

app (like windows) package managers:
  - unchecked, includes all dependencies, making it easier for app-devs to maintain, good for bigger apps (like how Windows works?)
  - often sandboxed to make it safe from affecting the rest of the os
flatpak
x/snap(d)
  - has political problems tied to Canonical (company of Ubuntu), forcing certain apps to use snap on Ubuntu




desktop environments (DE):
  - contain everything: a windows manager, a taskbar, widgets, etc.

main:
KDE (Plasma)
  - highly customizable
mate
  - also well-received
cinnamon
gnome
  - used by ubuntu, old feeling

lightweight:
xfce
  - often used for servers 'n old computers just to be remoted into
lxqt


custom:
compositers / WMs:
  - to put windows in the write place
sway
i3
wayland
  - used by chromeos
..?


tui file-managers:
see the-tui-dream.txt and setup.sh

gui file-managers:
https://www.reddit.com/r/swaywm/comments/ja93ss/comment/g8ojr1a/?utm_source=reddit&utm_medium=web2x&context=3&rdt=48122
They all suck in their own way.

vifm
  - quirky and feels slower than python-based ranger.

nnn
  - fast, but too unconfigurable and unusable.

mc
  - old school midnight commander

pcmanfm
  - too basic, thunar is too basic, QT-based (pcmanfm-qt, dolphin) suffer from a disappearing menus QT bug, and dolphin is kinda bloated and practically pulls in the whole KDE suite.

Choose something you like, I prefer ranger and use pcmanfm when I have to.


krusader

task-bar:
polybar
  - easy to customize

...



# linux apps (create a new file?)

gui text editors:
code (vs code)
kate

remote access apps:
chromeRDP
noVNC
  - vnc is the open-source remote tech





