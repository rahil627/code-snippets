
files contain bytes (00001111)

how those bytes are read depends on the encoding

there is no way to know how the file is encoded (todo: really..?)
  - (i read this on StackOverflow)

so, i'm guessing that's what file extensions are for, to tell you how to read the file

**depending on the encoding, each byte(s) represents a single character**
  - for example, in utf-8, each single byte (or 8-bits) represents a single character, simple! :)
  - perhaps bigger ones like utf-16 (two bytes) and utf-32 (4 bytes) are used for Chinese?? who knows, lol
  
and thus, programs (such as a text editor) can then be able to display characters (representations of bytes, depending on the encoding)
  - and thus, if you open a file that isn't meant to be read by humans, such as a program, you will see a bunch of non-ascii characters, characters beyond the first 128 bit-formations (don't know the word...). **Those are actual bytes of memory you are looking at, represented using utf-8 encoding by the text editor.** *whoa*.

(text editors by default use utf-8 encoding, except on Windows, where it can use it's own non-standard encoding windows-1552(?), but hopefully they've caved in by now..?)




the main problem:

"Microsoft failed to support UTF-8 until 2017."

from https://en.m.wikipedia.org/wiki/Windows-1252:

This character encoding is a superset of ISO 8859-1 in terms of printable characters, but differs from the IANA's ISO-8859-1 by using displayable characters rather than control characters in the 80 to 9F (hex) range. Notable additional characters include curly quotation marks and all the printable characters that are in ISO 8859-15 (at different places than ISO 8859-15). It is known to Windows by the code page number 1252, and by the IANA-approved name "windows-1252".

It is very common to mislabel Windows-1252 text with the charset label ISO-8859-1. A common result was that all the quotes and apostrophes (produced by "smart quotes" in word-processing software) were replaced with question marks or boxes on non-Windows operating systems, making text difficult to read. Most modern web browsers and e-mail clients treat the media type charset ISO-8859-1 as Windows-1252 to accommodate such mislabeling. This is now standard behavior in the HTML5 specification, which requires that documents advertised as ISO-8859-1 actually be parsed with the Windows-1252 encoding.[5]



the solutions:

the best way i found was to simply search and replace using a text editor, then
save those search and replace commands,
and make a script out of it

sed 's/crazy-character/normal-ascii-character/' my_file.txt

unidecode
  - a simple cli program i found on github, ported into several languages
  - it's good to use because it'll throw an error every-time it runs into a character it can't decode, so you can use this like a compiler and fix your errors one-by-one
  
iconv
  - default linux encoding cli program
  - the problem with this is that if you don't know the encoding, you're screwed
  
recode
  - another linux encoding converter
  - same problem as iconv



resources:
https://en.m.wikipedia.org/wiki/Character_encoding
  - the process of assigning numbers to graphical characters, especially the written characters of human language, allowing them to be stored, transmitted, and transformed using digital computers.[1] The numerical values that make up a character encoding are known as "code points" and collectively comprise a "code space", a "code page", or a "character map".

https://github.com/vegardit/haxe-strings#ansi-class
  - this ansi class contains a bunch of useful ansi literals, which then can be sent to output (stdout), which'll then tell a program (a text widget, a terminal, an OS, whatever) to do stuff
  
https://en.wikipedia.org/wiki/ANSI_escape_code

ascii
  - a standard for the first 128 chars?
  
utf-8
  - **the standard encoding, used by 98% of all web-sites now, everything should be utf-8**, although, for some reason, it's implementation is dfferent based on the target (the Haxe standard library must write individual code for each target)?
  
 
  
