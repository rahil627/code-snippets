

conclusion:
CLI shells combine a programming language ("shell language", "scripting language") with the terminal (the ability to execute commands, including running command-line programs... However, nowadays, many programming languages come with interpreters (in addition to compiler options) and the ability to execute commands (and process handling), so, the lines are blurry, and thus, given that fact, **i think it's better to invest time in a more powerful general programming langauge, especially if it can be run just as easily as a shell script can ("scripting languages": ruby, python, etc.) or even with a *slight* bit extra code (haxe or C# with interpreters). **Although, for simple things, these are still nice to have, especially to simply and quickly save/run a "batch" of commands, without any bloat, and then run the scripts from another process (another script, program, or **service**), leading to automation. In the end, **Bash has the power of Linux CLI programs (tons, but most are ancient), and Powershell has the power of perhaps the best standard library: .NET library, in addition to being as powerful as a general programming language**.

Linux is definitely about it's CLI tools, and scripts are a way to string them together. It's just normal, how Linux works.

Windows, i feel, isn't as CLI heavy, so you won't be using it as often--you'd be using GUI apps--, and when you do, it's probably more in a programming way/feel (writing a program) rather than a quick script way/feel (that just runs a chain of commands--linux cli programs).

For Windows, you'd get more familiar with the .NET standard library, which'll transfer into C#. For Linux, you'd need to be savvy enough to be able to find useful CLI programs (could be written in bash or *any* other programming language*) in package managers or github, be able to use them, and then execute them in a script. As far as i know, Bash doesn't really have a standard library to do stuff(??). Whereas for Powershell, you can do everhything that Bash does, but you'd be more inclined to leverage it's programming power and it's standard library more, rather than rely on other CLI programs, written in god know whats langauge.

Linux is a mess of CLI programs and scripts, written in *tons* of different languages. Windows is a lot more insular, with just powershell (although of course you can install any language and run any script too). That's just the feeling i get.




https://learnxinyminutes.com/docs/powershell/
https://learnxinyminutes.com/docs/bash/

https://stackoverflow.com/questions/11369522/bash-utility-script-library#11369935
  - the answer points out bash's limitations really well, mainly:
  - "Bash functions don't return anything; they only produce output streams. Every reasonable method of capturing that stream and either assigning it to a variable or passing it as an argument requires a SubShell, which breaks all assignments to outer scopes. (See also BashFAQ/084 for tricks to retrieve results from a function.) Thus, libraries of reusable functions are not feasible, as you can't ask a function to store its results in a variable whose name is passed as an argument (except by performing eval backflips)."


Windows:
you have no choice, it's just powershell

although, you can install Linux (via WSL), and i think there's a bash shell now too (though, without the linux tools, i'm not so sure how useful it would be..., so you'd be much better off just installing a desktop-less minimalistic linux distro, and get the best of both worlds)

powershell
  - more like a programming lanugage, like VB.NET, making it more comparable to python than bash
  - have acess to the .NET library and a few other important libs (??), which makes it a nice step to C#
  - has a pipeline operator
  - "With Windows PowerShell, as far as I know, everything is an object. You can pass the result of a command to another as an object. This can be really powerful, but it does not have the simple concept (everything is a file) of Unix."



Linux:

https://www.howtogeek.com/68563/HTG-EXPLAINS-WHAT-ARE-THE-DIFFERENCES-BETWEEN-LINUX-SHELLS/
  - a good straight-foward tech post abuot the history of shells
  
basically:
sh = bourne shell
  - the main precursor and origin to/of the most popular future shells
bash = bourne again shell
  - most prevalent, used on all desktop Linux-derived OSs, including Mac OS X
  - history: was created by open-source people GNU while they were creatin their free OS
ash = Almaquish shell
  - a light-wieght sub-set(?) of bash used in embeded systems
  - you can find it on the tiny Linux distros installed on mobile devices, sch as ArchLinux, which itself uses BusyBox
    - i personally have "iSH" app on my iOS device, and this thing is lightning fast!!!, this is actually where i played with and learned vi: because it was *so* much faster than using CLI with my server
dash = ? Almaquish shell
  - based on ash, used internally by Ubuntu to handle shell tasks/services/scripts as it's lighter 'n faster
zsh = z? shell
  - a super-set of bash, used on contemporary desktop systems
  - Mac OS X recently replaced bash with this
  - more features, more configurability, etc.
  
  
others:
csh, tcsh, one other one = c shell, improved c shell, ane one other one
  - C-like shell with more scripting ability than the bourne shell? A bit dated now..?
fish
  - a beginner-friendly shell with highlighting for errors, spell-checking, etc., although, because it's different from bash, it might not really be so useful..?
  

"server-side" programming languages:
in addition to shells, many languages come with an "interpreter" which makes it feel similiar to the bash cli, in that you can send a command through the terminal/console, or a set of commands (a script, or a program), and it will run it for you:
python
ruby
haxe
  - haxe is kinda special as it seems to have both an interpreter and a compiler(??)
etc.
  
  
# get file-path of shell
which [shell name]

# change shell, will send you a prompt
chsh
