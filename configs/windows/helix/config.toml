# edit config file directly, then backup
# :config-open

# backup
# cp C:\Users\ra\AppData\Roaming\helix\config.toml C:\Users\ra\my-stuff\repos\my-programming-stuff\configs\windows\helix

# posted some goodies about my configs here:
# https://github.com/helix-editor/helix/discussions/1360#discussioncomment-10692211

# TODO: / main things that bother me
# where is the repeat-action? '.' repeats the last paste or something..
# use c+j/k to move down/up pop-up dialog lists
# move [] modes to c+i/o?
#   - repeat_last_motion
# move all terminal mappings to a single leader-key/mode
#    - free up one of three modifier keys
#    - eh, still want to use alt for copy/paste in terminal cli (beyond helix), pane movement
#    - also no pop-up menu, so difficult to visualize, must remember mappings
# buffer shortcuts
#   - need to add to window pane mode
# get/set icons from wezterm
# add aura theme
#   - https://github.com/daltonmenezes/aura-theme/issues/202
#   - then can use it as a base to create my own theme


# branches:
# https://github.com/mattwparas/helix/tree/steel-event-system
#   - https://github.com/helix-editor/helix/pull/8675
#   - scheme scripting / "plugin-system"





# default config:
# https://github.com/helix-editor/helix/issues/1210

# started with a copy of this one:
# https://github.com/eichiarakaki/helix/blob/main/config.toml
# also merged in these
# https://github.com/x448/helix-editor-config-toml/blob/main/config.toml
# https://github.com/ravsii/.helix/blob/main/config.toml
# TODO: working on merging this one
# https://gitlab.com/obxhdx/dotfiles/-/blob/main/config/config/helix/config.toml
# TODO: this one looks quite custom..
# it seems very left-handed, motions with left-hand, which frees the right-hand to use mouse/touch-pad/touch-screen?
# but why? it would be one or the other
# https://github.com/clo4/dotfiles/blob/main/dot_config/helix/config.toml

# awesome helix
# https://github.com/rajasegar/awesome-helix?tab=readme-ov-file
#   - also contains many configs to borrow from


# ISSUE:

# known issues:
# TODO: i broke terminal copy/paste (a-c/v)
# why paste is slow:
# https://github.com/helix-editor/helix/issues/1021#issuecomment-963353157
#  - as a work-around, it literally types one character at a time


# my issues:
# https://github.com/helix-editor/helix/pull/9316
#   - about making wren work

# https://github.com/helix-editor/helix/discussions/1172
#   - "option to show the functions being called"
 



# NOTE: press space,? to open the command picker, then can see all of the commands that can be mapped to a key (or macro!)


# structure:
# theme
# [keys]
#  - for quick editing
# [editor]

# icons = "nerdfontsymbols" # TODO: is there a way to get it from wezterm?

# most used themes: aurara, aura, boo_berry, default, tokyonight

theme = "aurara"

# theme = "default"

# alt purple themes:
# theme = "boo_berry"
#  - most similar to the purple-heavy 'default', with much less contrast and no annoyingly bright yellow
#  - better than default for code, but i might prefer default's light purple text more for non-code..

# color bases to create my own personal themes out of
# theme = "edge" # TODO: PR: push original/port to repo
# theme = "aura" # TODO: PR: push original/port to repo

# theme = "fleet_dark" # purple 'n pink for main texts

# these particulary stick out
# can use this as a base for helix themes
# bolds look incredible in wezterm!!
# theme = "noctis" # reminds me of jellyfish, def feel underwater
# theme = "snazzy" # a colorful monokai variant with bolds

# some of these newer themes are aiite
# theme = "nightfox" # not bad..
# theme = "penumbra+" # a monokair varaint
# theme = "varua"
# theme = "ferra"

# classics:
# everforest_dark/light # great low-contrast earthy vibes
# tokyonight
# catpuccin_frappe/mocha
# material_palenight


# re-map some keys
# NOTE: only add a new keybinding when you *frequently* perform the actions, not because you think it would be 'nice' or 'useful', though, it's okay to add multiple key-maps of the same action, as there are multiple conventions in my head
# NOTE: use no_op for unmapped keys to be explicit and know what isn't mapped

# https://docs.helix-editor.com/keymap.html
# https://docs.helix-editor.com/remapping.html

# repo files:
# helix-term/src/keymap/default.rs # change the default key-map
# src/commands.rs # add commands to the app here!

# my conventions:

# IMPORTANT: NOTE: swapped the mappings of  control and alt keys on windows os at os level, but didn't alter this config

# control is the main modifier key to use
# control+shift is often used to denote the opposite action as control+key
# shift also symbolizes extending selection
# caps-lock is re-mapped to escape on the OS-level
# right-control and right-alt are unused

# alt (no alt+shift) is reserved for terminal/tmux commands
#   - (by default, windows terminal used control+shift)
#   - (by default, wezterm uses nearly every modifier key for sane defaults reasoning)
# **function key is currently un-mapped**
# - windows/vscode often uses it for:
# f1 = "command_pallete" # space,?
# f2 = "rename_symbol" # space,r
# f3 = "search_next" # n
# S-f3 = "search_previous" N (S+n)
# f5,f8-f11 = debugging stuff # space,g
# f12 = "goto_definition" # g,d; A+f12 peek def


# see vs-code reference for shortcuts
# https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf


[keys.normal]
# common windows OS shortcuts
# NOTE: moved to pop-up menu, and i much prefer using the menu, but keeping in case i forget after not using a computer for a long time, or muscle memory
# C-f = "search"

# these are also in the space pop-up menu, eventually will wean off of them too, as they go against the default y/p mappings
# TODO: could just use the clipboard only, and avoid using the main register "
# TODO: a lot of these don't work in select-mode, which is what i now often use instead of x :/
# C-c = "yank_joined_to_clipboard" # space,Y, default was toggle_comments
# C-v = "paste_clipboard_before" # space,P
C-y = "yank_joined_to_clipboard" # don't rememeber why.. better formatting for junk copied from the web?..
C-S-y = "yank_to_clipboard" # space-y
C-p = "paste_clipboard_before" # space,P, usually this is the one i want, not p/after
C-S-p = "paste_clipboard_after" # space,p
  # NOTE: conflicts with vs-code's command palette mapping
C-r = "replace_selections_with_clipboard" #space,R, :clipboard-paste-replace?



C-S-space = "command_palette" # space-space is nice too, c-s = "completion", TODO: doesn't work in neither windows terminal nor wezterm, i think windows os is using it for something :/ i think it's the same problem for c-space, which i want for "completion"
# C-S-p = "command_palette" # vs-code default







# sensible defaults
# TODO: change a few defaults that don't make sense

# TODO: testing these
# alt way of inserting before/after
# insert at the cursor
# instead of select -> i/a, ; -> i/a
i = ["collapse_selection", "insert_mode"]
a = ["collapse_selection", "append_mode"]
";" = "flip_selections" # A-;, this key is feels really really good, can use key to map to repeat_last_motion
"C-;" = "collapse_selection"

R = ["collapse_selection", "replace"] # just limit to replacing one char, i mean, how often are you really going to be replacing a selection with one repeating char?.. ascii art?
D = ["collapse_selection", "delete_selection"] # to delete one char, matches R above

# possibly the most IMPORTANT: selection mapping, along with x
# IMPORTANT: cycles through m,i/o mode (match insdie/outside)
C-o = "expand_selection" # A-o/i by default; word -> inside comment or parameters (repeated) -> line -> block -> buffer; it just works via tree-sitter not lsp TODO: remove final select entire buffer expansion
C-S-o = "shrink_selection" # selects current word at minimum; holding control and pressing shift made more sense

# TODO: default X = extend_to_line_bounds now unmapped!
x = ["extend_line", "select_mode"] # fantastic mapping, teaches you to use select_mode in the process
X = ["extend_line", "select_mode", "flip_selections"] # same as the above but prepare for going up by flipping the cursor to the beginning of the selection
# x = "extend_line_below" # the default
# X = "extend_line_above" 

# x without the newline?
# select within the line bounds, useful for quick whole-line changes
# X = ["goto_first_nonwhitespace", "select_mode", "goto_line_end", "normal_mode"] # TODO: make it extend to next line, like x does
# select_line_below? # how does this work..?
# TODO: C-x - delete/cut line?
# TODO: C-S-x - delete/cut from first non-white-space?


# r<->R: i don't understand the use of r for more than one char, whereas R is used more often, replacing a selection, and works well with search (search and replace); can just use c to replace a single char, at the cost of one more key-press..??
r = "replace_with_yanked" # this matches y/p better
# R = "replace" # NOTE: re-mapped above
# also have space-R and C-r = "replace_selections_with_clipboard"



# TODO: think about basic movements some more
# dfjk for left,right,down,up?
#  - not supposed to use left/right often
# qw for back/forward one word
#  - **opens up b for buffer pop-up menu**
# ft?
# a-. is strange for repeat last motion... change it back to vi's default ;?
'.' = "repeat_last_motion" # TODO: not working, A-., can't seem to override the default repeat last insert
# 'C-.' = # TODO: repeat_last_insert doesn't exist, sort of an automatic macro recording, but why not just select/paste after insert??
# need this for repeat f/t/m/[/]
#  - need ; to clear selection, which is used often in kakaoune-style always select
# . repeat last insert is kinda wierd too..
#  - save you from copy-paste
# uio for jump-list movement, to match jk # TODO: i don't use these much, can be moved to []
# C-u = "save_selection" # defualt was page_up
# ,. for next/previous buffer? TODO: should have many of these key-pairs to cycle next/previous

# TODO: select the word the cursor is on vs default use selection
# TODO: could use S-/, since reverse search isn't really needed (just press s-n)
# or expand_selection?
"C-*" = ["move_prev_word_start", "move_next_word_end", "search_selection"] # TODO: c-* doesn't work


# tab was completely unmapped by default
tab = "goto_next_buffer"
S-tab = "goto_previous_buffer"
C-tab = "rotate_view" # TODO: not working, maybe a windows os problem.., use c-s-h/l
C-S-tab = "rotate_view_reverse"

# return was completely unmapped by default
# it's often simpler to think starting from the beginning of a line
# ret = ["move_line_down", "goto_first_nonwhitespace"]
  # no need, just press c-h
# S-ret = ["move_line_up", "goto_first_nonwhitespace"]
  # no need, just press up/k
# NOTE: also c+j/k in insert-mode, but use it commonly enough..
C-ret = "add_newline_below" # similar to vs-code
C-S-ret = "add_newline_above"




# extend selection
# i've never used kakoune, but i may have re-created here..
# shift commonly signifies extend selection
B = "extend_prev_word_start" # or long_word
W = "extend_next_word_start"
E = "extend_next_word_end"
# defaults
# "W" => move_next_long_word_start
# "B" => move_prev_long_word_start
# "E" => move_next_long_word_end

# TODO: change join/keep selection? i rarely use them, and this is an important key
# could do extend to next/previous line (like holding shift and pressing down in gui editors), but i don't think it's too useful
# J default is join_selections (into one line)
# K default is keep_selections (selections matching the regex)
# J = "extend_line_down" # makes sense, but i don't envision using it much..
# K = "extend_line_up"
# K = "extend_next_word" # TODO: possibly one of the most used macros..
# K = "hover" # space,k by default
# NOTE: **possibly my most used macros**, avoid using kill_to_line_end/start, go the kakoune way
# H = "extend_to_first_nonwhitespace" # vgh[esc], matches c-h
# L = "extend_to_line_end" # vgl[esc], matches c-l
H = "extend_parent_node_start"
L = "extend_parent_node_end"
 
# still missing extend char..
S-left = "extend_char_left"
S-right = "extend_char_right"
S-up = "extend_line_up"
S-down = "extend_line_down"
# END extend selection

minus = "decrement" # only A-minus is mapped to merge_selections, 'minus' not '-', for parsing reasons
'=' = "increment" # = maps to format_selections via LSP

# END sensible defaults




# explicitly unmap (and note!) some keys that changed after sensible defaults
# it will throw an error when you map something twice
C-b = "no_op" # "page_up" # in z/view
C-f = "no_op" # "page_down" # TODO: "search" matches windows os, "file_picker" matches terminal file-manager, fzf
C-u = "no_op" # half_page_up" # was re-mapped to save jump point
C-d = "no_op" # "half_page_down"

# C-i = "no_op" # "jump_forward" # also mapped to C-S-} and ],j
# C-o = "no_op" # "jump_backward"
"C-s" = "no_op" # "save_selection" # also mapped to [,s and ],s





# new mappings

# NOTE: these don't yank, only know how to kill
# for when H/L,d/c is too annoying
# C-S-h = "kill_to_line_start" # can conflict with buffer shortcuts
# C-S-l = "kill_to_line_end"


# especially in case the default C-c is mapped to copy
"C-/" = "toggle_comments" # S-/ or ? is mapped to reverse search, which is kinda useless too, as you can press N to go to go up, good for C-like langs
"C-S-/" = "toggle_block_comments"
  # NOTE: could use for global_search <space,/>
"#" = "toggle_comments" # just an extra binding for an unmapped key, good for ruby-like langs
"C-#" = "toggle_block_comments"


# TODO: C+hjkl vs default g, hjkl; this would save the most used set of modified keys
# NOTE: these don't highlight by default
# TODO: could just try replacing it completely with goto_next/prev_paragraph, or put it on S-j/k
# C-j = "goto_next_paragraph"
# C-j = "goto_prev_paragraph"
C-j = "page_down" # C-f, C-d; NOTE: goto_window_top by default
C-k = ["page_up", "goto_window_top"] # C-b, C-u
# I/A[esc] is not the way to go! use these (also necessary for keyboards without home/end buttons):
C-h = "goto_first_nonwhitespace" # gh # NOTE: does not select by default, use H/L key-maps
C-l = "goto_line_end"  # gl;
# C-h = "move_prev_word_end"
# C-l = "move_next_word_start"

# NOTE: these select/highlight by default
"C-[" = "goto_prev_paragraph"
"C-]" = "goto_next_paragraph"
"C-S-[" = "jump_backward" # TODO: BUG: neither work
"C-}" = "jump_forward"
# "C-{" = "goto_prev_function"
# "C-}" = "goto_next_function"





# buffer/split-views/terminal-pane shortcuts

# TODO: BUG: buffer shortcuts were missing??
# TODO: edit c+w "window" pop-up menu
# TODO: choose modifier keys: c-s vs a vs a-s
# NOTE: buffers shows up in views, they are neither tabs nor panes
# can use buffer picker (space,b)
C-S-j = "goto_next_buffer" # gn, :bn TODO: gj/gk, currently gn/gp
C-S-k = "goto_previous_buffer" # gp, :bp
C-S-n = ":new" # :n
C-S-w = ":buffer-close" # :bc # matches close tab in windows os
# C-S-c = ":buffer-close" # :bc # (c)lose
# C-S-q = ":buffer-close" # q feels stronger than w/c

# combined mappings
# matches terminal split and nav shortcuts (a-hjkl, a-w)
# NOTE: you can goto_next_buffer within a view! so still need to rotate_view
C-S-h = "rotate_view" # TODO: gh/hl is taken, so gn/gp or gc-j/gc-k or gc-n/gc-p
C-S-l = "rotate_view_reverse"
 # NOTE: replaces kill_to_line_start/end
C-S-s = ":hsplit-new" # s > h, h has too many mappings already
C-S-v = ":vsplit-new" # vs vsplit (opens current buffer in the new split)
C-S-q = ":quit" # closes current view, but not the buffer
# C-S-c = ":quit" # although q works for :quit command, it shouldn't have been named quit to begin with. q feels stronger, but i prefer the position next to w, whereas c is a bit weird for the left hand
# 'C-S-;' = ":quit" # closes current view # TODO: BUG: not working

# terminal mappings for reference
# i re-mapped the keys to solely use alt
# A-j - goto next pane
# A-k - goto previous pane
# A-s/h - split horizontal (down)
# A-v/l - split vertical (right)
# A-w = close pane/tab/window
# A-q = close pane/tab/window

# A-arrow-keys - resize pane # A-S by default in windows terminal
# A-S-arrow-keys - goto pane direction # A by default for windows terminal

# A-S-hjkl # TODO: unmapped...i might prefer off-loading this to the arrow-keys

# NOTE: no helix re-size split-view yet:
#  - https://github.com/helix-editor/helix/pull/8546

# END buffer/split/terminal-pane shortcuts




# commonly used commands (including macros!! :o)


# TODO: think of a key to create a pop-up menu for macros
#       currently, m = match pop-up, 

# TODO: move selection up/down (macro)
# alt+up/down in vscode
# C-S-j = "move_line_down" # move_line_down/up doesn't do what you think, it just moves the cursor
# C-S-k = "move_line_up"



[keys.insert]
# esc = ["collapse_selection", "normal_mode"] # keeping the selection while inserting is kinda weird.. # TODO: testing default
C-space = "completion" # c-x by default
# C-j = "completion" # just need an easier shortcut
# C-k = "completion"
# C-S-space = trigger hints
# j = { k = "normal_mode" } # Maps `jk` to quickly exit insert mode, as opposed to esc/caps-lock

C-ret = "add_newline_below" # for consistency 
C-S-ret = "add_newline_above"

# move line up/down
# move to normal mode?
# C-j      = ["normal_mode","extend_to_line_bounds","delete_selection", "move_line_down","paste_before", "insert_mode"]
# C-k      = ["normal_mode","extend_to_line_bounds","delete_selection", "move_line_up","paste_before", "insert_mode"]

# TODO: copy line up/down (macro)
# C-S-j/k
# C-k = "kill_line_to_end" # default in emacs?
C-h = "goto_first_nonwhitespace" # C-u by default
C-l = "goto_line_end" # delete char by default
# C-S-h = "kill_to_line_start" # TODO: currently conflicts with buffer/pane mappings
# C-S-l = "kill_to_line_end"
# backspace = "delete_char" # default
# C-d = "delete_char_forward" # default
C-S-D = "delete_char_backward"
# C-w = "delete_word_backward" # default is inverted
C-S-w = "delete_word_forward"
C-b = "delete_word_backward" # an extra key that makes sense
C-backspace = "delete_word_backward"
C-S-backspace = "delete_word_forward"


# https://gitlab.com/obxhdx/dotfiles/-/blob/main/config/config/helix/config.toml
# lots of useful stuff here TODO: map these
# maybe a way to invoke normal-mode shortcuts from insert-mode?
# A-b = ["move_prev_word_start", "collapse_selection"]
# A-f = ["move_next_word_end", "move_char_right"]
# C-b = "move_char_left"
# C-e = "goto_line_end_newline"
# C-f = "move_char_right"


# remove arrow-key training wheels
# create all shortcuts within the main key-pad area
# up = "no_op"
# down = "no_op"
# left = "no_op"
# right = "no_op"
# pageup = "no_op"
# pagedown = "no_op"
# home = "no_op"
# end = "no_op"

# common gui editor key-maps
C-left = "move_prev_word_start" # TODO: doesn't work
C-right = "move_next_word_end"


[keys.select]
# esc = ["collapse_selection", "keep_primary_selection", "normal_mode"] # cancel selection? nahhh, moving anywhere (hjkl) automatically cancels the selection, so it's pretty easy to cancel..
ret = "normal_mode" # unmapped, this feels satisfying TODO: vs go to next/previous line

# TODO: is there a way to use normal shortcuts? function key?

C-a = "select_all" # default is % in normal mode, useful in combination with select_mode


# pop-up menus / minor modes

# copied from docs:
# These sub-modes are accessible from normal mode and typically switch back to normal mode after a command.

# Key	Description
# v	Enter select (extend) mode
# g	Enter goto mode
# m	Enter match mode
# :	Enter command mode
# z	Enter view mode
# Z	Enter sticky view mode
# Ctrl-w	Enter window mode # TODO: need to change this key!!
# Space	Enter space mode

# some possible keys:
# **esc**
#  - should be free TODO: don't use OS to bind it
# **return**
# **backspace**
#  - big on most keyboards!!
# **\**
#  - big on my keyboard!
#  - :sh (run a shell command)
#    - [command_mode, then how to type :sh?]
#  - could save for a list of shell commands/scripts
# `/~
#  - currently used for lowercase/uppercase
# **arrow keys for four more modes!!**
# f1-f12 are all currently open
# 1-0 are all currently open

## create new pop-up menus!
[keys.normal.ret] # return and backspace seems unused.., and it's a big button! :)
  # TODO: c-space vs space,c
  # return feels much better than backspace, can keep fingers on the home row more easily, also return -> caps lock key (esc) works really well
# my alt to the default general space pop-up menu
# it feels better to do these here, more tactile than c-s/c-q/c-r
# backspace is a good choice as it's on the right-side of the keyboad, and many of these are on the left-side

s = ":write" # default was save_selection (to jump-list)

q = ":quit" # matches the mapping in window-mode
r = ":reload"
R = ":reload-all"

f = ":format"

# shortcuts to most used files could go here: main todo, snippets, etc.
c = ":config-open" # vs h, :o ~/.config/helix/config.toml"
C = [":config-reload", ":reload-all"] # great for quickly editing the config! kinda confusing key..
l = ":o ~/.config/helix/languages.toml"
# TODO: add wezterm config
# w = ":o ..."
# TODO: make a main todo list
# t = ":o ~/todo.md"

# put this later, as it shows up in order
C-s = ":write!" # TODO: s vs w, c-s used for horizointal split
A-s = ":write-all"
C-A-s = ":write-all!"
C-q = ":quit!"
A-q = ":quit-all"
C-A-q = ":quit-all!"

# TODO: really need to create one for buffers? check window/c-w menu
# [keys.normal.b] # TODO: b used by back one word



## edit existing pop-up menus
[keys.normal.space]
space = "command_palette" # ? by default
# b = TODO: how to go to another mode?

# copy entire buffer into clipboard:
C-a = ["save_selection", "select_all", "yank_main_selection_to_clipboard", "jump_backward"] # TODO: need to add a title to the menu

# append delimiters to the end of line
","      = ["save_selection", "goto_line_end", ":append-output echo ','", "collapse_selection", "delete_selection", "jump_backward"]
";"      = ["save_selection", "goto_line_end", ":append-output echo ';'", "collapse_selection", "delete_selection", "jump_backward"]


[keys.normal.space.t]
# NOTE: jacked this from someone else, still haven't used..
# vs in my custom mode?..
a        = ":toggle-option auto-completion"
s        = ":toggle-option auto-save"
f        = ":toggle-option auto-format"
h        = ":toggle-option lsp.display-inlay-hints"
l        = ":toggle-option lsp.enable"

# [keys.normal.b]
# # NOTE: just copy 'n paste from buffer/pane mappings
# b = "buffer_picker" # originally space,b
# j = "goto_next_buffer" # gn, :bn TODO: gj/gk, currently gn/gp
# k = "goto_previous_buffer" # gp, :bp
# n = ":new" # :n
# w = ":buffer-close" # :bc # matches close tab in windows os
# # c = ":buffer-close" # :bc # (c)lose
# q = ":buffer-close" # q feels stronger than w/c

# # combined mappings
# # matches terminal split and nav shortcuts (a-hjkl, a-w)
# # NOTE: you can goto_next_buffer within a view! so still need to rotate_view
# h = "rotate_view" # TODO: gh/hl is taken, so gn/gp or gc-j/gc-k or gc-n/gc-p
# l = "rotate_view_reverse"
#  # NOTE: replaces kill_to_line_start/end
# s = ":hsplit-new" # s > h
# v = ":vsplit-new" # vs vsplit (opens current buffer in the new split)
# # q = ":quit" # closes current view, but not the buffer
# c = ":quit" # although q works for :quit command, it shouldn't have been named quit to begin with. q feels stronger, use either c and/or w



[keys.normal.g]
j = "page_down" # strangely simply move up/down one line by default TODO: change in repo
k = ["page_up", "goto_window_top"]
# has n/p = goto next/previous buffer by default

[keys.normal."["] # TODO: i feel like i/o would be better placement vs []
'[' = "jump_backward" # default thing to go to, vs goto_prev_paragraph NOTE: works with select-mode, whereas c+[] doesn't
j = "jump_backward"
s = "save_selection"
[keys.normal."]"]
']' = "jump_forward"
j = "jump_forward"
s = "save_selection"

[keys.normal.m]
a = "surround_add" # default is s
o = "select_textobject_around" # o for outside; default was a

[keys.select.m]
a = "surround_add" # default is s
o = "select_textobject_around" # o for outside; default was a







[editor]
shell = ["pwsh", "-c"]

line-number = "relative"
# rulers = [80, 120]
# auto-format = "false" # WARNING: "true" by default!


# TODO: testing
cursorline = true
color-modes = true
true-color = true
bufferline = "multiple"

completion-trigger-len = 1
completion-replace = true

# TODO: hmmm, missing padding config..?
# ISSUE: https://github.com/helix-editor/helix/discussions/11723#
# [editor.padding]

[editor.cursor-shape]
# normal = "block"
insert = "bar"
select = "underline"

[editor.soft-wrap]
enable = true
max-wrap = 10 # increase value to reduce forced mid-word wrapping

[editor.gutters]

# removed line numbers from the default layout
layout = ["diagnostics", "spacer", "diff"] # "spacer", "line-numbers", 
  # TODO: need a hide line numbers key, or zen-mode..

 [editor.statusline]
# text-editor info, interactive stuff
left = ["mode", "selections", "register", "spinner", "diagnostics", "workspace-diagnostics"]

# file-related
center = ["file-name", "read-only-indicator", "file-modification-indicator", "version-control"]

# more file info
right = ["file-encoding", "file-line-ending", "position-percentage"]

separator = "│" # ":<:>:<:>:" 
mode.normal = "normal"
mode.insert = "insert"
mode.select = "select"

[editor.whitespace.render]
newline = "all"

[editor.whitespace.characters]
# space = "·"
newline = "↵" # ⏎
tab = "⇥" # →
tabpad = "·" # tabs will look like "→···"
nbsp = "⍽"
            
[editor.indent-guides]
render = true
character = "┊" # Some characters that work well: ▏ ┆ ┊ ⸽ ╎
#skip-levels = 1

[editor.auto-pairs]
# default: (){}[]''""``
# TODO: so do these append or override defaults?
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
'<' = '>'

[editor.file-picker]
hidden = false # note: reads local and global .gitignore files by default
parents = false # rid \. and \..

[editor.lsp]
display-messages = true
auto-signature-help = true
display-signature-help-docs = true
display-inlay-hints = true


