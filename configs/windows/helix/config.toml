# :config-open

# backup
# cp C:\Users\ra\AppData\Roaming\helix\config.toml C:\Users\ra\my-stuff\repos\my-programming-stuff\configs\windows\helix

# branches:
# https://github.com/mattwparas/helix/tree/steel-event-system
#   - https://github.com/helix-editor/helix/pull/8675
#   - scheme scripting / "plugin-system"





# default config:
# https://github.com/helix-editor/helix/issues/1210

# started with a copy of this one:
# https://github.com/eichiarakaki/helix/blob/main/config.toml
# also merged in these
# https://github.com/x448/helix-editor-config-toml/blob/main/config.toml
# https://github.com/ravsii/.helix/blob/main/config.toml
# TODO: working on merging this one
# https://gitlab.com/obxhdx/dotfiles/-/blob/main/config/config/helix/config.toml
# TODO: this one looks quite custom..
# it seems very left-handed, motions with left-hand, which frees the right-hand to use mouse/touch-pad/touch-screen?
# but why? it would be one or the other
# https://github.com/clo4/dotfiles/blob/main/dot_config/helix/config.toml

# awesome helix
# https://github.com/rajasegar/awesome-helix?tab=readme-ov-file
#   - also contains many configs to borrow from


# issues
# TODO: i broke terminal copy/paste (a-c/v)
# why paste is slow:
# https://github.com/helix-editor/helix/issues/1021#issuecomment-963353157
#  - as a work-around, it literally types one character at a time


# NOTE: press space,? to open the command picker, then can see all of the commands that can be mapped to a key (or macro!)


# structure:
# theme
# [keys]
#  - for quick editing
# [editor]


theme = "boo_berry"
#  - most similar to 'default', with much less contrast and no bold
#  - better than default for code, but i might default more for non-code..

# temp programming themes until aura dark is ported
# theme = "nightfox"
# theme = "tokyonight"


# re-map some keys
# NOTE: only add a new keybinding when you *frequently* perform the actions, not because you think it would be 'nice' or 'useful'
#       though, it's okay to add multiple key-maps of the same action, as there are multiple conventions in my head
# NOTE: use no_op for unmapped keys to be explicit and know what isn't mapped

# https://docs.helix-editor.com/keymap.html
# https://docs.helix-editor.com/remapping.html

# repo files:
# helix-term/src/keymap/default.rs # change the default key-map
# src/commands.rs # add commands to the app here!

# my conventions:
# alt (and alt+shift) is reserved for terminal/tmux commands
#   - (by default, windows terminal used control+shift)
#   - might change once i begin using a tmux (zellij)
# **function key is currently un-mapped**
# - vscode uses it for:
# f1 = "command_pallete" # space,?
# f2 = "rename_symbol" # space,r
# f3 = "search_next" # n
# S-f3 = "search_previous" N (S+n)
# f5,f8-f11 = debugging stuff # space,g
# f12 = "goto_definition" # g,d; A+f12 peek def
  
# control is the main modifier key to use
# control+shift is often used to denote the opposite action as control+key
# control+alt+shift is used in situtations where control+shift is used for a main action, and adding alt does an alt action
# shift also symbolizes extending highlight/selection
# caps-lock is re-mapped to escape on the OS-level
# right-control and right-alt are unused


# see vs-code reference for shortcuts
# https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf


[keys.normal]
# common windows OS shortcuts
# TODO: maybe can use alt for :commands
C-s = ":write" # default was save_selection (to jump-list)
C-q = ":quit" # TODO: or quit-all
C-A-q = ":quit!" # quit-all!
C-a = "select_all" # not so useful..
C-c = "yank_joined_to_clipboard" # default was toggle_comments
"C-/" = "toggle_comments"
C-v = "paste_clipboard_after"

C-r = ":reload" # Reload the current document from disk
A-f = ":format"


# TODO: change a few defaults that don't make sense
# r<->R: r is useless for more than one char, whereas R is used more often, replacing a selection; can just use c to replace a single char, at the cost of one more key-press
r = "replace_with_yanked" 
R = "replace"



# TODO: think about basic movements
# dfjk for left,right,down,up?
#  - not supposed to use left/right often
# qw for back/forward one word
#  - opens up b for buffer pop-up menu
# ft?
# a-. is strange for repeat last motion... change it back to ;?
# need this for repeat f/t/m/[/]
#  - need ; to clear selection, which is used often in kakaoune-style always select
# . repeat last insert is kinda wierd too..
#  - save you from copy-paste
# uio for jump-list movement, to match jk
C-u = "save_selection" # defualt was page_up
# ,. for next/previous buffer? TODO: should have many of these key-pairs to cycle next/previous

# sensible stuff
ret = ["move_line_down", "goto_first_nonwhitespace"] # unmapped by default

# extend selection
# shift commonly signifies extend selection
B = "extend_prev_word_start" # or long_word
W = "extend_next_word_start"
E = "extend_next_word_end"
# defaults
# "W" => move_next_long_word_start
# "B" => move_prev_long_word_start
# "E" => move_next_long_word_end

# JK select to next/previous line isn't practical so the defaults are different:
# TODO: maybe add/remove line
# J = "insert_newline_below" # or add_newline_above/below; goes against modal philosophy, should add in insert-mode
# J default is join_selections (into one line)
# K default is keep_selections (selections matching the regex)
H = "extend_to_first_nonwhitespace" # matches c-h
L = "extend_to_line_end" # matches c-l

# these are the defaults:
# NOTE: these four are free to map
C-b = "no_op" # "page_up" # in z/view
# C-f = "no_op" # "page_down" # in z/view; mapped to file-picker, similar to old terminal fzf
# "C-u" = "half_page_up" # mapped to save jump point
"C-d" = "no_op" # "half_page_down"

# "C-i" = "jump_forward"
# "C-o" = "jump_backward"


# TODO: C+hjkl vs default g, hjkl; this would save the most used set of modified keys
# NOTE: these don't highlight by default
C-j = "page_down" # C-f, C-d; NOTE: goto_window_top by default
C-k = ["page_up", "goto_window_top"] # C-b, C-u
C-h = "goto_line_start" # gh # NOTE: does not select by default, use H/L key-maps
C-l = "goto_line_end"  # gl;
# C-h = "move_prev_word_end"
# C-l = "move_next_word_start"

# NOTE: these do select/highlight by default
#       and i like that it selects
"C-[" = "goto_prev_paragraph"
"C-]" = "goto_next_paragraph"

# matches terminal split and nav shortcuts (a-hjkl, a-w)
# TODO: make a pop-up menu, or edit c+w "window" pop-up menu
# use these less often than moving around buffers, so mapped it to an additional modifier key
C-S-A-j = "rotate_view"
C-S-A-k = "rotate_view_reverse"
C-S-A-h = ":hsplit-new"
C-S-A-l = ":vsplit-new"
"C-S-A-;" = ":quit" # closes current view # TODO: not working
C-S-A-w = ":quit" # closes current view


# TODO: still testing/figuring this out..
# C-s used by save
# C-v used by paste
# C-S-s = ":vsplit-new" # s for split, fits c+w, s
# C-S-v = ":vsplit-new" # s for split, fits c+w, s
# C-S-h = ":hsplit-new" # s for split, fits c+w, s
# C-r = ":vsplit-new" # vs vsplit (opens current buffer in the new split)
# C-d = ":hsplit-new"

# buffer shortcuts are missing??
# g,n/p = goto_next_buffer/goto_previous_buffer
# can use buffer picker (space,b) instead.., but shouldn't have to
# NOTE: control+shift commonly used by windows terminal, so i changed it to alt and alt+shift
# TODO: create a buffer pop-up menu
C-S-j = "goto_next_buffer" # gn, :bn jk to move through
C-S-k = "goto_previous_buffer" # gp, :bp
# C-S-h = ":new" # bp; h is further away/less commonly used command; TODO: change to buffer-new
# - often use file picker (space,f) instead
# C-S-h = "file_picker" # NOTE: mapped to kill_to_line_start, use C-f or space,f/F
# C-S-l = # NOTE: mapped to kill_to_line_end
"C-S-;" = ":buffer-close" # bc; more commonly used than new buffer; # TODO: not working

C-S-w = ":buffer-close"
# C-S-A-l = ":buffer-close!"
C-S-n = ":new"

C-S-f = "file_picker_in_current_buffer_directory" # alt-f used for terminal find # TODO: add alt+/ key-map for terminal find
C-f = "file_picker" # default: page_down; TODO: how does it differ from F (file_picker_in_current_directory)?


# TODO: bring back the arrow-key buffer shortcuts
# left = ":buffer-previous"
# right = ":buffer-next"
# up = ":new" # ?, don't remember; or file picker
# down = ":buffer-close"

# terminal view/pane handled by terminal
# A-S-h - split horizontal (down)
# A-S-l - split vertical (right)
# "C--" = default for windows terminal/vscode
# "C-+" = default for windows terminal/vscode

# terminal navigation
# A-j - next view
# A-k - previous view
# C-left/down/up/right # default for windows terminal

# re-size terminal split/pane
# A-S-hjkl
# A-arrow-keys
# A-S-arrow-keys # default for windows terminal




# commonly used commands (including macros!! :o)


# TODO: think of a key to create a pop-up menu for macros
#       currently, m = match pop-up, 
         
# x without the newline?
# select within the line bounds, useful for quick whole-line changes
X = ["goto_first_nonwhitespace", "select_mode", "goto_line_end", "normal_mode"] # TODO: make it extend to next line, like x does
# select_line_below? # how does this work..?
# TODO: C-x - delete/cut line?
# TODO: C-S-x - delete/cut from first non-white-space?

# delete from cursor to line end
# common in many editors, maybe back to emacs
# L = "select_to_line_end" # default
# C-l = "goto_line_end" # defined alongside movement key-maps
C-S-l = "kill_to_line_end" # NOTE: nearly conflicts with buffer shortcuts
# C-S-l = ["collapse_selection", "select_mode", "goto_line_end", "delete_selection"] # TODO: compare with kill_to_line_end
# C-A-S-l = ["collapse_selection", "select_mode", "goto_line_end", "change_selection"]

# from cursor to line start / first non-white-space
# H
# C-h
C-S-h = "kill_to_line_start" # actually deletes upto first non-white-space; NOTE: nearly conflicts with buffer shortcuts


[keys.insert]
esc = ["collapse_selection", "normal_mode"] # keeping the selection while inserting is kinda weird..
C-space = "completion"
# C-S-space = trigger hints
# j = { k = "normal_mode" } # Maps `jk` to quickly exit insert mode, as opposed to esc/caps-lock

# C-j = "insert_newline" # default; alt to enter-key
C-j = "add_newline_below"
C-k = "add_newline_above" # or C-S-j?
C-S-j = "move_line_down"
C-S-k = "move_line_up"
# C-k = "kill_line_to_end" # default
C-h = "goto_first_nonwhitespace" # C-u by default
C-a = "goto_first_nonwhitespace" # an extra key that makes sense
C-l = "goto_line_end" # delete char by default
C-S-h = "kill_to_line_start"
# backspace = "delete_char" # default
# C-d = "delete_char_forward" # default
C-S-D = "delete_char_backward"
# C-w = "delete_word_backward" # default is inverted
C-S-w = "delete_word_forward"
C-b = "delete_word_backward" # an extra key that makes sense
C-backspace = "delete_word_backward"
C-S-backspace = "delete_word_forward"

# https://gitlab.com/obxhdx/dotfiles/-/blob/main/config/config/helix/config.toml
# lots of useful stuff here TODO: map these
# maybe a way to invoke normal-mode shortcuts from insert-mode?
# A-b = ["move_prev_word_start", "collapse_selection"]
# A-f = ["move_next_word_end", "move_char_right"]
# C-b = "move_char_left"
# C-e = "goto_line_end_newline"
# C-f = "move_char_right"


# remove arrow-key training wheels
# create all shortcuts within the main key-pad area
# up = "no_op"
# down = "no_op"
# left = "no_op"
# right = "no_op"
# pageup = "no_op"
# pagedown = "no_op"
# home = "no_op"
# end = "no_op"

# common gui editor key-maps
C-left = "move_prev_word_start"
C-right = "move_next_word_end"


[keys.select]
esc = ["collapse_selection", "keep_primary_selection", "normal_mode"] # keep selection by default

# TODO: is there a way to use normal shortcuts? function key?
h = "extend_to_first_nonwhitespace"
l = "extend_to_line_end"


# pop-up menus
# edit existing pop-up menus
[keys.normal.space]
space = "command_palette" # ? by default
q = ":buffer-close" # or x or d
Q = ":buffer-close!"

[keys.normal.g]
j = "page_down" # strangely simply move up/down one line by default TODO: change in repo
k = ["page_up", "goto_window_top"]
q = ":buffer-close" # goto pop-up menu has buffer next and previous, but no close or new
Q = ":buffer-close!"

[keys.normal."]"]
"]" = "goto_next_paragraph" # make paragraph the default thing
[keys.normal."["]
"[" = "goto_prev_paragraph" # TODO: standardize 'prev' or 'previous' in the helix repo

[keys.normal.m]
a = "surround_add" # default is s
o = "select_textobject_around" # o for outside; default was a

[keys.select.m]
a = "surround_add" # default is s
o = "select_textobject_around" # o for outside; default was a

# a new config- pop-up menu
[keys.normal."C-backspace"]
r = [":config-reload", ":reload-all"]
o = ":config-open"
l = ":o ~/.config/helix/languages.toml"







[editor]
shell = ["pwsh", "-c"]

line-number = "relative"

# TODO: testing
completion-trigger-len = 1
cursorline = true
color-modes = true
true-color = true
bufferline = "multiple"

[editor.cursor-shape]
# normal = "block"
insert = "bar"
select = "underline"

[editor.soft-wrap]
enable = true
max-wrap = 10 # increase value to reduce forced mid-word wrapping

[editor.statusline]
# text-editor info, interactive stuff
left = ["mode", "selections", "register", "spinner", "diagnostics", "workspace-diagnostics"]

# file-related
center = ["file-name", "read-only-indicator", "file-modification-indicator", "version-control"]

# more file info
right = ["file-encoding", "file-line-ending", "position-percentage"]

separator = "│" # ":<:>:<:>:" 
mode.normal = "normal"
mode.insert = "insert"
mode.select = "select"

[editor.whitespace.render]
newline = "all"

[editor.whitespace.characters]
# space = "·"
newline = "↵" # ⏎
tab = "⇥" # →
tabpad = "·" # tabs will look like "→···"
nbsp = "⍽"
            
[editor.indent-guides]
render = true
character = "┊" # Some characters that work well: ▏ ┆ ┊ ⸽ ╎
#skip-levels = 1

[editor.auto-pairs]
# default: (){}[]''""``
# TODO: so do these append or override defaults?
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
'<' = '>'

[editor.file-picker]
hidden = false # note: reads local and global .gitignore files by default
parents = false # rid \. and \..

[editor.lsp]
display-messages = true
auto-signature-help = true
display-signature-help-docs = true
display-inlay-hints = true


