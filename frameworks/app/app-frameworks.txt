
TODO: to merge

conclusion:
phoenix framework
  - i chose web-app frameworks that provide a systems-programming-like experience, and the longevity of web (and in this case, the maintainance-less of functional-programming). BUT, i'm still not convinced that game engines aren't good for making ui-apps, or any app really (or immediate-guis)
  - also, just focusing on one target--the web--, which is inherently cross-platform, avoids the need to build/test for multiple platforms, though flutter does seem really solid, thanks to it's hybrid approach, it's not so great for web, and limited in ui style, which is by design constrained to the style of mobile apps

see web-app-frameworks.txt



https://docs.microsoft.com/en-us/windows/win32/learnwin32/retained-mode-versus-immediate-mode



conclusion:
in the end, i ditched the idea of native apps for web apps and simple cli/tui apps, see web-frameworks.txt and cli-and-tui-app-frameworks.txt. The browser and terminal just handles cross-platform for you, and aren't going to die any-time soon.

cli and tui apps are a way to go for text-only simple-input apps. I absolutely *love* how lazygit looks in a terminal.

Haxe is perfect for making cli apps (and has tui potential) as it can compile to a binary (via hashlink/c -> llvm). Just add haxe-ui/html5 or haxe-ui-wxwidgets for a quick web or desktop gui.

otherwise, if you really need a gui, especially for a mobile target, Flutter is indeed the way to go, lightyears better than it's competition (react native and avalonia), though, it could very possibly be abandonded, along with all the other cross-patform solutions (hence web/terminal)




https://www.reddit.com/r/iOSProgramming/comments/190b4b6/cross_platform_frameworks_in_2024/
question:
  "If you were to build a medium-sized app today (and native isn't an option), which cross platform framework would you use? Priority #1 being able to easily update/fix things without issues outside of your control over the next 3-5+ years."

answer:
  | without issues outside of your control

  "IMHO this is the #1 issue against non-native: you don't have control, the framework folks have control and you have to wait on them to update and fix lots of things, entirely outside of your control.

  The point being, no one can offer you that kind of guarantee for years, that' just not how this stuff works. That'd be a hard ask even in the native world: tech and APIs change, and there's bugs, all of it is stuff out of your control. Non-native adds another layer on top of all of that that's out of your control.

  You're asking for the impossible."




1. Flutter for quick *native-looking* app-making, but not if you want to actually use native components/widgets(??) thus quite limiting(??) nor if your focus is on web (due to limited styling by widgets provided?? and slow??), faster compiled language, simpler by design, **covers most use cases**
  - C# alts: Avalonia, Uno
?. RubyMotion
  - can try it, though be weary
?. Haxe?
  - cna try it for ui app, though be weary
  - adds the benefits of haxe: cross-platform, export to anything and thus allowing you to use any target langauge libs, including stuff like python (for science libs), java and JVM langs, c#, c, c++, and so on
  - haxe has a few solutions
    - **Haxe-UI**
      - wildly ambitious project supporting multiple frameworks and backends
      - works with **all** of the haxe frameworks including:
        - **Heaps**, you get the power of a complete game engine
          - make apps with your game engine!
        - **NME**, you get a solid, stable simple io engine
        - OpenFL & FeathersUI is yet another option, with ability to compile via hxcpp to mobile devices
      - bad power consumption for mobile
        - https://community.haxe.org/t/haxe-right-tools-for-ios-and-android-app-development/4179/6
          - basically, anything running 60fps to draw widgets is no good
          - android (native) on the way!
      - https://raw.githubusercontent.com/haxeui/haxeui-guides/master/000-Getting%20Started/_assets/welcome-system.jpg
        - this image shows the libs/platform support
      - **html5 "backend" sounds great**
      - **pdcurses!!! omg!**
      - haxeui-hxwidgets for desktop OSs
      - ios (native)
        - https://github.com/rainyt/hx-ios-uikit
    - coconut
      - seems to be another layer of abstraction between io engine and ui
    - hx-electron
      - desktop OSs only
    - react-hx
      - haxe bindings for react native
  - TODO: **why not just use a game engine like heaps?**
2. React Native for the **huge open-source javascript libraries and community**, *nasty* raw HTML/CSS ui language, although maybe not the best performance for mobile, it's **still the best solution for web targets**, and **you get access to native components!!, allowing you to basically write native code on any OS at a high-level without ever touching native tools/languages/devices/etc.**
  - C# alts: MAUI
?. Qt, with official python bindings, maybe can write C++ code to access native componenets?, but that would be *grooosss*, but definitely safer long-term investment as Qt is the oldest and Google abandons all of their products

it seems in general that **Flutter is amazing with an excited new community, quite like React Native was in the past, but limited, whereas React Native still lives on, native support for everything, now including Microsoft covering the Windows and even MacOS targets (surely a big stab at Apple's closed source nature). Flutter can be used for most simple cases. React Native can be used for more technical, experimental, custom cases that requires much native component access, and doesn't constrain.

SwiftUI is constrained by it's terrible MacOS/XCode dev environment: you basically need a Mac (hardware). I'd much rather just use VS Code or even straight up terminal editor for a relaxed scripting feel. :) happiness *matters*.

also, although i haven't used javascript for a decade, i'm just not interested. Not then, not now. It sounds like a messs. A mess of shiity web devs. I personally don't need a million libraries. Just one good standard library is enough... *maybe.* Can always check npm for libs later on to compare... Or who knows, maybe Google/Dart will just build a javascript compiler, like Haxe (so that you can use javascript libraries)..

and then there's finally haxe, which is absolutely a personal preference, but, just thinking about this conceptually, all ui frameworks are just shitty game engines restricted to a few inputs and a few outpouts. So, why not use an io engine, or a game engine?, along with a simple retained-ui lib, such as haxe-ui? I personally think it's the perfect solution for me, as i've got experience in both haxe and heaps, and surely nme would be really easy to manage too. The only problem with this is that it wouldn't look native, and thus possibly fail to pass the App Store, but, given that many apps nowadays don't look anyhting like native iOS stuff, including big apps like discord, i see no reason why not to give it a try. Besides, Heaps and NME would both cover the main desktop OSs with ease... i think Flutter just has an exceptional handle of native appearance AND mobile.

so, that leave either using **Haxe-UI for convenience and haxe love, Flutter for native appearance and fast dev, and React Native for using native apis**.



constraints and limitations:
in order to publish to the App store, the app needs to appear native, thus, the game-ui idea is botched for Apple apps (iOS and MacOS)
in order to use SwiftUI, you need a MacOS, and you need to use XCode (and XCode is garbage).





ui framework agnostic:
instead of being tied to a framework, just abstract it! **this is the best solution i know of**...

Haxe
  - **HaxeUI**
    - currently supported back-ends: (TODO: update this), wxWidgets for desktop OSs, **Heaps**, **NME**, OpenFL (and therefore HaxeFlixel and HaxePunk (rip) too)
    - wxWidgets is one of the longest-living libs i've seen!, kinda amazing
  - coconut
    - currently supported back-ends: (TODO: update this) **React-Native for mobile**, coming soon: Heaps
  - both of these feature a **swappable "back-end"!!**: meaning, it's just a set of APIs, and so if you do want to switch to another framework, you can do that without changing your code, or at least minimizing that. This way, as ui frameworks come and go over time, you can keep the same core code, but swap the ui frameowork, say, from Heaps to React. All that is needed is to write haxe bindings for the target UI framework. This way, also, you can just re-use all of Haxe code and even coconut ui api code. **this might just be the most future-proof solution that i know of...**
    - from Rudy on the Haxe server (15 years Haxe dev with tons of React experience): "Yeah the theory is all nice, but in practice you'll build your UI with/around your current backend's components and that won't translate well to other backends"

Ruby
  - Glimmer DSL
    - supports many back-ends (C/C++), old and contemporary: libui-ng, qt, gtk/gnome, tk, etc.


# "hybrid"
basically bindings to native components (UIKit for iOS, Win32 api for Windows, etc.). This is the first solution that came to my mind when i thought cross-platform ui/apps : just provide bindings, and then a common framework on top of that. **The main trade-off is this: it will not constrain as you always have acces to native APIs, but you must understand the inner APIs of each target: UIKit for Apple, Win32 for Windows, and so on. Thus, this is definitely not for the casual or even the indie devs.** Indies should go one step up, to "owner-drawn" non-native frameworks.

wxWidgets
  - the grand-daddy of hybrid frameworks
    - a very old but solid open-source C++ project
  - **mobile support is pretty non-existant**
  - "produces apps with a distinctive 1990s feel"
  - there are many bindings for it, including one for haxe! HaxeUI contains it as a build option!!
    - http://haxeui.org/getting-started/hello-world/
      - pretty sick, just change build target and bam! but surely mobile support is lacking. :(

RubyMotion
  - http://www.rubymotion.com/about/
  - **mac os x, ios, android platforms only**
    - thus, really mainly for mobile platforms only
    - because the ruby runtime was forked off or inspired by macruby
      - **thus doesn't use vanilla ruby, and thus won't work with most ruby gems :(**
        - thus very likely a few small community and small library system
  - closed source?
  - *i think* it's a hybrid, basically just bindings to everything, wherein you'd have to develop specifically for each platform target
  - at the moment there's a free version ("starter"), then, perhaps after it is popular or for publishing to other devices you need to pay quite a bit..
  - llvm
  - https://davetrollope.medium.com/i-found-the-holy-grail-in-cross-platform-mobile-development-915500c1c4ca
    - "I released the iOS app and quickly acquired a number of users, so I moved on to developing an Android version. RubyMotion fell flat on this endeavor. I was unable to use get the app very far without considering new Java bindings for APIs I wanted. Not something that I consider a cross platform solution, from a users perspective."
  - basically run by 1 person: amir rajan

React-Native
  - the most popular solution as of 2022
  - it's actually a specific component, that goes alone with React. React is the front-end ui framework. React Native is the native back-end (wrappers, common components)
  - **uses native device componenets / wrappers**
  - javascript, but since haxe has bindings, perhaps there are other bindings?? :o
    - javascript has the biggest library tho (npm)
  - the syntax / ui lanugage of React is like HTML-like :/
  - **the most mature/oldest one** (excluding Qt), setting a new standard, an therefore has the largets library collection
    - expo.io builds the mobile apps for you, so you don't need a Mac! :o
  - open-source and (*was?*) extremely popular among trendy trashy startup companies, but, **it feels more more abandoned now, i think even Facebook stopped using it now, lol!**
  - great VS Code dev experience, although still dynamically typed
  - Facebook (abandoned to open-source?)
  - Microsoft..? https://microsoft.github.io/react-native-windows/

React (web)
  - javascript world, a web framework, but also has a native framework (React Native)
  - most popular, therefore many libraries, tutorials, support
  - live-reload (no need to build, deploy, etc.)
  - completely code shared, ‘build once, run everywhere’
  - you sorta build "components" (widgets) with HTML syntax (ew)
  - as of 2022, still the most popular
  - made by Facebook? (*vomit*)

Maui <- Xamarin(.Forms)
  - .net / c# world, uses native ui
  - two ways to do ui: forms library can be used for completely code-shared ui, or, ios and android specific libraries can be accessed making for more complex platform-specific ui
  - there is only ‘fast deployment’ for android devices via android studio; there is no live-reloading
  - old-school build ‘n deploy process
  - **of the big 3 (Flutter, Xamarin, React), this was the least loved**AUI (Xamarin)
  - C#/.NET WinForms(?) api
  - maintained by .NET foundation

Uno?
  - C#/.NET WPF api
  - renders widgets using the platform's primitives
  - uses one of the C#/.NET WinForms-like api to build widgets
  - hot re-load
  - more mobile-oriented





# non-native
for a single, indie dev, these are the way to go. Well, either this or web, which is inherently cross-platform

Qt
  - the grand-daddy of all non-native ui frameworks
  - i didn't even know it still existed!!
  - impressive use history: from contemporary use in Linux's KDE desktop UI(!!!) to Valve's Source Engine
  - C++, but has official python bindings :o
  - non-official rust bindings
  - feels like a massive tool :(, like as big as Unity!
  - renders controls using media graphics libs: opengl, directx, vulkan, etc.

**Flutter**
  - the contempory banger, quickly rose in popularity, equaling React-Native to become top 2
  - hot-reload works on all devices, it's quite the killer feature
  - web target sucks, but mobile is great, and desktop is really good, though feels mobile, as it uses the same graphics/ui
  - Dart has VM during development and AOT compilation for production, basically like Haxe
  - *tiny* minimum
  - supports native widgets and web
  - mobile as main target, but works on everything!
  - renders/draws using Skia graphics lib
  - most loved framework on the SO surveyapp size, like 2MB for Android
  - Google, but no propietary crap like apple and microsoft

Avalonia
  - C#/.NET version of Flutter
  - renders widgets with Skia (like Flutter)
  - uses one of the C#/.NET WinForms-like api (WPF) to build widgets
  - more desktop-oriented
  - "cleanest" code-base
  - "We've had huge companies adopt Avalonia for their desktop apps, including JetBrains, GitHub, KLM and more."



# other?

Electron
  - i'm not really sure if this even belongs here, but i think you can make anything with it..?
  - the major problem: it runs on top of a web browser: Chromium, meaning, each Electron application contains a copy of Chromium inside! :o
    - just based off this alone, it does not intrigue me... but:
  - VS Code, Skype?, Slack?, etc., basically any app that started as a web-app used this to make a "native"'ish app







# not interested / corporate folks faking and abusing open-source folks
SwiftUI
  - Apple's newer (2019?) tool for making native ui apps for Apple platforms (MacOS, iOS, etc.)
  - https://developer.apple.com/xcode/swiftui/#
  - Apple's products, including their software, tend to last decades, making this far more future-proof than Google's Flutter
  - because it's rather new, **it even has among the best api, perhaps even simpler/better than Flutter!**, despite that though, it seemsyou:
  - **must still learn native libraries (UIKit, AppKit, etc.)**
  - **need a MacOS to dev** :(
  - **need to use god awful XCode to dev??**
  - **closed-source means you cannot figure out what the code really does, you just grasp/understand through API documentation**, and that documentation is poor (**remember your time with Cocos2D and that shit Apple networking code?? *ugh* :vomiting_face:)
    - it's also confusing because Swift, the programming language, is open-source... however SwiftUI isn't, and since Apple's products are all closed-source, it doesn't make much sense to use the language, even though it's a good language. If SwiftUI was a cross-platform product, both targeting all platforms *and* able to dev from all platforms, it *could* kill. The simplcity and productivity of VS Code is just too important.
  - todo: not sure if it has a web target, which is pretty darn important!
  - Apple


Jetpack Compose
  - Google Android's version of SwiftUI ?? *gross* :vomiting_face:
  - still too new (as of 2022)

Kotlin MultiFramework
  - ...how is this different from Jetpack compose..??
  - terrible name... does it compile to C now??
  - is it Google? why would Google have 3 UI frameworks??


# old
x/Ionic
  - typescript, angular, uses cordova (aka phonegap) to port web code to devices, uses web (html, css) for ui
  - because it uses web for ui, it just can’t look good as native ui apps
  - can now be used with any javascript front-end (react, angular, vue, etc.)?



# tools
**CodeMagic**
  - builds apps for you, so that you don't need a Mac, iOS device, Windows(?), and Android to make stuff
  - 500 build minute free per month
  - supports: native iOS/Android, Flutter, React Native, Unity, and some older ui frameworks
  - https://codemagic.io/start/







https://docs.microsoft.com/en-us/windows/win32/learnwin32/retained-mode-versus-immediate-mode
  - TODO: to read?



# my answer to a reddit question:
https://www.reddit.com/r/AskProgramming/comments/sqk6id/avalonia_vs_uno_vs_maui_vs_flutter/

tldr: try Avalonia or Uno so that you can stick to C#, then, if they end up being problematic, fallback to Flutter. Maui, well... i was never a fan of Xamarin, but i’m glad they changed that horrible name!

i was just looking at this too... maybe there’s some C# bindings for wxWidgets? I found one for my language: haxe via haxeui lib... It just seems like one of those old solid libs that’ll never die, like many good C++ libs... This way, you don’t have to learn a whole ‘nother api, framework, way of doing, language, or anything! :)

although... now looking at the repo... i just don’t see much mobile support... even the iOS readme says it’s just for “a base for simple apps”... :(

https://github.com/wxWidgets/wxWidgets
https://github.com/wxWidgets/wxWidgets/tree/master/docs/ios

poop.

... yeahhhhh, it might be better to go for the newer stuff (Avalonia, Uno, Maui) or solid stuff (Google’s Flutter)...

i found this, to help choose which one:
https://github.com/robloo/PublicDocs/blob/master/XAMLFrameworkComparison.md
though, do note, written in june 2021, and now Avalonia might have decent mobile too? (still in beta)



sources:
https://insights.stackoverflow.com/survey

https://insights.stackoverflow.com/survey/2021#technology

https://insights.stackoverflow.com/survey/2020#technology-other-frameworks-libraries-and-tools-all-respondents3

https://medium.com/swlh/xamarin-vs-ionic-vs-react-native-differences-under-the-hood-6b9cc3d2c826










# TODO: merge this
  - so, third-party Xamarin(.Forms) merged into .NET was re-titled to MAUI (a *much* better name). Xamarin used to cost *a lot* of money, but i think it's now free and open-source (it's on github! :) ).
  - Avalonia is the spiritual successor of WPF (i personally don't know the difference between WPF, Xamarin.Forms, or ASP.NET: to me they are all "win forms"!). At the moment it only supports desktop platforms, but i think it will target mobile platforms soon, as they have a *ton* of support, including Unity and JetBrains.
  - Uno, along with MAUI, are the most direct solutions, both are far more mobile-focused than Avalonia. If one is mainly targeting iOS, then it might just honestly be better to write native Swift code instead! maaaybe.
  - as it turns out, **Haxe does not have a *native* (haxe) library of bindings for the native GUI APIs of various platforms (and devices)**. However, it does have HaxeUI, which serves as a kind of intermediary containing several "back-ends", one of which is the C++ open-source cross-platform GUI library wxWidgets. HaxeUI is actually kept up-to-date, but i'm not so sure about the status of wxWidgets, although, it was quite popular back in the day... Anyway, even **wxWidgets doesn't seem to support mobile platforms, only desktop platforms,* definitely not Android (the "dev roadmap" page says they have no plans for it unless someone wants to fun them), and iOS seems abandoned (the docs/readme reads: "wxiOS is far from a full supported port, but can be used as base for simple applications and future improvements."). Thus, **Haxe does not currently (2022) have any way to create native GUI apps for mobile platforms, neither iOS nor Android.**
    - note: NME does not provide any sort of native GUI bindings neither, it just provides a neat Flash-like way to draw stuff on the screen, for several different device platforms. Lime pretty much does the same thing as NME (they even share a lot of code), but is way more messy / bloated. OpenFL, which uses Lime as a "back-end", just adds a higher level to that.
    - and so to conclude, if you care abuot native GUI, then C#'s frameworks (Avalonia, Uno, MAUI) and Dart's Flutter are the main options that i know of, and of the four, i'd pesonally choose Flutter or Avalonia. However, if native gui doesn't matter to you, and you just want to make a game or even an app *without* native gui, then i'd choose Haxe or any game framework really,

along with several other languages/frameworks/game engines (haxeUI, raylib's raygui, various newer imGUIs, etc.)

 as it's much easier to divide the UI drawing and maintain a graphics renderer context and input for several platforms, then to maintain *the entire gui api for every platform, including input and renderer**. Yeah... it's a confusing mess... I personally am inclined to comprimising native gui for the ease and simplicity of immediate-GUIs, specifically **dear imgui**.., and calling it a day, lol. fuck all the native bullshit. it's just too much!
# end of todo




https://www.donnfelker.com/flutter-just-might-work/
  - good post, covers many


https://blog.udemy.com/flutter-vs-react-native/
  - explains the architecturs of both

https://www.wxwidgets.org/develop/roadmap/
https://docs.wxwidgets.org/trunk/plat_ios_install.html


https://news.ycombinator.com/item?id=23198914
  - good reddit-like data


I’ve spent the last week learning SwiftUI to see how hard it would be to reimplement Notion in a performant way. It seems really ... unfinished. Like, the default List view is really hard to style. I spent 4 hours yesterday trying to get an unstyled text Button to have a hit target bigger than the characters themselves. Adding a frame with a background worked, but if the frame had no background (or a transparent background) then the hit target would stay tiny. I ended up fixing it by just reading through every property method in swiftui and guessing. It reminds me of web development in the early days of jQuery.
**If the SwiftUI code were opensource it would be much more pleasant - I could paw through the code if I needed to, file issues, and so on. But the whole experience compared to writing typescript with VS Code is shockingly bad. With the preview open Xcode sometimes stutters so much that it misses key presses - so I’ll type a function name and it’ll come out missing letters, because apparently I wasn’t typing slowly enough for my $3000 computer from 2016 to keep up.**
x

I certainly hope so, because this was definitely on Swift 5.2 . In general if you come in expecting a dev experience anywhere close to writing React in Typescript using VSCode, SwiftUI and Xcode both are a bit of a disappointment - it's slow, it's glitchy, autocomplete kind of sucks, never mind tooling like Prettier which I take for granted now.




my personal posts:

https://github.com/ocornut/imgui/discussions/5090

title: is it okay to use imgui for iOS apps?

PathogenDavid's answer:
TL;DR: Just because you can doesn't mean you should.

is it okay to use imgui for iOS apps?
There's no reason you couldn't (and people do), but I personally would not unless it's just for debugging stuff. IMO using Dear ImGui as the primary UI for mobile apps is shoving a square peg in the round hole. It was designed around desktop UI paradigms, not mobile ones.

i’ve read quite a few times that the main problem with immediate gui, in general, as opposed to the normal “retained” gui, is that it can be CPU-expensive, for drawing the entire GUI on every frame.

First, is that even true? lol
I wouldn't say this is inherently true, but it is somewhat true for Dear ImGui. Dear ImGui was first and foremost designed for games, in which situation you're probably rendering a lot more complex stuff at 60 FPS regardless so its overhead if negligible.

There are some workarounds for this, look at the various power saving PRs. #4076 #3124 #2749

I personally just want to make simple apps for iOS, [...], and i don’t care about native feel anyway.
I would be concerned about cert. Dear ImGui won't play nice with VoiceOver and I don't believe the text input would properly support things like auto complete or correction. (If it does I can't imagine it works as well as the native text input widgets.) I don't have experience with cert on iOS but my understanding is Apple is very picky and I can't imagine they'd like these things.

Also my understanding is Apple rejects apps which they think depart too far from their UI guidelines.

(huh, sorry to post here, as i see the only category is issues... but i read on the actual forums that it was better to post here..)
