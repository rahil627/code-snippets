
# temp
get process kill-script, and run it when using the vs-code extension

# setup
install vs-code extension for luxe, which includes everything for wren too (there is no wren LSP at the moment, it comes from luxe-agent)
  - https://marketplace.visualstudio.com/items?itemName=luxeengine.luxe
  - also make sure this stupid setting is off:
    - "editor.wordBasedSuggestions": "off",

install luxe launcher
  - install luxe-agent module
    - provides auto-complete to the vscode extension
  - install debug module
    - provides a debug console
    - TODO: see steps in DMs

install debugger (temp-fix)
  - see notes in DMs

https://luxeengine.com/docs/
  - "create with luxe"
you'd start here: https://ruby0x1.ca/dev-lx/guide/
and then here https://ruby0x1.ca/dev-lx/tutorial/overview/

once you accept the github invite I sent (check email), there's this LD jam game, https://github.com/luxeengine/ld46 - https://ruby0x1.itch.io/the-ruins
it's a little platformer with some scenes + some tilemaps if you want to open it in editor and look around some content.
- magical ice cream thing https://luxeengine.com/1.0/k2020/ - https://github.com/luxeengine/icecream
- breakout game https://joeld42.itch.io/breaklchemy - https://github.com/luxeengine/breaklchemy

- you can file issues here https://github.com/luxeengine/preview/issues/
- you can post an intro here, it's encouraged https://github.com/luxeengine/preview/discussions/1




project structure:
  - not sure if there's an actual structure, i think you can simply add files and it will auto-generate the things it needs in the same folder

luxe.project
  - modules.lx
    - dependencies
scene
  - level.scene
    - class.??.entity.lx
      - contains the values of an entity class, which are the values of it's modifiers (transform, sprite, etc.)
outline
  - inputs
    - inputs.input.lx
      - very simple key-mappings for keyboard, mouse, gamepad!
system
  - modifiers/systems go here!:
    - do_something.modifier.wren
    - do_something.modifier.api.wren
      - generated and re-generated when modifier.wren is updated
    - do_something.modifier.wren.meta.lx




architecture notes:
SomeClass.create() // constructor name is usually create
  - Entity/Modifier/Scene.create()
SomeClass.destroy()
  - also usually provided by many classes


https://luxeengine.com/docs/guide/concepts/
  - API isn't object-oriented, often uses static functions instead of class instance public functions
    - World.set_rate not world.set_rate
    - sometimes these instances are called a "handle"
    - "This makes it easier to find all call sites of any particular API, and instead of treating objects as instances which have a cost to create and maintain, they are treated as a primitive value. They're just like a number, making them light weight."
  - commit (batch)
    - for example: queueing up for drawing, then committing changes when done


files 'n classes:

Game is Ready

modifier file:

Data
  - a struct for data, makes it feel nicely data-oriented
  - shows up in the game-editor!

Your_Modifer as API
  - your public api goes here!
    - static create(...) with various amount of parameters
    - some_function
  - Your_Modifier.create(some_entity)
    - creates AND attaches Your_Modifier to some_entity
    - (provided by default)
  - Your_Modifier.get(some_entity).field
    - get some field from the modifier's Data
  - Your_Modifier.get(some_entity).data = 3
    - setter works like this (no some_entity.set)


System is Modifier
  - init
    - run once per system
  - attach
    - run once per entity
  - detach
  - tick

Asset
  - Asset.scene(id)

Prototype ("prefab" in unity)
  - "Prototypes are similar to a Scene, they are pre-configured entities with their modifiers ready to create. They can be created dynamically, and they can be placed inside a scene, and inside of other prototypes. Each instance can have the values from the prototype overridden when placed that way."




modifiers/prefabs:
Transform
    var scale = Transform.get_scale_world(entity_b)
    var height = Arcade.get_height(entity_b) * scale.y
    var top = Transform.get_pos_y_world(entity_b) + (height * 0.5)
    var dist = (top - (Transform.get_pos_y_world(player) - 32))

    if (dist > 32)
      ...






modules:
can use the launcher to add modules to a project via a '+' button or just add the imports manually

luxe modules:

world module:
World
  - set_rate(world, 1)
    - 0 to pause, 0-1 slow down, 1 normal speed, >1 faster speed

Tags
  - has_tag
  - very interesting..: it's implementation seems similar to adding a modifier/componen-system: just no factory create function, but has access to all entities

game module:
Frame
  - init -> sim -> visual -> debug -> end
  - Frame.end { do-something() }
  - Frame.before/after(section, priority)
    - order execution with priority


scene module:
a world can have multiple scenes, which makes it useful for layering/grouping objects in a complex scene

"Scenes are typically created with the luxe editor, but they're simple data inside of a folder. Take a look inside the scene/level.scene/ folder, and look inside any .entity.lx file!"


input module:
Input
  - basic input release/press
"named input event"
  - name assigned to one or more inputs
  - see inputs.lx file




other official modules (not a part of luxe module):
luxe-agent
  - provides code completion

debug
  - provides debug console

kenney
  - a selection of assets from a nice free/contributed asset packs site

arcade
  - Arcade, ShapeType, CollisionEvent..??
    - Arcade includes velocity?, get_height (why?)
    - note: colliders/collision-handling aren't a modifier/prefab

shape
  - draw simple 2d shapes

camera






# two ways of making:
from scratch "immediate-style api" (a la monogame, dragonruby, drawing api of flash) drawing stuff to the buffer, or, an entity-componenty-system "world api" which renders 2d sprites or 3d models, which is provided, and which is closely tied to the provided editor (a la unity, godot, etc.)

"With the world system, we can create things in the world that will continue to draw as long as they're alive."

## infinite ways of structuring:
though there are just two api's, there are infinite ways of structuring your code:

modifiers can be used as scripts for anything, whilst keeping the bulk of code in the rather procedural game class's `construct ready` and `tick` functions. Whether those procedures are seperated into other files is upto you. It's very possible to have all of the game's code in a single file!

modifiers can be more object-oriented, representing an object in the game: an enemy, bullet, etc., or better, a small, re-usable component, keeping the bulk of code within the modifiers' `attach` and `tick`. Mix and match however you like! :) For some modifiers, it may make sense to completely encapsulate a game object, for others, it can be a random *snippet of logic*. Sometimes, for performance reasons, you may have to put the code in the main game `tick`.

NOTE: modifiers are linked to the editor, in which you can change the values within `Data`, just like the `Transform` modifier. Though it's not necessary to use them, it's kinda the implicitly recommended way of doing things. It's especially useful for tuning game values, otherwise you'd have to create your own ui to easily alter settings..

a thought: this is step up from the old Flashpunk, which coupled `Entity` with transform, graphic, collision, tween, 'n more. HaxePunk, iirc, seperated the code, but kept the helper functions on `Entity`, keeping the ease of Flashpunk, yet slightly decoupling systems, and adding more: scene, camera, layers. Heaps doesn't provide `Entity` class/system nor ECS, it's up to you to decide and make one; It does however provide many of the components. Luxe provides you everything, but modularly: the components, an ECS, and a game editor. It's up to you to choose what you want, and code how you want.



# structure / way of making
seems like a stardard entity-component-system..

start by writing to the main Game is Ready class?

component systems ("modifiers", "scripts") should contain a bulk of the code
  - components can create other components, though i'm not so sure if this is a good idea..
  - put static functions in the API class
    - static create(a, b, c, d)
  - put data in Data
    - especially data to be modified easily (in the editor)
  - examples:
    - 2d-top-down player controller, grow, shine, follow, collider, etc.

over time, as components become large, they can be divided into smaller, more abstract components, which will naturally make them more re-usable (especially when compared to object-oriented design)

use prototypes, which are just a combinations of components, as they can be easily added through the game editor





# guide
https://luxeengine.com/docs/guide/

world
  - "The world gives you the tools to manage your things, and lets you create spaces where your game can happen."
  - "You also often have more than one world, like a UI world and a game world."

entity
  - a unique thing in a world

modifier (component)
  - ~"A modifier describes something you want the entity to be able to do. Just attach a modifier to it to do something. What an entity looks like, how it behaves, and what it actually is can change during the game, just by attaching and detaching modifiers."
  - **it doesn't have to be a concept based on a real or single idea, it could be move-and-explode-and-delete**, and maybe that's why it's named modifier instead of component
  - "Inside the tick method of our modifier, we are handed the entity that we're attached to. This entity is the prototype root of our instance, because that's the entity we attached it to."

  TODO: move this to the architecture section
  in a modifier file:
  tick(delta: Num) {
        each {|entity: Entity, pillar: Data|

            }
              }
  }

  // TODO: system_in method fetches the system to call into??
  var system: System = system_in(world)

systems
  - ~"are what power modifiers. The modifier is added to the entity via a world *system*. A modifier describes what you want, but the system is what actually makes it happen."
  - "A modifier system sees all entities that is attached to, rather than on an individual entity level. We can see this in the tick method, it has an each method which will hand us each entity and the data for that entity."
    - there is one system per world







# tutorials

## create a project
use the luxe.exe launcher to create a project
open the created project folder with vscode
  - (make sure you have the luxe extension installed)
    - the link to the .vsix file is somewhere on the right side
open game.wren
c+s+b to build


## draw and input / breakout game
goes over the game programming basics using Draw class to draw stuff directly to the screen/buffer


## world
goes over the ECS-way of making games, while making a flappy-bird clone
(see architecture notes)


## editor
https://luxeengine.com/docs/tutorials/editor/
  - TODO: 404


