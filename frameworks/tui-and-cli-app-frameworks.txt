

TODO: generate cli?
https://github.com/c-blake/cligen



conclusion:
tl;dr. ruby for personal single-file std-lib-only scripts/cli apps. otherwise, any general language that has native compilation: haxe, **haskell**, go, etc. **forget the tui dream!**, just skip to a gui

besides, there are interesting options to make gui apps (via web browser and/or native) now, see [app-frameworks]. some newer ones even have a ncurses back-end..! even the old **haxe-ui** has one!!


my thoughts:
the main problem is that your program (cli or tui) is only runnable from a terminal, which really really *really* limits the users (though, perhaps not as limiting as writing an emacs module ;) )

however, the overhead (in code length and execution) of cli is trivial: an options parser is often even included in the std lib, and if not, is also trivial or just plain unnecesary. cli just adds literally a few lines of code. compare that to using an entire gui framework..

tui is a bit more work, usually requiring working with curses/ncurses, or some lib/framework on top of that, making cross-platform solutions (flutter-like) more appealing, though, tui still has a much simpler build process: no need to build a native executable for each platform, it just has to display to the terminal, which is a sort of cross-platform solution in itself




**ruby is *perfect* for personal scripts and simple cli apps (via optsparse std lib), especially ones that simply use the std lib / no dependencies**, but a pain for others to run once dependencies are added, which makes it a very limiting choice: what's the point if you can't use libraries..? Also, there's no path to a gui, maybe imgui at best, or dragonruby!!, lol.. And anyway, even after that, you'd need the correct version of ruby installed... what a fucking nightmare!!

elixir (and erlang) is also unfortunately neither good for small scripts nor cli apps nor  native-gui apps :(

haxe, haskell, go, rust, or [your current favorite general-use compiled language] are more practical for portability (allowing others to easily run it) and performance
  - haxe for it's little indie gamer community, simple std lib, powerful language, and haxe-ui-web (transpiles to javascript)
  - **haskell for any chance you get to try haskell!!**
  - go for its simple native binary building process, simple concurrency and parallelism model, simple yet powerful std lib, which often has all you'd need, and libraries/eco-system well-suited for small tool apps; it also has a solid imgui and rmgui lib
  - rust for it's incredible library eco-system and infinite power, at the cost of cognitive damage

in light of flutter and flutter-like declaritive ui rust frameworks (see [app-frameworks.txt]), and solid web frameworks, some of which probably can even target/export to tui, there isn't much reason to go the tui route.. in the amount of dev-time using a tui-framework, you could've used a more general cross-platform app and/or web-app framework.  though i love them, it seems a dead-end, or a very very special use-case (dev tools for terminal users--not including emacs users!), but just in case:

go/tview or rust/ratatui for tui apps
  - both are quite popular, but i'd def choose go for simplicity..
  
python/textualize for tui *and* web apps
  - special for targetting tui and web as they are basically all you'd need to cover all audiences. i hope future app frameworks would aim for these two targets.. web for accessibility, tui for performance, and without the hassle of building cross-platform



https://jesseduffield.com/Lazygit-5-Years-On/#weighing-in-on-the-cli-ui-debate
  - a good read, by the person that made lazygit
    - particularly the "tui vs cli" section
      - **"I would say I’m pro-terminal, but borderline anti-CLI. When I’m interfacing with something I want to know the current state, the available actions, and once I’ve performed an action, I want to see how the state changes in response. So it’s state -> action -> new state. You can use a CLI to give you all that information, but commands and queries are typically separated and it’s left as an exercise for the user to piece it all together. The simplest example is that after you run cd, you have to run ls to know which files are in the directory. Compare this to nnn which mimics your OS’s file explorer."**
        - precisely why i hate cli apps
      - "...**CLI interfaces are great for scripts and composition** but as a direct interface, the lack of feedback about state is jarring."
        - composable via shell
    - "tui vs web"
      - "TUIs guarantee a keyboard-centric UX"
      - "TUIs have minimalistic designs"
      - "TUIs are often faster than non-TUI counterparts"

https://news.ycombinator.com/item?id=32331367
  - TODO: to read
  
https://news.ycombinator.com/item?id=35864458

https://github.com/rothgar/awesome-tuis?libraries
  - TODO: go through these..






a special tool:
gum
  - allows you to glue on a tui widget on-the-fly via shell pipline or to compose a cli
    - scoop list | gum choose/filter | scoop uninstall
    - gum confirm && rm file.txt
  - more of a set of cli tools:
    - gum filter == fzf
    - gum pager == bat
    - etc.
  - can be intersting when thrown together in a shell script..
  - made by charm.sh
  


frameworks and langs:
  - anything can be used to make a cli app, but if the language is able to compile to a native executable binary, it makes it easily portable, at the cost of being non-editable/"scriptable", compared using a scripting language. Also, if it doesn't use a scripting language, and the app requires input, then the terminal (or some ui) is needed.
  
  
https://github.com/rothgar/awesome-tuis


x/elixir
  - in case you already use it for web
  - not suitable for scripts, as it requires starting up a vm
  - not suitable for nor cli apps, as it's not easily portable
   - requires burrito lib, which wraps it in zig, which then requires the machine to have zig installed
   - https://elixirforum.com/t/how-suitable-is-elixir-for-a-cli-application/36184/13
      - Here is my summary:
        Are you making a CLI tool for Elixir developers only? If yes:
        a. Do you want to extend Mix (like mix phx.new)? If so, use mix archive
        b. Otherwise, use mix escript
        Otherwise, don’t use Elixir (for all the reasons mentioned above and for the same reasons I wouldn’t use ruby, python, java, etc)
          - response by the creator of elixir
  - x/ratatouille
    - abandoned, and built on an abandoned C tui framework: termbox
    - declarative tui framework

rust
 - not worth the dev time, just use something simpler..?
   - TODO: read [this ](https://rust-cli.github.io/book/index.html)
 - yet it does **likely have the most complete library eco-system, especially in regards to terminals..**
   - the terminal apps i use, wezterm, helix, etc., are written in rust, and share common libs
   - crossterm, etc.
 - **ratatui**
    - current fork of rs-tui
    - quite popular..

**haxe**
  - my fav lang :)
  - not scriptable (unless using hscript), requires an extra build file
  - haxe-ui to add a gui
    - has a web target, native target, and possible even a tui target
  
go
  - for performance, portable native binary, great std lib, quite ideal for writing simple cli apps (and being run as a "micro-service") and tui apps
  tui:
    - https://github.com/jesseduffield/lazygit/issues/2705
      - maker bubbletea/charm asks maker of lazygit to use their framework.. lol
      - he used gocui, which is now abandoned, and maintains a fork of it within the app
        - main reason: bubbletea has a lot of padding, and he needed something compact
    - **tcell**
      - the main terminal lib
      - successor of termbox
      - used by **fzf, lf, gocui (lazygit)**
      - **tview**
        - also popular.. lots of nice little tool apps use it..
    - bubbletea
      - a tui framework that even has extensions
      - elm (mvc-like) pattern
        -  https://github.com/saqlainnnnn/kanban-board/blob/master/main.go
           - though elm architecture, it doesn't look too abstract, all in one file, besides, you'd need some architecture to make it stateful..
        - not idiomatic go, far more opinionated than tcell/tview
      - lipgloss
        - css-like "style definitions for nice terminal layouts"
        - https://github.com/charmbracelet/lipgloss
      - used by gh-dash
  - cli:
    - cobra, cli, go-args libs

**ruby**
  - **the *perfect* library for quick scripting**
  - **produces beautiful, concise, compact code**
  - also has the benefit of **sharing a beautiful language for web dev**, allowing tech knowledge to be re-used
  - simple examples:
    - https://github.com/defunkt/github-gem
    - https://github.com/defunkt/colored
    - https://github.com/defunkt/gist/
      - when the guy who made github was young..
  - cli
      - **ruby's native "optparse" lib**
        - **just use ai to generate it**
      - several other option parsing dsl libs, but adds a rather trivial lib/gem
        - https://github.com/JEG2/highline
          - whoa.. ruby is just.. somethin'
        - https://github.com/postmodern/command_kit.rb
          - this one looks good
        - thor
          - heard this is overkill
  - tui
  - **tty-toolkit**
      - **a modular cli framework, only add what you need**
      - some useful components:
        - tty-option
            - yet another options parser
        - **tty-prompt**
            - most used component
  - cli-ui
      - a framework used (and well-maintained) by shopify


python
  - pytermgui
  - **textualize**
    - interesting project that builds to terminal and web
    - https://github.com/Textualize/textual
    - rich
      - "lib for rich text and beautiful formatting"
      - https://github.com/Textualize/rich










