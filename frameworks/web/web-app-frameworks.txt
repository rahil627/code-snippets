

conclusion:
"back-end" routing:
**phoenix**
  - heavy traffic: parallel, etc.
  - a successor to ruby's back-end frameworks (rails), yet maintaining the simplicity of ruby's minimalist frameworks (sinatra)
ruby minimal web frameworks (roda > sinatra)
  - **for minimalist apps**
  - for educational purposes: old school web app making in a minimalist style

front-end:
**svelte**
  - makes front-end make sense to object-oriented programmers
react
  - "React is only concerned with the user interface and rendering components to the DOM"
  - for big stuff
  - paved way for state-based web app design

full stack?:
flutter
  - for mobile apps + web apps together! > react native (which requires using wrappers for native libs)
  - for performance/graphics thanks to web assembly output?
  - can use dart for back-end too
  - **for people that hate web dev (html/css/js)**
phoenix live view
  - specifically for single-page dynamic apps that require a constant connection
  - phoenix live view native
rails
  - for big stuff




the frameworks:
ruby on rails
  - *the* classic web framework
  - magical
  - "majestic monolith"
    - https://m.signalvnoise.com/the-majestic-monolith/
    - for a small team, this makes more sense than micro-service architecture
  - https://world.hey.com/dhh/the-one-person-framework-711e6318
    - rails 7 gets closer to being "the one person framework"
  - https://elixirforum.com/t/rails-and-phoenix-as-one-person-frameworks/44779/14
    - rails is the best solution for gettings to minimum viable product, but maintaining it sucks due to updates breaking code

ruby/grape
  - "opinionated"
  - between roda and rails

**ruby/roda>sinatra**
  - the prettiest solution (see generated app.rb), no MVC pattern
  - even includes a choice of **templating** system (just as jekyll does): simplify writing html/js/css, and with your choice in style!
  - you'd still have to write html/js though :(
  - see this example: https://github.com/katleiahramos/Sinatra-Capsule-Wardrobe-App/tree/master

**elixir/phoenix**
  - compact
  - strict MVC file structure
  - includes a template system (EEs) successor to ruby's ERB template system
  - has an additional learning curve for functional programming, but it fits the problem of server request handling perfectly
  - **currently the best back-end solution**
  - "Phoenix is great, it has integration with everything you would need for back-end web development. Using Ecto for database communication makes things very easy on that front. The web pages have pre-rendered HTML but then upgrade the connection to WebSockets, so you have the advantages of both server-side rendering and client-side web apps. Scaling is built in the Erlang VM."
  - The way I look at it is Phoenix is equivalent or better to anywhere along the scale of a ruby project that is built directly on Rack -> Sinatra -> Rails. It is completely modular and you can strip it down to effectively just using plug (rack like low level) to piecemeal adding the bells and whistles (Sinatra -> Rails) to even more heavily extending it.
    - https://www.reddit.com/r/elixir/comments/d8r7ob/is_phoenix_to_elixir_as_rails_is_to_ruby/
      - very good comparison between ruby and elixir frameworks
      - Plug == Rack, ecto == ROM, Phoenix == Roda (with RoR scaling)

phoenix liveview
  - "Phoenix[ LiveView] is actually both. In short it handles things a bit differently. Each client gets a websocket connection to the server where the state lives, Phoenix adds some JS glue on the front-end so that when state on the server changes it streams a diff to the front-end that updates the state on the front-end. It's actually very very cool! Gives you a bunch of advantages."
   
   - livesvelte
      - small project
      - "These are the advantages as I see them. Please correct me if Iâ€™m wrong:
        - Have Svelte UI components that contain some decoupled state for performance purposes (for example sake tracking a userâ€™s cursor position).
        - Leverage existing UI components written in Svelte and JS.
        - Seamlessly push and pull data from said components w/o needing fetch requests or promises (all Svelte sees is a JS variable being reassigned).
        - Svelte components use hydration so thereâ€™s no coverage gaps in prerendering.
        - Arenâ€™t locked into writing Svelte exclusively. Can decide what to parts of the UI to render in LiveView, and what parts are more sensible with Svelte.
        - Probably worth tacking on that Svelte provides the best DX for JS, and runs very efficiently."
      - https://github.com/woutdp/live_svelte

**marko**
  - looks cool! worth looking into.
  - runs and maintained by eBay

**js/svelte**
  - **extremely simple** and sensible front-end framework
  - the hot contemporary js framework
  - awesome home page with interactive examples to get the gist of it
  - **makes html/js/css object-oriented so it doesn't feel like an unorganized mess** (scoped)
  - kinda comes with a template-like system built-in, in which you can inject js anywhere in the html, like php
    - <? inject code here> -> { inject.jsfunction() }
x/js/express
  - actually looks good
  - express is a copy of ruby's sinatra
  - requires node.js for server-side execution (ew)
    - i'd rather use a proper language for back-end..

for bigger apps can throw in flutter (for front and back?) or react (for the front-end)

**flutter**
  - **almost NO HTML/CSS/JS!!!**
  - compiles/transpiles to js (or web assembly??)
  - coming soon: **interop with js**
  - feels more systems programmingy (lots of ugly nesting), probably with better debugging too, and hot re-load for mobile
    - but debugging transpiled code may be a headache..
  - works really well with firebase (a database BaaS), for when you need simple database stuff
  - see excellent samples folder: https://github.com/flutter/samples
    - https://github.com/flutter/samples/tree/main/veggieseasons/lib

react actually has the most sensible output and also one file
  - what's the overhead? overkill?
  - react native has direct competition with flutter

web-assembly?
  - "Ideally you could use your given language of choice end-to-end via WASM as opposed to JS. Until one realizes how much of a PITA it is to transmit a whole GCâ€™ed runtime to clients (looking at you, Blazor WASM)."


ai is amazing for building skeletons/boiler-plate code, and just building enough so that you can jump into making, without copying/remembering various frameworks, languages, etc.



just some notes:
https://elixirforum.com/t/rails-and-phoenix-as-one-person-frameworks/44779/4
(my post!)
Overall, I agree with DHH, that we have seen a huge ramp-up in complexity in the last decade when it comes to web development. Much of it was necessary and caused by improvements in standards and practices around security, privacy, user experiences, etc.

However, some of this complexity was brought by moving the logic to the client, which naturally creates a split between client and server. The movement started with Phoenix+LiveView shows the server is equally capable of powering rich and interactive user experiences. And now, with esbuild, sass, and tailwind-standalone, we can get rid of npm and limit JavaScript to the front-end only, as it was 10 years ago.

https://www.reddit.com/r/elixir/comments/zd9o07/comparing_phoenix_to_rails_in_december_2022/
I've been a rubyist for over 10 years. Elixir for about 4. I will always love ruby for what it is. My 2 cents

Ruby has considerably more libraries and this is IMO at this point the only reason, other than being mandated or wanting to write ruby, that I would still use it over Elixir.

The edge for everything else IMO goes to Elixir.

The big highlights are

concurrency

FP scope > OO scopes

liveview and live dashboard are ðŸ”¥ðŸ¤˜

contexts > models

response times are in the micro vs milli seconds

Phoenix saw webpacker for the ðŸ’© it was and quick pivoted to a sane alternative in esbuild, Rails might have it all sorted out with Propshaft but right now it's an absolute dumpster fire if you're upgrading a older rails app, i.e. asset pipeline -> webpacker or asset pipeline or import maps -> propshaft?

benchmarking

testing & code analysis (credo, dialyzer)

immutability

ex doc is insanely easier to use vs rdoc et al

runs on significantly fewer resources

OTP

hex is better than bundler

deployment (releases)

cross platform (ruby has come a long way on windows from what it was but...)

stable API vs the OCD of ruby/rails

multi core (no GIL in ELixir)


https://elixirforum.com/t/regretting-questioning-my-current-stack-flutter-elixir-as-solo-dev-for-mobile-app/55731/36
  - lots of great info about contemporary web app making

https://www.reddit.com/r/FlutterDev/comments/nihq35/noob_question_is_flutter_alone_enough_to_make/

https://news.ycombinator.com/item?id=32530203
  - phoenix is minimal yet can scale better than RoR

https://www.reddit.com/r/ruby/comments/ecg2q2/which_ruby_web_framework_to_use_these_days/
  - Why is it you want to use a framework? If you just need a way to interact via HTTP you might want to look into rack. Want routing as well? Might as well start out with roda. Need more features and ease of use? Check out sinatra. Want to learn about a battle-tested, full featured framework? Look into rails.

roda > sinatra
  - https://www.reddit.com/r/ruby/comments/x0iyg1/sinatra_vs_roda_whats_your_take/

https://www.reddit.com/r/elixir/comments/12b4nuv/livesvelte_render_svelte_directly_into_phoenix/
  - livesvelte

hanami or rails

