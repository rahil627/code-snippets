
https://github.com/igor-petruk/scriptisto
  - TODO: write scripts in compiled languages!
  

# conclusion:
i love ruby, and will absolutely keep it for my own personal scripts, likely for my entire lifetime..! **it's perfect for scripts without dependencies**, only using the std lib. Once it requires dependencies, or needs parallelism (never), i'd have to jump to a native-compiled language... until maxime/yjit is able to make a native compiler that is..!

with dragonruby (mruby) as my main game engine, and phoenix/elixir as my main web-app-framework and general app-framework, i can live in the world of ruby forever!! yaeaaahhhhhh!!!


# post-dragonruby update
yep. ruby is the one. i finally found it.


# post-windows update
see [cli-and-tui-frameworks] for similar thoughts on scripting vs natively-compiled

welp, glad i ended up never ended up using scripting langauges!

though i quite love ruby's design (blocks, mix-ins, syntax, etc.), it's just not worth installing it to run it for most people. The advent of go's easy build system has shown the importance of compiling to machine code to build binaries that work everywhere. Now, windows has all of linux's superior programs re-written in rust, go, 'n zig; So much so, that there's no need for linux anymore. And building for Windows is crucial--as i use it myself!! So, it's best to stick to compiled languages where things are guaranteed to work, build everywhere, and provides a good debugging experience...

the biggest difference will be the libraries and the succintness (what makes it beautiful are it's main cons: dynamic typing syntax and libraries that use meta-programming). Go has a minimal yet powerful standard library whereas ruby's libraries are often over-engineered, and have a lot of character: often elegance, a bit of quirkiness, and a good amount of magic. In go, you just write/program straight-forwardly, like the languages itself. Also in go, there's a bunch of error handling code (by design) that takes up space and hinders readability. Both python and ruby (and even typescript) scripts will result in more succint, easier to read programs, but maybe not by a large enough margin to outweigh the ability to create portable executables for every platform, and provide easy concurrency and parallelism. Haxe's standard library is closer to go, minimal-yet-powerful (thanks to it's maker's style), yet it's open-source-community libraries are often closer to ruby, full of meta-programming magic. Kinda the best of both worlds... unfortunately, haxe being much older than go, wasn't built with concurrency in mind, and didn't even get threads into it's std lib until v4.

if i could, i'd choose elixir for most things: It's just as magical and rad as ruby, but contemporary. But it's use cases are narrow: basically, web servers, and furthermore, it is among the worst choices for making cli programs. :( Anyways, there's always haxe 'n go.



# post-windows powershell update
powershell is what i was looking for. You get the .net framework--if you need it--, and a very neat and organized shell-scripting language. It's refreshing, clear, easy-to-understand, and infinitely more organized compared to linux shell scripts, which feels like a bunch of glue of open-source crap. Finally, a solid general-purpose lang made for shells! Yeah, it's verbose, it's got all that .net ilk, but it just feels lightyears better than the old linux stuff. Instead of glueing small linux apps together (sed/awk, head, tail, cat, etc.), you just have a very simple standard library (get-content -first/-last 10 vs head/tail) with a great standard help feature. If ever there was a place that needed standards, it was shell-scripting!







NOTE: everything below this is a mess...







# conclusion
so basically,

**for C/C++ embedding, it might be best to just use/learn C/C++, as running a VM/byte-code interpreter has a cost that's not worth it for embedded/performace applications such as games**

All of them have standard libraries, though, Lua with it's goal of minimal size, is the smallest, though in a charming in it's own way (see the very simple one-web-page manual). **Python's and Ruby's standard librares solid after decades of use, but def feels less standard compared to compiled languages, making breaking changes, which results in requiring the correct version just to run it..!**

Lua's like a primitive language that can build features that other languages have, but, it's not built-in, it's all dynamic-feeling, so overall it feels janky, imo. **For general scripting use, not embedding, I much prefer Ruby or Python over Lua, and Ruby over Python**. **Lua is made for embedding,** and it's great at that, whereas **Ruby and Python are made for scripting.**

So, in the end, it'll just be a preference between one's favorite general-purpose scripting langauge: ruby, python, powershell, or: just whatever general-purpose langauge one is most familar with at the time, as nowadays many compiled languages also have an interpreter, as the interpreter is *much* simpler to create than a compiler.



# compare
https://hyperpolyglot.org



# shell scripting vs general scripting languages

also see my notes in cli-shells.txt

also, you might just be able to use programming languages within a shell!
  - https://github.com/tombenner/ru
  - in might also be included in pry: https://github.com/pry/pry
    - "We can also interpolate Ruby code into the shell. In the example below we use the shell command cat on a random file from the current directory and count the number of lines in that file with wc:"
      - pry main:/home/john $ .cat #{Dir['*.*'].sample} | wc -l
        44

basically, my conclusion was that the shell scripting languages are limited, simple, domain-specific (DSL), and in the end, i think i imagine i will end up reaching out for a more general-purpose scripting language (ruby, python, lua?, etc.) for both the more extensive standard library and the pop libraries in the package manager.

in addition, the bash-like shells (all except fish) have a bit of cryptic syntax, especially using the $. It's not bad however, considering how tiny the language is, but using $ for vars is hella old. Also there's a problem with escaping quotes ("$var" vs $var vs one more way...). Crap like that just sucks.

Overall, the shell scripting langauges (bash/zsh, fish, etc.) are great tools for simple scripting: stringing together commands (via the pipe operator: |), managing processes (running commands externally, in a sub-shell, or switching processes), taking in arguments from the command line ($1, $2, $argsv), and so on. But once you want to do a bit more, you'd have to know Linux CLI programs/tools really well to do what you want, whereas, with a more general scripting langauge, you can just do what you want with the normal ways of programming: with a typed system (in shell scripting langs, vars are strings), with a solid std lib, with helpful external libs.

Ah, that leads to another problem: because all vars are strings, they are a pain to do conditional control flow upon. In fish, for example, you'd have to use a program(?) called test with various flags. So instead of a boolean it'd be:
`if test -z condition` or `if set -q condition`
...or something like that. Definitely not ideal. And probably worse in bash.



# a little random research

https://en.m.wikipedia.org/wiki/Scripting_language
  - TODO: still need to read through this...

from the wiki:
Bash, an interpreted scripting language for use on Unix and Unix-like operating systems and environments.
PowerShell, a scripting language originally for use on Microsoft Windows but nowadays also installable on macOS and Linux.
sed and AWK, two text processing languages used mainly in Unix-like environments.
Perl,[2] a text processing language that later developed into a general-purpose language, also used as an extension language for various applications.
Python, a general-purpose scripting language, also used as an extension language.
Tcl,[3] a scripting language for Unix-like environments, popular in the 1990s for creating GUI applications.
JavaScript (later: ECMAScript), originally a very small, highly domain-specific language, limited to running within a web browser to dynamically modify the web page being shown, that later developed into a widely portable general-purpose programming language.
x/Visual Basic for Applications, an extension language specifically for Microsoft Office applications.
Lua, a language designed for use as an extension language for applications in general, and used as such by many different applications.
Lisp, a family of general-purpose languages and extension languages for specific applications, e.g. Emacs Lisp, for the Emacs editor.



Lisp, Tcl, Rexx are mysteries to me.
  - tcl seeems incredible, surely a predecessor to ruby from 1988! :o
    - "every type can be treated as a string" :o
    - add object-oriented features in 2012
  - Rexx has a simple beauty to it, like Python from 1996
It makes sense that Perl started out as a text processing language..
  - the Lisp family includes: Racket, Common Lisp, Scheme, and Clojure
    - 2nd oldest language
    - Lisp pioneered many ideas in computer science, including tree data structures, automatic storage management, dynamic typing, conditionals, higher-order functions, recursion, the self-hosting compiler,[8] and the read–eval–print loop.[9]
    - The name LISP derives from "LISt Processor".[10] Linked lists are one of Lisp's major data structures, and Lisp source code is made of lists. Thus, Lisp programs can manipulate source code as a data structure, giving rise to the macro systems that allow programmers to create new syntax or new domain-specific languages embedded in Lisp.
      - and so, everything instruction is within parenthesis :o


TODO: finish the wiki article




https://en.m.wikipedia.org/wiki/Domain-specific_language
  - a language created for a specific use: a specific domain: a DSL
    - html, xml & json, yaml & toml, postscript, latex?, gml (game maker language) & UnityScript & GDScript, and so on
  - i think in some cases it's good, such as html, but in many cases, a programmer with a general language is better. It's *much* better to invest time in learning a general language than a bunch of specific ones. Failed examples include all of the game scripting languages. They all failed to make scripting easier, as, in the end, programming is programming.



https://stackoverflow.com/questions/5327340/ruby-vs-lua-as-scripting-language-for-c
  - "I'm not sure if I should use Ruby or Lua. Lua is easier to embed, but Ruby has a larger library, and better syntax (in my opinion). The problem is, there is no easy way I found to use Ruby as scripting language with C++, whereas it's very easy with Lua."
  - "If you think Lua is too simplistic, and Ruby too hard to embed, maybe you should consider Python?"
  - "I've looked at embedding Ruby into C/C++ before, and it seemed extremely difficult. There are a lot of challenges you'll face:
      Calling into Ruby from C/C++ requires 2 layers of functions to be written (one layer to call, and one to catch exceptions)
      Calling back into C/C++ from Ruby requires the normal SWIG-type work
      Moving data back and forth requires keeping careful track of allocations, since Ruby will want to garbage collect anything it can
      I'm sure that this can be done, but it seemed extremely difficult to me, only doable if you can jump into Ruby in a minimum of entry points."
  - "Luabind is really easy to use, there is no need for an external generator like SWIG, the doc is great. Compile times remain decent.
      Biggest problem I've seen : lua is mostly ... write-only. You don't really have classes, but only associative arrays with a bit of syntaxic sugar ( object['key'] can be written object.key ), so you easily end up adding a 'member' in an obscure function, completely forget about it, and have side effects later.
      For this reason, and this reason only, I'd prefer Python. "
    "Not directly related : None of these can be reliably used in a multithreaded environment (so this depends on the complexity of your server).
       N Python threads : the GIL ( Global Interpreter Lock ) is on your way. Each and every time you use a variable in a thread, it's locked, so it kinda ruins the point, except for long I/O operations and calls to C functions.
       lua has coroutines, but they aren't parallelisable.
       Ruby threads aren't really threads, but similar to Lua's coroutines
       Note that you can still create one environement for each thread, but they won't be able to communicate (except with a C++ machinery). This is especially easy in Lua."
   - "The newest versions of Ruby (1.9+) use real system level threads. It does still have a GIL though, which puts it on equal footing with Python."
   - "You may be interested in learning about Squirrel. I believe it was the scripting language used by Left 4 Dead 2. It is more advanced than lua (uses objects and classes) and is meant to easily be embedded in a C++ app, which sounds like exactly what you are looking for."
   - "One thing Lua has going for it is its ability to shuttle data between C++ (or C) and itself very easily. Essentially you're just pushing/popping data onto a stack in order to communicate between the two. Having multiple Lua environments up and running at the same time is quite simple as well (should you need that functionality). Although Lua is a garbage collected language, it's easy to prevent it from doing so on data that needs to stick around in your C++ code. Creating an extensible plugin system should be easy with Lua once you lay the groundwork. Swapping plugins (in this case, scripts) in and out at runtime is also pretty trivial (although this may be true for Ruby as well, I'm not familiar enough with it to know)."
     "One thing to think about is how much object-oriented stuff you want your scripts to be able to handle. Lua uses functions, tables, metatables, and prototypes to implement OO-like programming. Some people like it, some don't; personally I found it interesting to use, if a bit clunky at times. Not having used Ruby, I can't speak for it, but you may want to weigh your need for object/class support."
     "I think in your situation you should also consider how fast you want to get your project up and running. As you and others have noted, Ruby is hard to embed in C++, whereas Lua is not. Time is always precious and if you want to get something working ASAP, Lua is probably your best bet."




https://www.lua.org/manual/5.4/manual.html
  - the simple manual of Lua
  - the io, os, math classes are all super simple and nice
  - there's one page at the end that covers the syntax, which shows the power of simplicity, as you're not burdened with remember sytax crap
  - from the intro:
"Lua is a powerful, efficient, lightweight, embeddable scripting language. It supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description.

Lua combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is dynamically typed, runs by interpreting bytecode with a register-based virtual machine, and has automatic memory management with a generational garbage collection, making it ideal for configuration, scripting, and rapid prototyping.

Lua is implemented as a library, written in clean C, the common subset of Standard C and C++. The Lua distribution includes a host program called lua, which uses the Lua library to offer a complete, standalone Lua interpreter, for interactive or batch use. Lua is intended to be used both as a powerful, lightweight, embeddable scripting language for any program that needs one, and as a powerful but lightweight and efficient stand-alone language.

As an extension language, Lua has no notion of a "main" program: it works embedded in a host client, called the embedding program or simply the host. (Frequently, this host is the stand-alone lua program.) The host program can invoke functions to execute a piece of Lua code, can write and read Lua variables, and can register C functions to be called by Lua code. Through the use of C functions, Lua can be augmented to cope with a wide range of different domains, thus creating customized programming languages sharing a syntactical framework."








