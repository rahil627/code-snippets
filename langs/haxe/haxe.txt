TODO: maybe can move to programming concepts, but they are implemented differently for each langauge..
# macros 101

https://haxe.org/videos/tutorials/nicolas-about-haxe/macros-101.html
  - nicolas goes over macros  

runs at compile-time (whereas programs run at run-time)
must return a program, not a value
can mix between compile-time and run-time
great for optimizations


macro static function getMacro(s:String) {
  //return macro $v( Date.now().toString() ); // $v for value??
  //return macro { trace("hello from macro") }
  return macro { trace( $v(s) ) }
}

macro static function passRuntimeValue(e:haxe.macro.Expr) {
  return macro { trace $e } // $ + id syntax?
}

static function main() {
  //trace( getMacro() );
  getMacro(); // the program gets replaced here
  getMacro("hello macro, input from program, output from macro");
  var s = "hello from run-time var" // only known at run-time
  getMacro(s) // won't work
  
}

// build macros

import haxe.macro.Context; // api for macros programming

@:build( MyMacros.build(args) ) // @: is compiler meta-data, must be on a class?
class Main {
  var x = 1
  var y = 2

  @foo @bar(args) static function main() { // hmmm, not sure about these... maybe a way to tag fields?
    trace(a + b) // normally wouldn't be able to access because it's a static function
  }
}

class MyMacros {
  public static function build() {
    trace("hello from build macro")
    
    var fields = Context.getBuildFields(); // able to see at compile-time
    for (f in fields) trace(f.name, f.kind); // f.kind shows the type at compile time x/y/FVar and even main/FFun
    //return []; deletes the main function!?
    
    for (f in fields)
      f.access.push(AStatic); // turn all fields into static!
    return fields;
  }
}


// next example is pretty complex..
// http request a website (input as parameter to build macro)
// iterate over matches, store id in an array
// make an array of types, with the name (identifier) as id and kind as string
// make a Field and set kind to the array of types above
// push the Field into Context.getBuildFields()
// then, back in the main function, once you type in the field name, you get auto-complete of all the ids scraped from the google page, typed as string
  // magic!!

// using some template system, you can then fetch each node of template, get strict typing

// basically, can do anything at compile time: read files, write files, input info, output info, all at compile time
  // everything you can do with a systems language, you can do with macros

// meta-programming = manipulating a program at compile-time

// hxd.Res.file
  // heaps uses macros to get auto-complete on files in the res (resources) folder
  // FileTree macro
    // set Context (js, flash, etc.) // not sure...
    // based on the extension name, set the type kind
    
    
// dump source with D flag?
  // see all of the compile-time source code: the program after macros are run







# install:

## windows
scoop install haxe # or winget
  output:
  Linking ~\scoop\apps\haxe\current => ~\scoop\apps\haxe\4.3.5
  Creating shim for 'haxe'.
  Creating shim for 'haxelib'.
  Adding ~\scoop\apps\haxe\current to your path.

## linux
https://haxe.org/download/linux/
install haxe:
sudo add-apt-repository ppa:haxe/releases -y
sudo apt-get update
sudo apt-get install haxe -y
mkdir ~/haxelib && haxelib setup ~/haxelib
--


# old:
research:
Haxe is fucking amazing. Be sure to read the [fucking] manual to really see all of the things you can do with it!

from features page:
features to remember: (ordered by usefulness)
properties
  - this avoids writing a separate function for whenever a value is changed
local functions
  - this avoids a jump when reading code
anonymous data struct(ure)s
  - var point = {x:1, y:2}
  - this also avoids a jump when reading code
algebraic data types (general and normal)
  - enums, but with steriods
  - (enums are probably favorite data type, along with bit fields, so this is nice to see)
pattern matching
  - this seems really really useful, but I don’t quite understand the workings of it...
abstract classes
  - figured out during run-time compilation?
  - it provides an abstraction to those basic libraries, which is really useful for common non-standard (not included with the language) basic libraries such as math structures (vectors, matrices) which can have different implementations dependent on the target or even just dependent on the person who wrote it
compilation conditionals
  - useful for multiple targets: #if cplusplus ...
  - also useful for debugging
  - also a better alternative than commenting / un-commenting giant blocks of code
array comprehension :O... holy shit
  - var evenNumbers = [ for (i in 0...100) if (i%2==0) i ];
inline calling
  - prevents a function call, replacing the call with the actual code
metadata
  - to be used by compiler, run-time classes, ...
  - allows you to associate useful data (data that’s useful to you) to expressions
  - useful for when the program compiles and runs fine, but values are off, out of the   expected range

advanced, rarer things:
partial function application
  - this is nutty
type parameters, variants, constraints
  - no clue...


—
Haxe and iOS workflow:
  - code in FlashDevelop on windows
  - test in Flash using mouse
  - build for iOS in windows
  - change to Mac and run "nme update ios"
  - setup debug log for iOS testing
  - have a project file for Mac ready, or at least a simple HaXe text editor
  - test input and frame rate

debugging:
  - http://haxeflixel.com/forum/help/using-visual-c-debugging-cpp-target-breakpoints
  - http://www.joshuagranick.com/blog/?p=1122

use:
  - syntax
    - http://haxe.org/ref/syntax
    - https://books.openfl.org/as3-conversion-guide/comparing-haxe-and-actionscript/
  - Type, HaXe reflection API, including getClass
  - Lambda
    - http://haxe.org/doc/cross/lambda
  - Std
    - primitive data parsing
  - Iterators
    - if the class has an iterator property, then you can use a for loop (like for each) to access it, or just square brackets (I think)
  - cheat sheet from AS3
    - http://www.nme.io/developer/guides/actionscript-developers/



  mac:
    - http://www.matthijskamstra.nl/blog/index.php/2012/04/19/installing-haxe-and-nme-on-osx/

set up HaxePunk
  - http://haxepunk.com/learn/tutorial/getting-started and https://github.com/HaxePunk/HaxePunk readme
  - haxelib install HaxePunk
  - haxelib run HaxePunk new [folder]
    - current directory invalid when executing the command haxelib
      - run command prompt as administrator
  - cd new [folder]'s directory
  - nme test build.nmml flash or just run it in FlashDevelop

  - http://kpulv.com/107/FlashDevelop_with_HaXe_NME_and_HaXePunk/
    - installs using local copy of HaxePunk

  - mac:
  - nme test sample.nmml ios -simulator
  - nme test sample.nmml ios (don't use this?)
  - nme update sample.nmml ios
    - have to run the project file in Xcode yourself

editors:
  - pc:
    - FlashDevelop
      - add debugging to FlashDevelop
        - http://www.nme.io/community/forums/installing-nme/breakpoints-not-working-in-flashdevelop/
  - mac:
    - textmate
      - http://haxe.org/com/ide/textmate/sugar_hx_textmate
      - https://github.com/kevinweil/protobuf.tmbundle/issues/1
    - sublime text
      - http://haxeflixel.com/articles/sublime-text-ide-and-haxe


Haxelib:
  - add libraries:
    - project properties, add classpath
    - project properties, add compiler options

  - locations:
    - windows, Program\ Files\ \(x86\)/Motion-Twin/haxe/lib
    - mac, /usr/lib/haxe/lib

resources:
  - http://haxe.org/doc/start/cpp




notes:

engines:
HaxePunk
HaxeFlixel

tools:
HaxeLib

libraries:
http://haxe.org/doc/libraries
deepnight's library

resources:
http://blog.skialbainn.com/
  - really useful and recent listing of Haxe practical usage
