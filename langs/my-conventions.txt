


# tags
BIGLETTERS:
  - a simple solution is to just add TODO: in front of the other tag: TODO: IMPORTANT:
    - composable! like tags
  - currently:
    - TODO, #1 most used
    - NOTE, #2
    - IMPORTANT, #3?
    - ERROR, a major problem, doesn't necessarily have to break compilation
    - WARN/WARNING, rarely use
    
    - DEPRECATED, for public code use only
    - OPTIMIZE, never use, usually TODO: upon a choice of data structure
  - TODO: vs ?tag ?
  - https://news.ycombinator.com/item?id=31235289
    - interesting categories..: DREAM, HACK (a part of my WARNING), FIXME (my ERROR?)
    - there's quite a few extensions for this..:
      - https://marketplace.visualstudio.com/items?itemName=ExodiusStudios.comment-anchors
    - https://tomfreudenberg.medium.com/vscode-extensions-better-comments-todo-tree-d5a9c46eaea5
      - simple little article that covers two more extensions:
        - https://github.com/Gruntfuggly/todo-tree
        - https://github.com/aaron-bond/better-comments
      - config: https://gist.github.com/TomFreudenberg/039d9c605ac37ec54340566e6c58666d#file-vscode-config-todo-tree-snippet-json

use easily findable tags within comments
  - TODO: just requires a simple case-sensitive search
  - todo: is more pleasing to the eyes, but doesn't stand out
  - !TODO:/!todo is easier to search, and can use either case
    - choose a symbol: !@#$%^&*
      - !@$%^ are all usually good choices
        - **!todo**
          - i like this the most
          - slimmer than others, may make it harder to see
          - becauase one uses '!' at the end of sentences, won't likely run into an occurance of it in front of something..
          - negation operator, and often without a space between the var and symbol
          - **gives the impression that it's urgent, better for todo/warning/error**
        - @todo
          - actually makes logical sense, @tag
          - often used by document generators, macros, etc.
        - $todo
          - maybe the safest but invokes php 'n bash horrors
        - %todo
        - ^todo
        
        - **?todo**
          - i dig this!
          - never used!
          - great key-board placement
          - doesn't give the impression of anything, making it actually feel like a tag symbol, along with '@'
          - ternary operator

        - -todo
        - **+todo**
          - plus acutally works logically too, and looks great too.. as long as you have a space between '+' and var in the code

        - |todo
        
        - conclusion: ?todo, particularly for it's great placement on a standard keyboard
      - depends on the language


# git commit

tiny (edits)
nada/nothing (purely formatting, no meaningful changes, tiny cleaning up)
cleaning/refactor
fmt (short for formatting in a few prog-langs)

multiple things
  - fix something,/; note something else

same syntax as tags!
  - todo:, note:, fix..., refactor..., merge..., etc.

symbols
  - + = add
  - - = remove
  - could think about using other symbols..





naming conventions:
avoid using the shift modifier key, otherwise must invert the -/_ key
- hyphens > underscores

- thingGroups > groupOfThings
  - thingGroup, thingSuperGroup is easier to auto-complete than groupOfThings, superGroupOfThings. Though the second way feels right to say English, the first way is better.

structure of a class / data bundle:
  - variables on top... make it possible to read from top to bottom being able to understand everything that’s going on without scrolling down. Let the auto-generated IDE stuff tell you the public API.

single header-file ideal:
  - try to put everything in one file, so that there are no dependencies beyond that one file. This makes it highly portable / distributable.



my naming conventions
My_Class
private-var vs -private-var
public-var
static-var
(no globals)



use this/self when possible, particularly in constructors




http://nickgravgaard.com/elastictabstops/ - solution to tabs vs spaces for indents
http://stackoverflow.com/questions/268538/tab-versus-space-indentation-in-c-sharp
  - "non-leading tabs are evil...initial line indentation must be tabs, no other tabs are allowed"

braces on new line
  - http://programmers.stackexchange.com/questions/2715/should-curly-braces-appear-on-their-own-line

http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html
4 space indents
no tabs
one blank line between funtions
two blank lines between classes?

http://www.codinghorror.com/blog/2004/06/hungarian-wars.html
Most functions should be short enough that you won't have a zillion variables. If you have that many variables to tell apart, you have bigger fish to fry.
I want to be able to tell "simple" intrinsic types from full blown objects at a glance*. This distinction is important to me. Yeah, they're all still objects, but there are the common simple variables types we use 99% of the time (eg, String and Integer), and then there's everything else.
I want to be able to tell class level variables from local variables at a glance*. How far up do I need to scroll?
The variable names should be descriptive, readable and succinct.
I do not believe every single object needs a unique prefix. This is insane, and as the VB6 document illustrates, this way leads madness..
* At a glance means without having to mouse or cursor over the variable name, eg, it should work even in the high tech Notepad IDE.
I agree, I've switched to extremely short name / short scope local variables, too.


"If you need more than 3 levels of indentation, you're screwed anyway, and should fix your program" - Linus Torvalds
  - an interesting maxim to abide, but, maybe ‘causes too much refactoring!


