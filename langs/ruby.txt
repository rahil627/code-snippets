# install
ruby 2.6 is installed by Debian's package manager, so you must use a version manager to install multiple versions of ruby and for it to select the correct one
chruby > rbenv > rvm
  - rvm is a pain
use chruby if you don't need multiple versions, it's the simplest!

https://github.com/postmodern/chruby
  - check the readme to install
  - auto-loads for bash and zsh
  
https://github.com/JeanMertz/chruby-fish
  - if using fish, use this wrapper instead
  
https://github.com/postmodern/ruby-install
  - check readme to install, a little hidden:
  - https://github.com/postmodern/ruby-install/tree/master#install
ruby-install --update
# install latest version of ruby
ruby-install ruby
# list versions to install more
#ruby-install
# set default version for auto-switcher
#echo "ruby-3.2.2" > ~/.ruby-version


# not sure if necessary...
gem update --system --no-document
  - nevermind!, may have broke my gems up
gem update

# ruby lsp for vs code
gem install solargraph
gem install yard # documentation gem, super-set of original ruby docs

# create a Gemfile in the working directory with the following lines:
source "https://rubygems.org"
gem "solargraph"

# TODO: perhaps because i'm using fish shell, there's an error
# start the program from the fish terminal to force vs code to use current terminal
code
# fix this!


# for all sorts of cool hackery
gem install pry
# can use binding.pry in code to break it and inspect everything up to that point
# pry replaces irb (comes bundled with ruby)? or use both?
# `cat filename`.capitalize
# or
# `cat filename`.pry # "goes into" the returned string, then can execute string methods
# capitalize!
# provides a very interactive way to use ruby, learning it's common methods along the way
# can completely replace shell for most stuff

# debug
try the user castwide's (maintainer of solargraph) debug extension

https://marketplace.visualstudio.com/items?itemName=KoichiSasada.vscode-rdbg
  - can try? vs pry?




# for fedora
# just use chruby!?
# https://developer.fedoraproject.org/tech/languages/ruby/gems-installation.html
sudo dnf install ruby ruby-devel rubygem-irb rubygem-pry
# need fo make sure you have a C compiler to build ruby native extensions
sudo dnf group install "C Development Tools and Libraries"



# just do it & ref

https://github.com/planetjekyll/awesome-jekyll-plugins
https://github.com/benbalter/
  - wrote most of the plugins thate are included by default for Jekyll
  - ***extremely* clean design**, beautiful really... i love it!!! :D
    - but i'm not really sure if that's better than just writing it all in a single main function..., if it were actually used as a class, it'd make sense... but i guess this is the ruby "everything is an object" way..?
  - for example: https://github.com/benbalter/jekyll-titles-from-headings/blob/main/lib/jekyll-titles-from-headings/generator.rb
  
then, after reading some plugins, you'll be able to read Jekyll itself! :o
https://github.com/jekyll/jekyll/tree/master/lib


## ref
https://github.com/ruby/ruby
  - open-source :)
  - https://github.com/ruby/ruby/tree/master/lib

https://hyperpolyglot.org/scripting
  - great to see where it differs and excels over python

https://github.com/markets/awesome-ruby
  - **github** (?? no way!!), gitlab, discourse, mastodon, jekyll, tons of web frameworks 'n templating languages... whoa... i didn't even know...
  
https://github.com/trending?l=ruby

https://www.ruby-lang.org/
  - official site

https://docs.ruby-lang.org/en/master/
  - official docs, also on github?
  
https://www.rubydoc.info
  - like a package manager, but for docs. includes the readme of each package

http://ruby-doc.com/docs/ProgrammingRuby/
  - a complete book, wordy, tons of examples, very comprehensive, looks great!
  - the page on "Object-Oriented Design Libraries" is great, as i've never heard about them
  - "built-in classes and methods"
  - "standard library"
  - "threads and processes"

https://en.m.wikibooks.org/wiki/Ruby_Programming
  - feels like an alt unofficial site




# tools
https://www.ruby-lang.org/en/documentation/
  - contains a list of IDEs, text editors, 'n plugins
  - for vim, vim-ruby and RSense are mentioned
    - RSense is also used for emacs
  - from a reddit post dated ~2020, RubyMine (JetBrains) vs VS Code, it seemed VS Code was taking over, along with simpler editors like atom, vim, etc., but it sounded like many people have problems, probably because of use of Ruby's complex features not working well with the language server...



usefule libs:
https://docs.ruby-lang.org/en/master/English.html
  - basically, you can alias anything in ruby, so, you can pretty much make your own language! :D
https://github.com/pry/pry
  - next-level shell hackery



# why?
i prefer the syntax, expressiveness, clean 'n tidyness, and fun of ruby over python :)

its also a funny way to write very clean simple scripts in a more functional style

anyway, anything is better than bash!


# learn

basically, i just want to use Ruby for shell scripting, because bash is hella ugly, and i don't think zsh really fixes that due to compatibility with bash (posix). Fish is an interesting alternative, but, anyway, i think Ruby can be a cool general-use "scripting" langauge--basically glue for all sorts of every-day problems :)


# 1. learn x in y minutes
todo: get link


# 2. jump in

see the source code of Jekyll plugins
then see the source code of Jekyll


# useful links

https://www.ruby-lang.org/en/documentation/
  - main site, includes links to many now ancient classic tutorials, but it's better to just read Jekyll code, or something similar to what you want to do
  - **good from other langauge page**
  - **good ruby in 20 min page**
  - **how to use gems**: https://www.ruby-lang.org/en/libraries/
  - external links
    - tuts:
    - https://poignant.guide
      - comic-style, super adhd, but def special
    - https://pine.fm/LearnToProgram/
      - for complete noobs, just goes over the language, but good site style
    - http://rubykoans.com
      - good interactive exercise, but the content is boring, as it doesn't use any "standard libs" or external libs, or any *real use*
    - https://try.ruby-lang.org
      - contains many examples to quickly go through
      
      
https://en.m.wikibooks.org/wiki/Ruby_Programming
  - in addition to being a wikibook, it contains a lot of useful links




https://ruby-doc.org/core-2.5.0/Kernel.html#method-i-exec
https://ruby-doc.org/core-2.5.0/Kernel.html#method-i-system
https://ruby-doc.org/core-2.5.0/Kernel.html#method-i-spawn
https://ruby-doc.org/core-3.1.1/IO.html
  
kernal
- kernal contains most keywords, and base object methods?
  - exec, replaces current process to execute something
  - eval, interpreter
  - system, runs in a "subshell" (another process?)
    - i think this is the one you'd often use for batch files
  - spawn, "similar to system but it doesn't wait for the command to finish"
    - "The parent process should use Process.wait to collect the termination status of its child or use Process.detach to register disinterest in their status; otherwise, the operating system may accumulate zombie processes."
    - "has bunch of options to specify process attributes:"


# tutorials:

make sure you have a good set-up: vs code with ruby extensions, nvim with vim-ruby, or whatever, ad this it should be pretty easy to just get completion for everything for a "everything is an object" language

these three chapters look useful: otherwise, it's just the same ol' programming stuff... it's definitely much better to just jump into source code..

https://learnbyexample.gitbooks.io/ruby-scripting/content/chapters/Executing_external_commands.html
https://learnbyexample.gitbooks.io/ruby-scripting/content/chapters/File_processing.html
https://learnbyexample.gitbooks.io/ruby-scripting/content/chapters/Regular_expressions.html
  - https://github.com/learnbyexample/Ruby_Scripting
  
https://www.techotopia.com/index.php/Working_with_Files_in_Ruby
  
  

# commands
#!/usr/bin/env ruby
system('clear')
system('echo Hello $USER')



#!/usr/bin/env ruby

cmd1 = 'ls out.txt' # true if the file exists
cmd2 = 'grep "foo" out.txt' # false if none found
cmd3 = 'xyz' # nil because command not found

for cmd in [cmd1, cmd2, cmd3]
  puts "Command: #{cmd}"
  rv = system(cmd)

  # inspect method will display human readable representation of object
  puts "system return value: #{rv.inspect}"
  puts "Command exit status: #{$?.exitstatus}" # special var $? detils include PID/exit status/etc
  puts '-' * 30
end


# save stdout to a var
>> working_dir = `pwd`
=> "/home/learnbyexample/ruby_programs\n"
>> working_dir.chomp
=> "/home/learnbyexample/ruby_programs"

# use %x to use different delimeters, in case of character problems
>> nums = %x/seq 3/
=> "1\n2\n3\n"
>> puts nums # stdout
1
2
3
=> nil

>> foo = %x(echo `seq 2`).chomp
=> "1 2"

# only stdout is saved
>> files = %x{ls *.txt *.log}
ls: cannot access '*.log': No such file or directory
=> "out.txt\n"




irb command for repl



$ type env ruby
env is /usr/bin/env
ruby is /usr/local/bin/ruby

$ cat hello_world.rb
#!/usr/bin/env ruby

puts 'Hello World'

$ chmod +x hello_world.rb
$ ./hello_world.rb
Hello World

  
  
