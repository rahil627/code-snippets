
# paradigms

"Programming paradigms are a way to classify programming languages based on their features. Languages can be classified into multiple paradigms.

Some paradigms are concerned mainly with implications for the execution model of the language, such as allowing side effects, or whether the sequence of operations is defined by the execution model. Other paradigms are concerned mainly with the way that code is organized, such as grouping a code into units along with the state that is modified by the code. Yet others are concerned mainly with the style of syntax and grammar."

imperative
  - instructs the machine how to change its state
procedural
  - groups instructions into procedures
  - C
object-oriented
  - groups instructions with the part of the state they operate on
  - C++, smalltalk
declarative
  - declares properties of the desired result (what the program should do), but not how to compute it
  - SQL
  - functional
    - the desired result is declared as the value of a series of function applications
    - use functions, blocks of code intended to behave like mathematical functions. Functional languages discourage changes in the value of variables through assignment, making a great deal of use of recursion instead.
  - logic
    - the desired result is declared as the answer to a question about a system of facts and rules
  - mathematical
    - the desired result is declared as the solution of an optimization problem
  - reactive
    - the desired result is declared with data streams and the propagation of change
symbolic
  - describes programs able to manipulate formulas and program components as data. Programs can thus effectively modify themselves, and appear to "learn", making them suited for applications such as artificial intelligence, expert systems, natural-language processing and computer games. Languages that support this paradigm include Lisp and Prolog.

procedural, structured, modular, object-oriented
  - these seem to describe more of how code is organized rather than executed...
procedural
  - fit code into procedures (aka functions, co-routines)
structured
  - some vague notion of structuring the code, as opposed to no structure? lol
  - modular
    - try to fit code into modules, for portability
  - object-oriented
    - try to fit code into objects, both data and functions that affect the state


sources:
wiki
https://en.m.wikipedia.org/wiki/Comparison_of_multi-paradigm_programming_languages
  - interesting huge feature matrix



# programming language elements

see the docs for haxe
  - this covers the basic and many advanced features of most programming languages
  - i will categorize my notes similar to the docs: types, type systems, expressions, features, compiler, etc.
  - https://haxe.org/manual/introduction.html

also the language features page
  - this page quickly lists a sub-set of advanced features of haxe
  - https://haxe.org/manual/lf.html

see the docs for other languages
  - i personally like how succint and simple haxe's docs are, it helps with memorization, but it's worth seeing other docs. For example, the docs to Rust is like a book!
  - language-specific features are noted in seperate notes for each programming language (ruby.txt for ruby, etc.)


## types

### basic types
bool - 1 bit?
int - 8, 16, 32, 64 bits
float - 8, 16, 32, 64 bits

### advanced types
class (instance)
enum (instance)
anonymous structure
function type
dynamic
abstract
monomorph


## expressions
tell what a program should do

https://www.rubyguides.com/2016/02/ruby-procs-and-lambdas/
blocks
  - anonymous functions that can be passed into methods
  - can be used later
yield (ruby)
  - calls a block
    - in ruby, this is actually what is used underneath when a method is called
lambda
  - a way to define a block with special syntax
  - works similar to methods, provides exceptions on wrong arguments
  - internally just a special proc object
proc (ruby)
  - return tries to jump out of the embracing method
  - break tries to exit from the method which the block was given for
  - Any object that implements the to_proc method can be converted into a proc by the & operator, and therefore can be consumed by iterators.
closure
  - proc ('n lambda) are closures:
  - captures the current execution scope (local refs to vars 'n methods) with it
binding class (ruby)
  - used internally by proc/lambda/closure to anchor vars 'n methods to be used out of scope





## features


### macros


### compiler metadata
i think the metadata is sent to the compiler to to either conditionally do different stuff or run a macro...

haxe's list of compiler metadata, for example, is exhausting, mostly due to it's multi-target nature
  - https://haxe.org/manual/cr-metadata.html


## compilers
"The Haxe Compiler is typically invoked from command line with several arguments which have to answer two questions:
What should be compiled?
What should the output be?"

generally the answers are a Main class for input, and
a target platform: this could be source code, bytecode, machine code

### compiler flags
haxe's options for compiling, for example, are exhausting, mostly due to it's multi-target nature
  - https://haxe.org/manual/compiler-usage-flags.html

### a build file
usually a standard build file is provided to store the compiler options, for convenience




## standard library:
although not part of the actual programming language, it's bundled along with most general programming languages, though it can be excluded, for example: embedded scripting languages such as Lua and Wren

### standard library structure
std lib strucutre from haxe's docs, expanded a few categories:
Standard Library
String
Data Structures
  - Array
  - Vector
  - List
  - GenericStack
  - Map
  - Option(?)
Regular Expressions
Math
Lambda
Template
Reflection
Serialization
Xml
Json
Input/Output
Sys
  - Threading
  - Standard IO Streams
  - Process
x/Remoting
  - replaced by sockets?
Unit Testing
Haxe 3 Compatibility

there's also target-specific stuff.. (todo)



### standard library in details

### processes, threads, and fibers
processes
  - run a process--basically a another OS program/executable
  - example api:
    - pID, close, exit code, kill
    - readonly: input stream, output stream, error output stream
      - https://haxe.org/manual/std-input-output-process.html

threads
  - like another Main() process
  - generally you don't have control of this
    - "...typically switching between threads is handled by the operating system, a process known as *preemptive scheduling*. Fibers, by contrast, are *cooperatively scheduled*: they must voluntarily yield control, usually at the behest of the programmer."
      - https://thoughtbot.com/blog/meet-fiber-thread-s-cooperative-cousin
  - from the haxe docs:
    - "All spawned threads are treated as daemon threads, meaning that the main thread will not wait for their completion."
    - "Due to threads having access to a shared memory space with all the Haxe variables and objects, it is possible to run into issues due to deadlocks and race conditions. The standard library provides some core synchronization constructs in the sys.thread package."
      - https://haxe.org/manual/std-threading.html

fibers
  - "Fibers are primitives for implementing light weight cooperative concurrency in Ruby. Basically they are a means of creating code blocks that can be paused and resumed, much like threads. The main difference is that they are never preempted and that the scheduling must be done by the programmer and not the VM."
    - from Ruby's docs on Fiber: https://ruby-doc.org/core-2.1.1/Fiber.html







http://www.craftinginterpreters.com/a-map-of-the-territory.html
  - this chapter lays out the all of the concepts about *how programming languages work* very simply and lightly

https://dinghy.xyz/posts/experts-and-beginners/
  - although only a few posts on this site, has very good ideas on making a creative-oriented game framework

https://snowkit.github.io/snow/guide/code.html
  - coding conventions by snowkit (which included the luxe guy)

difference between pointer and reference (in C)
  - https://stackoverflow.com/questions/4995899/difference-between-pointer-and-reference-in-c
    - a very very good answer!
    - basically: reference is like a goto, there is no memory allocated for it
    - pointer is actual data, and has memory allocated for it ("dereferencing" it leads to whatever it's pointing at)








# in depth, copied examples
## ruby block/lambda/proc/closure
### blocks
def one_two_three # block is passed implicitly
  yield 1
  yield 2
  yield 3
end

one_two_three { |number| puts number * 10 }
# 10, 20, 30

def explicit_block(&block)
  block.call # same as yield, maybe same as 'block'
end

explicit_block { puts "Explicit block called" }

def do_something_with_block
  return "No block given" unless block_given?
  # otherwise throws an error
  yield
end

### lambda
say_something = -> { puts "This is a lambda" } # -> or lambda keyword
say_something.call
# "This is a lambda"

times_two = ->(x) { x * 2 }
times_two.call(10)
# 20

my_lambda.call
my_lambda.() # not too bad, but can confuse with method calls?
my_lambda[] # ??
my_lambda.=== # wtf

### proc
my_proc = Proc.new { |x| puts x }
my_proc = proc { |x| puts x }

t = Proc.new { |x,y| puts "I don't care about arguments!" }
t.call
# "I don't care about arguments!"

# Should work
# jumps out of the lambda
my_lambda = -> { return 1 }
puts "Lambda result: #{my_lambda.call}"

# Should raise exception
# no method to jump out of, it's already the top function
my_proc = Proc.new { return 1 }
puts "Proc result: #{my_proc.call}"

# return/jumps out of the method
def call_proc
  puts "Before proc"
  my_proc = Proc.new { return 2 }
  my_proc.call
  puts "After proc"
end

p call_proc
# Prints "Before proc" but not "After proc"


### closures
def call_proc(my_proc)
  count = 500
  my_proc.call
end

count   = 1
my_proc = Proc.new { puts count }

p call_proc(my_proc)
# prints "1"
