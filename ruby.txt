
# just do it & ref

https://github.com/planetjekyll/awesome-jekyll-plugins
https://github.com/benbalter/
  - wrote most of the plugins thate are included by default for Jekyll
  - ***extremely* clean design**, beautiful really... i love it!!! :D
    - but i'm not really sure if that's better than just writing it all in a single main function...
  - for example: https://github.com/benbalter/jekyll-titles-from-headings/blob/main/lib/jekyll-titles-from-headings/generator.rb
  
then, after reading some plugins, you'll be able to read Jekyll itself! :o
https://github.com/jekyll/jekyll/tree/master/lib


## ref
https://hyperpolyglot.org/scripting


# why?
i prefer the syntax, expressiveness, clean 'n tidyness, and fun of ruby over python :)

its also a funny way to write very clean simple scripts in a more functional style

anyway, anything is better than bash!


# learn

basically, i just want to use Ruby for shell scripting, because bash is hella ugly, and i don't think zsh really fixes that due to compatibility with bash (posix). Fish is an interesting alternative, but, anyway, i think Ruby can be a cool general-use "scripting" langauge--basically glue for all sorts of every-day problems :)


# 1. learn x in y minutes
todo: get link


# 2. jump in

see the source code of Jekyll plugins
then see the source code of Jekyll


# check the docs

https://ruby-doc.org/core-2.5.0/Kernel.html#method-i-exec
https://ruby-doc.org/core-2.5.0/Kernel.html#method-i-system
https://ruby-doc.org/core-2.5.0/Kernel.html#method-i-spawn
https://ruby-doc.org/core-3.1.1/IO.html
  
kernal
- kernal contains most keywords, and base object methods?
  - exec, replaces current process to execute something
  - eval, interpreter
  - system, runs in a "subshell" (another process?)
    - i think this is the one you'd often use for batch files
  - spawn, "similar to system but it doesn't wait for the command to finish"
    - "The parent process should use Process.wait to collect the termination status of its child or use Process.detach to register disinterest in their status; otherwise, the operating system may accumulate zombie processes."
    - "has bunch of options to specify process attributes:"


# tutorials:

make sure you have a good set-up: vs code with ruby extensions, nvim with vim-ruby, or whatever, ad this it should be pretty easy to just get completion for everything for a "everything is an object" language

these three chapters look useful: otherwise, it's just the same ol' programming stuff... it's definitely much better to just jump into source code..

https://learnbyexample.gitbooks.io/ruby-scripting/content/chapters/Executing_external_commands.html
https://learnbyexample.gitbooks.io/ruby-scripting/content/chapters/File_processing.html
https://learnbyexample.gitbooks.io/ruby-scripting/content/chapters/Regular_expressions.html
  - https://github.com/learnbyexample/Ruby_Scripting
  
  

# commands
#!/usr/bin/env ruby
system('clear')
system('echo Hello $USER')



#!/usr/bin/env ruby

cmd1 = 'ls out.txt' # true if the file exists
cmd2 = 'grep "foo" out.txt' # false if none found
cmd3 = 'xyz' # nil because command not found

for cmd in [cmd1, cmd2, cmd3]
  puts "Command: #{cmd}"
  rv = system(cmd)

  # inspect method will display human readable representation of object
  puts "system return value: #{rv.inspect}"
  puts "Command exit status: #{$?.exitstatus}" # special var $? detils include PID/exit status/etc
  puts '-' * 30
end


# save stdout to a var
>> working_dir = `pwd`
=> "/home/learnbyexample/ruby_programs\n"
>> working_dir.chomp
=> "/home/learnbyexample/ruby_programs"

# use %x to use different delimeters, in case of character problems
>> nums = %x/seq 3/
=> "1\n2\n3\n"
>> puts nums # stdout
1
2
3
=> nil

>> foo = %x(echo `seq 2`).chomp
=> "1 2"

# only stdout is saved
>> files = %x{ls *.txt *.log}
ls: cannot access '*.log': No such file or directory
=> "out.txt\n"




irb command for repl



$ type env ruby
env is /usr/bin/env
ruby is /usr/local/bin/ruby

$ cat hello_world.rb
#!/usr/bin/env ruby

puts 'Hello World'

$ chmod +x hello_world.rb
$ ./hello_world.rb
Hello World

  
  
