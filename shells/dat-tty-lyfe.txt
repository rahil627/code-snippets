
setup:
see setup.sh

install a better shell
copy dot files
use a fuzzy search program (fzf) to search for any file
use a fuzzy search program plugin (fzf-vim) in nvim to search and edit any file
add scripts folder to path env var, and then upload aliases (in case of fish)


tools:
https://direnv.net
  - make global environment vars local to current directory
  
  
elvish tutorial:
https://elv.sh/learn/fundamentals.html
  - a shell, but also has a good shell tutorial

0.
"There are really a myriad of external commands; to start with, you can manage code repositories with git, convert documents with pandoc, process images with ImageImagick, transcode videos with ffmpeg, test the security of websites with nmap and analyze network traffic with tcpdump. Many free and open-source software come with a command-line interface."

var, list
  - **can use var and lists to store anything, super useful, like yank memory registers in nvim**
  
escape var to string
  - var x = 10; echo $x;

env var
  - often stored like C constants, all caps: $USER, $IPS, etc.
  - these are stored in shell memory and always available for the shell session
  - these are often used by shell scripts to access particular info such as paths to config files
    - rubygems dir-path for env var is $GEM_PATH
  - $ARGV[0] list (or: $1, $2, ...) are often used to pass arguments to a script
  
command chaining, capturing
  - use ; to seperate commands
    - echo Hello, $E:USER,; uname; echo user!
      - this will output on 3 new-lines
  - or use cat, without any args, to take in multi-line std input from the shell
  - use command substitution/capture, even from within echo
    - echo Hello, $E:USER, (uname) user!
      - this will output one one line
  - use command sub/capture to store 
    - var $os = (uname)
    
    
