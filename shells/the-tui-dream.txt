
setup:
see setup.sh

everyday use:
TODO: should ask other people, or watch videos on how pros use shells. Its one of those things where you don't really have a good education / tutorial on, and rely on scraping info, trying stuff over time

install a better shell
  - see cli-shells.txt
  
copy my dot files

use a fuzzy search program to list and search stuff
  - "It's an interactive Unix filter for command-line that can be used with any list; files, command history, processes, hostnames, bookmarks, git commits, etc."
  - fzf (does telescope have a standalone version?)
  - map keys
    - fzf comes with an install script, somewhere in the package manager, see github repo
    - "Key bindings (CTRL-T, CTRL-R, and ALT-C) (bash, zsh, fish)"
    - "Fuzzy auto-completion (bash, zsh)" (note: no fish, because fish already has it)
  - find file-paths and paste (c-t)
    - find files including hidden files
  - command history aka reverse search (c-r)
  - find file-paths and change directory (a-c)
  - ...more?

CTRL-T - Paste the selected files and directories onto the command-line
Set FZF_CTRL_T_COMMAND to override the default command
Set FZF_CTRL_T_OPTS to pass additional options
CTRL-R - Paste the selected command from history onto the command-line
If you want to see the commands in chronological order, press CTRL-R again which toggles sorting by relevance
Set FZF_CTRL_R_OPTS to pass additional options
ALT-C - cd into the selected directory
Set FZF_ALT_C_COMMAND to override the default command
Set FZF_ALT_C_OPTS to pass additional options


use a fuzzy search program plugin in nvim to search and edit any file
  - telescope > fzf
  - map keys
  - try to use most of telescope's hooks

add scripts folder to path env var, and then upload aliases (in case of fish)


--


to try:
https://github.com/starship/starship
  - smarter cross-shell prompt?

next level shit:
https://github.com/sainnhe/tmux-fzf
  - use a fuzzy search program to control terminal multiplexor, and do more stuff beyond file-finding







tools:
https://direnv.net
  - make global environment vars local to current directory
  
  
elvish tutorial:
https://elv.sh/learn/fundamentals.html
  - a shell, but also has a good shell tutorial

0.
"There are really a myriad of external commands; to start with, you can manage code repositories with git, convert documents with pandoc, process images with ImageImagick, transcode videos with ffmpeg, test the security of websites with nmap and analyze network traffic with tcpdump. Many free and open-source software come with a command-line interface."

var, list
  - **can use var and lists to store anything, super useful, like yank memory registers in nvim**
  
escape var to string
  - var x = 10; echo $x;

env var
  - often stored like C constants, all caps: $USER, $IPS, etc.
  - these are stored in shell memory and always available for the shell session
  - these are often used by shell scripts to access particular info such as paths to config files
    - rubygems dir-path for env var is $GEM_PATH
  - $ARGV[0] list (or: $1, $2, ...) are often used to pass arguments to a script
  
command chaining, capturing
  - use ; to seperate commands
    - echo Hello, $E:USER,; uname; echo user!
      - this will output on 3 new-lines
  - or use cat, without any args, to take in multi-line std input from the shell
  - use command substitution/capture, even from within echo
    - echo Hello, $E:USER, (uname) user!
      - this will output one one line
  - use command sub/capture to store 
    - var $os = (uname)
    
    
