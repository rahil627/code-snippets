
setup:
see setup.sh

everyday use:
TODO: should ask other people, or watch videos on how pros use shells. Its one of those things where you don't really have a good education / tutorial on, and rely on scraping info, trying stuff over time

install a better shell
  - see cli-shells.txt
  
copy my dot files
  - includes aliases
  - includes shell key-bindings
    - todo: create a binding for file manager

copy my scripts folder (maybe add to dot files)
  - add scripts folder to path env var, and then upload aliases (in case of fish)

/* hmmmm, not sure about this...
install shell plug-in manager
  - curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher

installs shell plugins
  - fzf key bindings
    - fisher install jethrokuan/fzf
    - set -U FZF_LEGACY_KEYBINDINGS 0
      - add this to fish_config
*/

use a fuzzy search program to list and search stuff (including files)
  - "It's an interactive Unix filter for command-line that can be used with any list: files, command history, processes, hostnames, bookmarks, git commits, etc."
  - fzf
  - map keys
    - fzf comes with an install script, somewhere in the package manager, see github repo
    - "Key bindings (CTRL-T, CTRL-R, and ALT-C) (bash, zsh, fish)"
    - "Fuzzy auto-completion (bash, zsh)" (note: no fish, because fish already has it)
  - find file-paths and paste (c-t)
    - find files including hidden files
  - command history aka reverse search (c-r)
  - find file-paths and change directory (a-c)

CTRL-T - Paste the selected files and directories onto the command-line
Set FZF_CTRL_T_COMMAND to override the default command
Set FZF_CTRL_T_OPTS to pass additional options
CTRL-R - Paste the selected command from history onto the command-line
If you want to see the commands in chronological order, press CTRL-R again which toggles sorting by relevance
Set FZF_CTRL_R_OPTS to pass additional options
ALT-C - cd into the selected directory
Set FZF_ALT_C_COMMAND to override the default command
Set FZF_ALT_C_OPTS to pass additional options


https://github.com/jethrokuan/fzf
  - fisher install jethrokuan/fzf
  - set -U FZF_LEGACY_KEYBINDINGS 0
    - i think need this too
  - as-c to include hidden files!
  - a-o to open with default editor!
  - auto-complete /w fzf! :o
  - i think i'll go with this as it's just simpler, and i don't use stuff from the other repo

Legacy	New Keybindings	Remarks
Ctrl-t	Ctrl-o	Find a file.
Ctrl-r	Ctrl-r	Search through command history.
Alt-c	Alt-c	cd into sub-directories (recursively searched).
Alt-Shift-c	Alt-Shift-c	cd into sub-directories, including hidden ones.
Ctrl-o	Alt-o	Open a file/dir using default editor ($EDITOR)
Ctrl-g	Alt-Shift-o	Open a file/dir using xdg-open or open command

https://github.com/PatrickF1/fzf.fish
  - add this to config_fish, to show hidden files but exclude .git
    - set fzf_fd_opts --hidden --exclude=.git
  - newer than jethrokuan's repo, but a little different
  - key-bindings for fish, also lists some other stuff, like processes, git status, git log, etc.
    - c-v, local + global env vars list
  - the reverse command shows a preivew of the fish function that is run! :o that's cool!
  - i'm guessing these are just commands that end up piping into fzf, so no biggie, can do yourself too
  






use a fuzzy search program plugin in nvim to search and edit any file
  - telescope > fzf
  - map keys
  - try to use most of telescope's hooks




--

replacement of old tools:
many of these are written in rust
exa or lsd > ls
  - better choice of flags
  - adds a tree layouts
  - better coloring?
  - https://github.com/ogham/exa
  - https://github.com/Peltoche/lsd
fd > find
  - seems like a simple replacement, though i didn't look into it
  - https://github.com/sharkdp/fd/
ripgrep > grep
  - simple replacement
  - https://github.com/BurntSushi/ripgrep
bat > cat
  - mainly: adds syntax highlighting
  - integrate/use with fzf, git diff, ripgrep, etc., resulting in better previews
    - https://github.com/eth-p/bat-extras
  - https://github.com/sharkdp/bat





to try:


# file nav
cd replacement
  - these replace cd, saving the data and providing a list of most frequently cd
    - as you probably only cd into a few places, the list of "working dirs" probably isnt even that long(!), and therfore quicker than using either a file manager or normal cd... however, fzf (alt+c) might still be able to compete
  - however, contemporary shells do this too..? so... not sure..
    - best to just use absolute paths when using cd
  - z
    - there's a port to fish too
  - f
    - a newer little project by an indian student



file managers
  - GUI > wasting human memory, also *way* better than typing ls/cd!!
  - todo: try them all!
**ranger**
  - most feature-rich / extensible
  - vim key bindings are used by
  - python
**nnn**
  - light-weight, fast, zero-config
  - C
lf
  - simple, fast
fff
  - simple, fast
  - written in bash :o
mc (midnight commander)
  - for that old school feel
  
  
  
x/https://github.com/starship/starship
  - smarter cross-shell prompt?
  - not really sure what this adds... maybe just provides something that can be customized..



next level shit:

tmux vs kitty
  - kitty basically provides tmux stuff (multiple windows/tabs management), but im not really sure how they differ...
  - tmux def has the advantage of being used in a real remote terminal
  - tmux also has the great advantage of working on any terminal app

https://github.com/sainnhe/tmux-fzf
  - use a fuzzy search program to control terminal multiplexor, and do more stuff beyond file-finding







tools:
https://direnv.net
  - make global environment vars local to current directory
  
  
elvish tutorial:
https://elv.sh/learn/fundamentals.html
  - a shell, but also has a good shell tutorial

0.
"There are really a myriad of external commands; to start with, you can manage code repositories with git, convert documents with pandoc, process images with ImageImagick, transcode videos with ffmpeg, test the security of websites with nmap and analyze network traffic with tcpdump. Many free and open-source software come with a command-line interface."

var, list
  - **can use var and lists to store anything, super useful, like yank memory registers in nvim**
  
escape var to string
  - var x = 10; echo $x;

env var
  - often stored like C constants, all caps: $USER, $IPS, etc.
  - these are stored in shell memory and always available for the shell session
  - these are often used by shell scripts to access particular info such as paths to config files
    - rubygems dir-path for env var is $GEM_PATH
    - tip: can hook shell env vars to LSP to provide autocomplete + fzf lookup
  - $ARGV[0] list (or: $1, $2, ...) are often used to pass arguments to a script
  
command chaining, capturing
  - use ; to seperate commands
    - echo Hello, $E:USER,; uname; echo user!
      - this will output on 3 new-lines
  - or use cat, without any args, to take in multi-line std input from the shell
  - use command substitution/capture, even from within echo
    - echo Hello, $E:USER, (uname) user!
      - this will output one one line
  - use command sub/capture to store 
    - var $os = (uname)
    
    
