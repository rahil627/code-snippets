# todo
todo: merge this

  - so, third-party Xamarin(.Forms) merged into .NET was re-titled to MAUI (a *much* better name). Xamarin used to cost *a lot* of money, but i think it's now free and open-source (it's on github! :) ).
  - Avalonia is the spiritual successor of WPF (i personally don't know the difference between WPF, Xamarin.Forms, or ASP.NET: to me they are all "win forms"!). At the moment it only supports desktop platforms, but i think it will target mobile platforms soon, as they have a *ton* of support, including Unity and JetBrains.
  - Uno, along with MAUI, are the most direct solutions, both are far more mobile-focused than Avalonia. If one is mainly targeting iOS, then it might just honestly be better to write native Swift code instead! maaaybe.
  - as it turns out, **Haxe does not have a *native* (haxe) library of bindings for the native GUI APIs of various platforms (and devices)**. However, it does have HaxeUI, which serves as a kind of intermediary containing several "back-ends", one of which is the C++ open-source cross-platform GUI library wxWidgets. HaxeUI is actually kept up-to-date, but i'm not so sure about the status of wxWidgets, although, it was quite popular back in the day... Anyway, even **wxWidgets doesn't seem to support mobile platforms, only desktop platforms,* definitely not Android (the "dev roadmap" page says they have no plans for it unless someone wants to fun them), and iOS seems abandoned (the docs/readme reads: "wxiOS is far from a full supported port, but can be used as base for simple applications and future improvements."). Thus, **Haxe does not currently (2022) have any way to create native GUI apps for mobile platforms, neither iOS nor Android.**
    - note: NME does not provide any sort of native GUI bindings neither, it just provides a neat Flash-like way to draw stuff on the screen, for several different device platforms. Lime pretty much does the same thing as NME (they even share a lot of code), but is way more messy / bloated. OpenFL, which uses Lime as a "back-end", just adds a higher level to that. 
    - and so to conclude, if you care abuot native GUI, then C#'s frameworks (Avalonia, Uno, MAUI) and Dart's Flutter are the main options that i know of, and of the four, i'd pesonally choose Flutter or Avalonia. However, if native gui doesn't matter to you, and you just want to make a game or even an app *without* native gui, then i'd choose Haxe or any game framework really,

along with several other languages/frameworks/game engines (haxeUI, raylib's raygui, various newer imGUIs, etc.)

 as it's much easier to divide the UI drawing and maintain a graphics renderer context and input for several platforms, then to maintain *the entire gui api for every platform, including input and renderer**. Yeah... it's a confusing mess... I personally am inclined to comprimising native gui for the ease and simplicity of immediate-GUIs, specifically **dear imgui**.., and calling it a day, lol. fuck all the native bullshit. it's just too much!
# end of todo







ui framework agnostic:
instead of being tied to a framework, just abstract it! **this is the best solution i know of**...

Haxe
  - HaxeUI
    - currently supported back-ends: (TODO: update this), wxWidgets for desktop OSs, Heaps, NME, OpenFL (therefore HaxeFlixel and HaxePunk (rip))
  - coconut
    - currently supported back-ends: (TODO: update this) **React-Native for mobile**, coming soon: Heaps
  - both of these feature a **swappable "back-end"!!**: meaning, it's just a set of APIs, and so if you do want to switch to another framework, you can do that without changing your code, or at least minimizing that. This way, as ui frameworks come and go over time, you can keep the same core code, but swap the ui frameowork, say, from Heaps to React. All that is needed is to write haxe bindings for the target UI framework. This way, also, you can just re-use all of Haxe code and even coconut ui api code. **this might just be the most future-proof solution that i know of...**
    - from Rudy on the Haxe server (15 years Haxe dev with tons of React experience): "Yeah the theory is all nice, but in practice you'll build your UI with/around your current backend's components and that won't translate well to other backends"


# "hybrid"
basically bindings to native components (UIKit for iOS, Win32 api for Windows, etc.). This is the first solution that came to my mind when i thought cross-platform ui/apps : just provide bindings, and then a common framework on top of that. **The main trade-off is this: it will not constrain as you always have acces to native APIs, but you must understand the inner APIs of each target: UIKit for Apple, Win32 for Windows, and so on. Thus, this is definitely not for the casual or even the indie devs.** Indies should go one step up, to "owner-drawn" non-native frameworks.

React-Native
  - the grand-daddy of hybrid frameworks?, and still perhaps the most popular (as of 2022)
  - it's actually a specific component, that goes alone with React. React is the front-end ui framework. React Native is the native back-end (wrappers, common components)
  - **uses native device componenets / wrappers**
  - javascript, but since haxe has bindings, perhaps there are other bindings?? :o
    - javascript has the biggest library tho (npm)
  - the syntax / ui lanugage of React is like HTML-like :/
  - **the most mature/oldest one** (excluding Qt), setting a new standard, an therefore has the largets library collection
    - expo.io builds the mobile apps for you, so you don't need a Mac! :o
  - open-source and (*was?*) extremely popular among trendy trashy startup companies, but, **it feels more more abandoned now, i think even Facebook stopped using it now, lol!**
  - great VS Code dev experience, although still dynamically typed
  - Facebook (abandoned to open-source?)
  - Microsoft..? https://microsoft.github.io/react-native-windows/
  
MAUI (Xamarin)
  - C#/.NET WinForms(?) api

Uno?
  - C#/.NET WPF api
  
RubyMotion
  - closed source, made by the same people that made DragonRuby, the cross-platform game framework
  - *i think* it's a hybrid, basically just bindings to everything, wherein you'd have to develop specifically for each platform target
  - at the moment there's a free version (not sure if it's a trial or not...), then, perhaps after it is populra or for publishing to other devices you need to pay quite a bit..
  - basically run by a 2 people



# non-native
for a single, indie dev, these are the way to go. Well, either this or web (React, without the Native), which is inherently cross-platform.

Qt
  - the grand-daddy of all non-native ui frameworks
  - i didn't even know it still existed!!
  - impressive use history: from contemporary use in Linux's KDE desktop UI(!!!) to Valve's Source Engine
  - official python bindings :o
  - non-official rust bindings
  - feels like a massive tool :(, like as big as Unity!

Flutter
  - the contempory banger, quickly rose in popularity, equaling React-Native to become top 2
  - ...
  - Dart has VM during development and AOT compilation for production, basically like Haxe
  
Avalonia
  - C#/.NET version of Flutter
 
 
 
# other?

Electron
  - i'm not really sure if this even belongs here, but i think you can make anything with it..?
  - the major problem: it runs on top of a web browser: Chromium, meaning, each Electron application contains a copy of Chromium inside! :o
    - just based off this alone, it does not intrigue me... but:
  - VS Code, Skype?, Slack?, etc.
  
  
  


# native

SwiftUI
  - Apple's newer (2019?) tool for making native ui apps for Apple platforms (MacOS, iOS, etc.)
  - https://developer.apple.com/xcode/swiftui/#
  - Apple's products, including their software, tend to last decades, making this far more future-proof than Google's Flutter
  - because it's rather new, **it even has among the best api, perhaps even simpler/better than Flutter!**, despite that though, it seemsyou:
  - **must still learn native libraries (UIKit, AppKit, etc.)**
  - **need a MacOS to dev** :(
  - **need to use god awful XCode to dev??**
  - **closed-source means you cannot figure out what the code really does, you just grasp/understand through API documentation**, and that documentation is poor (**remember your time with Cocos2D and that shit Apple networking code?? *ugh* :vomiting_face:)
    - it's also confusing because Swift, the programming language, is open-source... however SwiftUI isn't, and since Apple's products are all closed-source, it doesn't make much sense to use the language, even though it's a good language. If SwiftUI was a cross-platform product, both targeting all platforms *and* able to dev from all platforms, it *could* kill. The simplcity and productivity of VS Code is just too important.
  - todo: not sure if it has a web target, which is pretty darn important!
  - Apple



# not interested
Jetpack Compose
  - Google Android's version of SwiftUI ?? *gross* :vomiting_face:
  - still too new (as of 2022)
  
Kotlin MultiFramework
  - ...how is this different from Jetpack compose..??
  - terrible name... does it compile to C now??
  - is it Google? why would Google have 3 UI frameworks??


# old
Cordova
Ionic
Xamarin -> MAUI


  
# tools
**CodeMagic**
  - builds apps for you, so that you don't need a Mac, iOS device, Windows(?), and Android to make stuff
  - 500 build minute free per month
  - supports: native iOS/Android, Flutter, React Native, Unity, and some older ui frameworks
  - https://codemagic.io/start/
  
  
conclusion:
0. Haxe/coconut/react-native
  - this solution is ridiculously good: best of both worlds: **ui-framework independent**, Haxe power, **can use javascript libraries(?)**, but if it compiles to javascript, it won't be any faster...
2. React Native for the **huge open-source javascript libraries and community**, *nasty* HTML/CSS ui language, although maybe not he best performance for mobile, it's **still the best solution for web targets**, and **you get access to native components!!, allowing you to basically write native code on any OS at a high-level without ever touching native tools/languages/devices/etc.**
  - alts: MAUI
2. Flutter for quick *native-looking* app-making, but not if you want to actually use native components/widgets(??), thus quite limiting(??), faster compiled language, simpler by design, **covers most use cases**
  - alts: Avalonia, Uno
?. Qt, with official python bindings, maybe can write C++ code to access native componenets?, but that would be *grooosss*

it seems in general that **Flutter is amazing with an excited new community, quite like React Native was in the past, but limited, whereas React Native still lives on, native support for everything, now including Microsoft covering the Windows and even MacOS targets (surely a big stab at Apple's closed source nature). Flutter can be used for most simple cases. React Native can be used for more technical, experimental, custom cases that reqoires much native component access, and doesn't constrain.

SwiftUI is constrained by it's terrible MacOS/XCode dev environment. I'd much rather just use VS Code or even straight up nvim for a relaxed scripting feel. :) happiness *matters*.

also, although i haven't used javascript for a decade, i'm just not interested. Not then, not now. It sounds like a messs. A mess of shiity web devs. I personally don't need a million libraries. Just one good standard library is enough... *maybe.* Can always check npm for libs later on to compare... Or who knows, maybe Google/Dart will just build a javascript compiler, like Haxe (so that you can use javascript libraries)..

so, that leaves **trying Flutter and Dart first, then React Native second, as Flutter can be a bit faster in development, simpler. But in the long run, i think hybrid ui frameworks such as React Native are indeed the way to go.**



constraints and limitations:
in order to publish to the App store, the app needs to appear native, thus, the game-ui idea is botched for Apple apps (iOS and MacOS)
in order to use SwiftUI, you need a MacOS, and you need to use XCode (and XCode is garbage).
    
  




https://www.donnfelker.com/flutter-just-might-work/
  - good post, covers many


https://blog.udemy.com/flutter-vs-react-native/
  - explains the architecturs of both

https://news.ycombinator.com/item?id=23198914
  - good reddit-like data


I’ve spent the last week learning SwiftUI to see how hard it would be to reimplement Notion in a performant way. It seems really ... unfinished. Like, the default List view is really hard to style. I spent 4 hours yesterday trying to get an unstyled text Button to have a hit target bigger than the characters themselves. Adding a frame with a background worked, but if the frame had no background (or a transparent background) then the hit target would stay tiny. I ended up fixing it by just reading through every property method in swiftui and guessing. It reminds me of web development in the early days of jQuery.
**If the SwiftUI code were opensource it would be much more pleasant - I could paw through the code if I needed to, file issues, and so on. But the whole experience compared to writing typescript with VS Code is shockingly bad. With the preview open Xcode sometimes stutters so much that it misses key presses - so I’ll type a function name and it’ll come out missing letters, because apparently I wasn’t typing slowly enough for my $3000 computer from 2016 to keep up.**
x

I certainly hope so, because this was definitely on Swift 5.2 . In general if you come in expecting a dev experience anywhere close to writing React in Typescript using VSCode, SwiftUI and Xcode both are a bit of a disappointment - it's slow, it's glitchy, autocomplete kind of sucks, never mind tooling like Prettier which I take for granted now.




my personal posts:

https://github.com/ocornut/imgui/discussions/5090

title: is it okay to use imgui for iOS apps?
 
PathogenDavid's answer:
TL;DR: Just because you can doesn't mean you should.

is it okay to use imgui for iOS apps?
There's no reason you couldn't (and people do), but I personally would not unless it's just for debugging stuff. IMO using Dear ImGui as the primary UI for mobile apps is shoving a square peg in the round hole. It was designed around desktop UI paradigms, not mobile ones.

i’ve read quite a few times that the main problem with immediate gui, in general, as opposed to the normal “retained” gui, is that it can be CPU-expensive, for drawing the entire GUI on every frame.

First, is that even true? lol
I wouldn't say this is inherently true, but it is somewhat true for Dear ImGui. Dear ImGui was first and foremost designed for games, in which situation you're probably rendering a lot more complex stuff at 60 FPS regardless so its overhead if negligible.

There are some workarounds for this, look at the various power saving PRs. #4076 #3124 #2749

I personally just want to make simple apps for iOS, [...], and i don’t care about native feel anyway.
I would be concerned about cert. Dear ImGui won't play nice with VoiceOver and I don't believe the text input would properly support things like auto complete or correction. (If it does I can't imagine it works as well as the native text input widgets.) I don't have experience with cert on iOS but my understanding is Apple is very picky and I can't imagine they'd like these things.

Also my understanding is Apple rejects apps which they think depart too far from their UI guidelines.

(huh, sorry to post here, as i see the only category is issues... but i read on the actual forums that it was better to post here..)
