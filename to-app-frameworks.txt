

ui framework agnostic:
instead of being tied to a framework, just abstract it! **this is the best solution i know of**...

Haxe
  - HaxeUI
    - currently supported back-ends: (TODO: update this), wxWidgets for desktop OSs, Heaps, NME, OpenFL (therefore HaxeFlixel and HaxePunk (rip))
  - coconut
    - currently supported back-ends: (TODO: update this) **React-Native for mobile**, coming soon: Heaps
  - both of these feature a **swappable "back-end"!!**: meaning, it's just a set of APIs, and so if you do want to switch to another framework, you can do that without changing your code, or at least minimizing that. This way, as ui frameworks come and go over time, you can keep the same core code, but swap the ui frameowork, say, from Heaps to React. All that is needed is to write haxe bindings for the target UI framework. This way, also, you can just re-use all of Haxe code and even coconut ui api code. **this might just be the most future-proof solution that i know of...**


# "hybrid"
basically bindings to native components (UIKit for iOS, Win32 api for Windows, etc.). This is the first solution that came to my mind when i thought cross-platform ui/apps : just provide bindings, and a common framework. **It sounds like it's a bit painful to write code for native componenets, but for most cases, this works well, and very importantly does not constrain as you always have acces to native APIs.**

React-Native
  - the grand-daddy of hybrid frameworks?, and still perhaps the most popular (as of 2022)
  - it's actually a specific component, that goes alone with React. React is the front-end ui framework. React Native is the native back-end (wrappers, common components)
  - **uses native device componenets / wrappers**
  - javascript, but since haxe has bindings, perhaps there are other bindings?? :o
    - javascript has the biggest library tho (npm)
  - the syntax / ui lanugage of React is like HTML-like :/
  - **the most mature/oldest one** (excluding Qt), setting a new standard, an therefore has the largets library collection
    - expo.io builds the mobile apps for you, so you don't need a Mac! :o
  - open-source and (*was?*) extremely popular among trendy trashy startup companies, but, **it feels more more abandoned now, i think even Facebook stopped using it now, lol!**
  - great VS Code dev experience, although still dynamically typed
  - Facebook (abandoned to open-source?)
  - Microsoft..? https://microsoft.github.io/react-native-windows/
  
MAUI (Xamarin)
  - C#/.NET WinForms(?) api

Uno?
  - C#/.NET WPF api



# non-native
Qt
  - the grand-daddy of all non-native ui frameworks
  - i didn't even know it still existed!!
  - impressive use history: from contemporary use in Linux's KDE desktop UI(!!!) to Valve's Source Engine
  - official python bindings :o
  - non-official rust bindings
  - feels like a massive tool :(, like as big as Unity!

Flutter
  - the contempory banger, quickly rose in popularity, equaling React-Native to become top 2
  - ...
  - Dart has VM during development and AOT compilation for production, basically like Haxe
  
Avalonia
  - C#/.NET version of Flutter
  
  
  


# native

SwiftUI
  - Apple's newer (2019?) tool for making native ui apps for Apple platforms (MacOS, iOS, etc.)
  - https://developer.apple.com/xcode/swiftui/#
  - Apple's products, including their software, tend to last decades, making this far more future-proof than Google's Flutter
  - because it's rather new, **it even has among the best api, perhaps even simpler/better than Flutter!**, despite that though, it seemsyou:
  - **must still learn native libraries (UIKit, AppKit, etc.)**
  - **need a MacOS to dev** :(
  - **need to use god awful XCode to dev??**
  - **closed-source means you cannot figure out what the code really does, you just grasp/understand through API documentation**, and that documentation is poor (**remember your time with Cocos2D and that shit Apple networking code?? *ugh* :vomiting_face:)
    - it's also confusing because Swift, the programming language, is open-source... however SwiftUI isn't, and since Apple's products are all closed-source, it doesn't make much sense to use the language, even though it's a good language. If SwiftUI was a cross-platform product, both targeting all platforms *and* able to dev from all platforms, it *could* kill. The simplcity and productivity of VS Code is just too important.
  - todo: not sure if it has a web target, which is pretty darn important!
  - Apple



# not interested
Jetpack Compose
  - Google Android's version of SwiftUI ?? *gross* :vomiting_face:
  - still too new (as of 2022)
  
Kotlin MultiFramework
  - ...how is this different from Jetpack compose..??
  - terrible name... does it compile to C now??
  - is it Google? why would Google have 3 UI frameworks??


# old
Cordova
Ionic
Xamarin -> MAUI


  
# tools
**CodeMagic**
  - builds apps for you, so that you don't need a Mac, iOS device, Windows(?), and Android to make stuff
  - 500 build minute free per month
  - supports: native iOS/Android, Flutter, React Native, Unity, and some older ui frameworks
  - https://codemagic.io/start/
  
  
conclusion:
0. Haxe/coconut/react-native
  - this solution is ridiculously god: best of both worlds: Haxe power, can use javascript libraries, compile to javascript though?
1. Flutter for quick *native-looking* app-making, but not if you want to actually use native components/widgets, faster compiled language, simpler by design
2. React Native for the open-source javascript libraries and community, *nasty* HTML/CSS ui language, although maybe not he best performance for mobile, it's still the best solution for web targets, and **you get access to native components!!**
3. Qt (with official python bindings), an interesting option...
?. Avalonia/Uno/MAUI (Xamarin)
x. SwiftUI for real native dev for all Apple devices (but what about web and windows? :/ )

it seems in general that **Flutter is amazing with an excited new community, quite like the web/javascript framework communities, but limited, whereas SwiftUI is just for Apple native stuff.** So, **for simple apps, can use Flutter.** And **if you think you will hit Flutter's limitations--more techinical designs--use either React Native or SwiftUI**. However, in the long-run, it might just be better to invest in Swift, as it is also the native language of Apple's products, and won't be disappearing any-time soon. The language itself as solid as any other C-like language.

yeeeaaah, the MacOS/XCode dev environment is *terrible*. I'd much rather just use VS Code or straight up nvim for a relaxed scripting feel. :) happiness comes first!

also, although i haven't used javascript for a decade, i'm just not interested. Not then, not now. It sounds like a messs. A mess of shiity web devs. I don't need a million libraries. Just one good standard library is enough... *maybe.* Can always check npm for libs later on to compare... Or who knows, maybe they'll just build a javascript compiler, like Haxe?

so, that just leaves Flutter and Dart. I'm okay with that..! It sounds like Haxe anyway. :)



constraints and limitations:
need to look like native Apple to pass the Apple store, thus, the game-ui idea is botched for Apple apps (iOS and MacOS)
need a MacOS and must use XCode for SwiftUI, *gross*
    



to languages.txt:
Swift
  - actually looks like a decent language, though rather dull...
  - "core libraries" seem to be the same as .NET core libraries
    - https://www.swift.org/core-libraries/
  - https://www.swift.org/about/
    - "One of the most exciting aspects of developing Swift in the open is knowing that it is now free to be ported across a wide range of platforms, devices, and use cases.
       Our goal is to provide source compatibility for Swift across all platforms, even though the actual implementation mechanisms may differ from one platform to the next."
  




https://www.donnfelker.com/flutter-just-might-work/
  - good post, covers many


https://blog.udemy.com/flutter-vs-react-native/
  - explains the architecturs of both

https://news.ycombinator.com/item?id=23198914
  - good reddit-like data


I’ve spent the last week learning SwiftUI to see how hard it would be to reimplement Notion in a performant way. It seems really ... unfinished. Like, the default List view is really hard to style. I spent 4 hours yesterday trying to get an unstyled text Button to have a hit target bigger than the characters themselves. Adding a frame with a background worked, but if the frame had no background (or a transparent background) then the hit target would stay tiny. I ended up fixing it by just reading through every property method in swiftui and guessing. It reminds me of web development in the early days of jQuery.
**If the SwiftUI code were opensource it would be much more pleasant - I could paw through the code if I needed to, file issues, and so on. But the whole experience compared to writing typescript with VS Code is shockingly bad. With the preview open Xcode sometimes stutters so much that it misses key presses - so I’ll type a function name and it’ll come out missing letters, because apparently I wasn’t typing slowly enough for my $3000 computer from 2016 to keep up.**
x

I certainly hope so, because this was definitely on Swift 5.2 . In general if you come in expecting a dev experience anywhere close to writing React in Typescript using VSCode, SwiftUI and Xcode both are a bit of a disappointment - it's slow, it's glitchy, autocomplete kind of sucks, never mind tooling like Prettier which I take for granted now.




my personal posts:

https://github.com/ocornut/imgui/discussions/5090

title: is it okay to use imgui for iOS apps?
 
PathogenDavid's answer:
TL;DR: Just because you can doesn't mean you should.

is it okay to use imgui for iOS apps?
There's no reason you couldn't (and people do), but I personally would not unless it's just for debugging stuff. IMO using Dear ImGui as the primary UI for mobile apps is shoving a square peg in the round hole. It was designed around desktop UI paradigms, not mobile ones.

i’ve read quite a few times that the main problem with immediate gui, in general, as opposed to the normal “retained” gui, is that it can be CPU-expensive, for drawing the entire GUI on every frame.

First, is that even true? lol
I wouldn't say this is inherently true, but it is somewhat true for Dear ImGui. Dear ImGui was first and foremost designed for games, in which situation you're probably rendering a lot more complex stuff at 60 FPS regardless so its overhead if negligible.

There are some workarounds for this, look at the various power saving PRs. #4076 #3124 #2749

I personally just want to make simple apps for iOS, [...], and i don’t care about native feel anyway.
I would be concerned about cert. Dear ImGui won't play nice with VoiceOver and I don't believe the text input would properly support things like auto complete or correction. (If it does I can't imagine it works as well as the native text input widgets.) I don't have experience with cert on iOS but my understanding is Apple is very picky and I can't imagine they'd like these things.

Also my understanding is Apple rejects apps which they think depart too far from their UI guidelines.

(huh, sorry to post here, as i see the only category is issues... but i read on the actual forums that it was better to post here..)
