


Haxe
  - HaxeUI
    - currently supported back-ends: (TODO: update this), wxWidgets for desktop OSs, Heaps, NME, OpenFL (therefore HaxeFlixel and HaxePunk (rip))
  - coconut
    - currently supported back-ends: (TODO: update this) React-Native for mobile, coming soon: Heaps
  - both of these feature a **swappable "back-end"!!**: meaning, it's just a set of APIs, and so if you do want to switch to another framework, you can do that without changing your code, or at least minimizing that. This way, as ui frameworks come and go over time, you can keep the same code, but swap the ui frameowork, say, from Heaps to React. All that is needed is to write haxe bindings for the target UI framework. This way, also, you can just re-use all of your Haxe code, not just the coconut ui api, but the actual functions behind the ui. **this might just be the most future-proof solution that i know of...**
  
Swift
  - SwiftUI, closed-source, Apple's tool for making ui apps for Apple platforms (MacOS, iOS, etc.)
    - https://developer.apple.com/xcode/swiftui/#
    - **this is the current way to go for native apps for Apple's platforms, but i think it already supports Linux, and will support Window in v5.3**, making it a contemporary competitor of Flutter and Avalonia/Uno

to lanauges.txt:
  - actually looks like a decent language, though rather dull...
  - "core libraries" seem to be the same as .NET core libraries
    - https://www.swift.org/core-libraries/
  - https://www.swift.org/about/
    - "One of the most exciting aspects of developing Swift in the open is knowing that it is now free to be ported across a wide range of platforms, devices, and use cases.
       Our goal is to provide source compatibility for Swift across all platforms, even though the actual implementation mechanisms may differ from one platform to the next."
  
Kotlin MultiFramework
  - terrible name... does it compile to C now??



React-Native
  - has haxe bindings?
  - the coconut ui library has a react-native back-end


my personal posts:

https://github.com/ocornut/imgui/discussions/5090

title: is it okay to use imgui for iOS apps?
 
PathogenDavid's answer:
TL;DR: Just because you can doesn't mean you should.

is it okay to use imgui for iOS apps?
There's no reason you couldn't (and people do), but I personally would not unless it's just for debugging stuff. IMO using Dear ImGui as the primary UI for mobile apps is shoving a square peg in the round hole. It was designed around desktop UI paradigms, not mobile ones.

i’ve read quite a few times that the main problem with immediate gui, in general, as opposed to the normal “retained” gui, is that it can be CPU-expensive, for drawing the entire GUI on every frame.

First, is that even true? lol
I wouldn't say this is inherently true, but it is somewhat true for Dear ImGui. Dear ImGui was first and foremost designed for games, in which situation you're probably rendering a lot more complex stuff at 60 FPS regardless so its overhead if negligible.

There are some workarounds for this, look at the various power saving PRs. #4076 #3124 #2749

I personally just want to make simple apps for iOS, [...], and i don’t care about native feel anyway.
I would be concerned about cert. Dear ImGui won't play nice with VoiceOver and I don't believe the text input would properly support things like auto complete or correction. (If it does I can't imagine it works as well as the native text input widgets.) I don't have experience with cert on iOS but my understanding is Apple is very picky and I can't imagine they'd like these things.

Also my understanding is Apple rejects apps which they think depart too far from their UI guidelines.

(huh, sorry to post here, as i see the only category is issues... but i read on the actual forums that it was better to post here..)
