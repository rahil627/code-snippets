# native
React-Native
  - the grand-daddy of native frameworks?
  - it's actually a specific component, that goes alone with React. React is the front-end ui framework. React Native is the native back-end (wrappers, common components)
  - **uses native device componenets / wrappers**
  - javascript, but since haxe has bindings, perhaps there are other bindings?? :o
  - the syntax / ui lanugage of React is like horrible HTML/CSS
  - **the most mature/oldest one** (excluding Qt), setting a new standard, an therefore has the largets library collection
    - expo.io builds the mobile apps for you, so you don't need a Mac! :o
  - open-source and (*was?*) extremely popular among trendy trashy startup companies, but, **it feels more more abandoned now, i think even Facebook stopped using it now, lol!**
  - Facebook

SwiftUI
  - closed-source, Apple's tool for making ui apps for Apple platforms (MacOS, iOS, etc.)
  - https://developer.apple.com/xcode/swiftui/#
  - **this is the current native method for creating ui apps for Apple's platforms**, but i think it already **supports Linux**, and **will support Windows in v5.3**, turning it into **exactly what i want: native iOS, non-native for everything other platform**
  - Apple's products, including their software, tend to last decades, making this far more future-proof than Google's Flutter
  - because it's rather new, **it even has the best api, perhaps even simpler/better than Flutter!**
  - must learn native development (UIKit, AppKit, etc.)
  - **must use XCode/MacOS to dev**?
  - Apple

Jetpack Compose
  - Google Android's version of SwiftUI ?? *gross* :vomiting_face:
  - still too new (as of 2022)
  
Kotlin MultiFramework
  - ...how is this different from Jetpack compose..??
  - terrible name... does it compile to C now??
  - is it Google? why would Google have 3 UI frameworks??


# non-native
Qt
  - the grand-daddy of all non-native ui frameworks
  - i didn't even know it still existed!!
  - impressive use history: from contemporary use in Linux's KDE desktop UI(!!!) to Valve's Source Engine
  - official python bindings :o
  - non-official rust bindings
  - feels like a massive tool :(, like as big as Unity!

Flutter
  - ...
  
  
# other solutions
Haxe
  - HaxeUI
    - currently supported back-ends: (TODO: update this), wxWidgets for desktop OSs, Heaps, NME, OpenFL (therefore HaxeFlixel and HaxePunk (rip))
  - coconut
    - currently supported back-ends: (TODO: update this) **React-Native for mobile**, coming soon: Heaps
  - both of these feature a **swappable "back-end"!!**: meaning, it's just a set of APIs, and so if you do want to switch to another framework, you can do that without changing your code, or at least minimizing that. This way, as ui frameworks come and go over time, you can keep the same code, but swap the ui frameowork, say, from Heaps to React. All that is needed is to write haxe bindings for the target UI framework. This way, also, you can just re-use all of your Haxe code, not just the coconut ui api, but the actual functions behind the ui. **this might just be the most future-proof solution that i know of...**
  
  
  
# tools
**CodeMagic**
  - builds apps for you, so that you don't need a Mac, iOS device, Windows(?), and Android to make stuff
  - 500 build minute free per month
  - supports: native iOS/Android, Flutter, React Native, Unity, and some older ui frameworks
  - https://codemagic.io/start/
  
  
conclusion:
0. Haxe/coconut/react-native
1. SwiftUI for real native Apple devices, native-looking or Apple-looking for other devices(??), and a very contemporary app-making workflow (equal to or better than Flutter!)
2. Flutter for quick *native-looking* app-making, but not if you want native completely components/widgets (TextView, for example),
3. React Native for the open-source libraries, but *nasty* HTML/CSS ui language, still the best solution for web targets though
?. Avalonia/Uno/MAUI
?. Qt (with official python bindings)

it seems in general that **Flutter is amazing with an excited new community, quite like the web/javascript framework communities, but limited, whereas SwiftUI is native and nothing can replace that.** So, **for simple apps, can use Flutter.** And **if you think you will hit Flutter's limitations--more techinical designs--use SwiftUI**. However, **in the long-run, it might just be better to invest in Swift**, as it is also the native language of Apple's products, and won't be disappearing any-time soon. The language itself as solid as any other C-like language.

constraints and limitations:
need to look like native Apple to pass the Apple store, thus, the game-ui idea is botched for Apple apps (iOS and MacOS)

    



to lanauges.txt:
  - actually looks like a decent language, though rather dull...
  - "core libraries" seem to be the same as .NET core libraries
    - https://www.swift.org/core-libraries/
  - https://www.swift.org/about/
    - "One of the most exciting aspects of developing Swift in the open is knowing that it is now free to be ported across a wide range of platforms, devices, and use cases.
       Our goal is to provide source compatibility for Swift across all platforms, even though the actual implementation mechanisms may differ from one platform to the next."
  




https://www.donnfelker.com/flutter-just-might-work/
  - good post, covers many


https://blog.udemy.com/flutter-vs-react-native/
  - explains the architecturs of both




my personal posts:

https://github.com/ocornut/imgui/discussions/5090

title: is it okay to use imgui for iOS apps?
 
PathogenDavid's answer:
TL;DR: Just because you can doesn't mean you should.

is it okay to use imgui for iOS apps?
There's no reason you couldn't (and people do), but I personally would not unless it's just for debugging stuff. IMO using Dear ImGui as the primary UI for mobile apps is shoving a square peg in the round hole. It was designed around desktop UI paradigms, not mobile ones.

i’ve read quite a few times that the main problem with immediate gui, in general, as opposed to the normal “retained” gui, is that it can be CPU-expensive, for drawing the entire GUI on every frame.

First, is that even true? lol
I wouldn't say this is inherently true, but it is somewhat true for Dear ImGui. Dear ImGui was first and foremost designed for games, in which situation you're probably rendering a lot more complex stuff at 60 FPS regardless so its overhead if negligible.

There are some workarounds for this, look at the various power saving PRs. #4076 #3124 #2749

I personally just want to make simple apps for iOS, [...], and i don’t care about native feel anyway.
I would be concerned about cert. Dear ImGui won't play nice with VoiceOver and I don't believe the text input would properly support things like auto complete or correction. (If it does I can't imagine it works as well as the native text input widgets.) I don't have experience with cert on iOS but my understanding is Apple is very picky and I can't imagine they'd like these things.

Also my understanding is Apple rejects apps which they think depart too far from their UI guidelines.

(huh, sorry to post here, as i see the only category is issues... but i read on the actual forums that it was better to post here..)
