# haxe cookbook study
try to order from most useful to least useful


## map and filter functions on data structures
Filter
List elements can be filtered into a new list via a filtering function. Every list element for which the filtering function returns true is added to a new list.

var listOfEvenInts = listOfInts.filter(function (e) return e % 2 == 0);

Map
List elements can be mapped to a new list of elements via a mapping function. The mapping is bijective, and every element from the inital list will have its mapping in the new list.

var listOfIntsAsStrings = listOfInts.map(function (e) return Std.string(e));



## generics

### class
class Value<T> {
  public var value:T;
  
  public function new(value:T) {
    this.value = value;
  }
}

// Create a new Value Int instance
var myIntValue = new Value<Int>(5);

// Create a new Value String instance
var myStringValue = new Value<String>("String");


### function / parameterized arguments
// Declare our new function
function equals<T>(a:T, b:T):Bool {
  return a == b;
}

// Call it with integers
trace(equals(2, 2)); // true
trace(equals(2, 1)); // false

// Call it with strings
trace(equals("hello","hello")); // true
trace(equals("hello","world")); // false



## inline constructor
class myPoint {
x; y;
public inline function new(x, y) { this.x = x; this.y = y}
}

outputs:
var myPoint_x = 100;
var myPoint_y = 150;

no allocation

Quite useful with eg matrix/vector operations because then the compiler can do a lot more optimizations.
(And you won't get extra allocations for temporary matrices.)




