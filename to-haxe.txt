# links / pinned
https://github.com/Dvergar/awesome-haxe-gamedev
  - very good
  - lists all current engines and frameworks
  - lists many useful game dev libraries

https://github.com/nadako/awesome-haxe
  - more personal, toward developing the haxe langauge
  
the codebook is especially good for learning bit-by-bit, especially for macros!


  
# forums
just a note: i've got quite a few posts on the Heaps forum... but it seems the Discord is a better place


# libs
https://github.com/HaxeFoundation
  - contains the language, all compiler/target code, the entire site (site, manual, codebook, docs, etc.), and more goodies
  - can easily edit these to update anything: the language, site, whatever!

https://github.com/haddock7/hlimgui
  - imgui bindings
  
https://code.haxe.org/category/macros/add-parameters-as-fields.html
  - macros are nuts!!!
  
tink
  - macro heaven

  
  
  
# haxe cli
can either use the cli or create an hxml file, where each line is a command argument

haxe --main MainClass --interp
  - for interpreter
  
or, via buildFile.hxml file:
--interp
--main MainClass
-lib heaps (installed via haxelibs)
-cp sourceFolder

then run haxe buildFile.hxml
  
  
haxe --main MainClass -js app.js
  - results in app.js and app.map.js (or something like that)
  - then you need to create a basic HTML page to include the script
  
haxe --main MainClass -hl build.hl
  - be sure to `haxelib install hashlink`
  - results in a single file build.hl containing bytecode
  - todo: maybe has other arguments for generating a C binary

haxe --main MainClass -cpp build
  - be sure to `haxelib install hashlink`
  - results with a folder build, including generated C++ sources and bin(aries)


# haxelibs
haxelib searchRegEx
haxelib install someLibrary

  
hashlink profiler:
from a discord message:

here's what I did:
created some code - some Test.hx
haxe --main Test --hl test.hl
hl --profile 10000 .\test.hl
hl ..\..\HLProfiler\profiler.hl

Load the converted hlprofile.dump into Chrome Performance tab




# scripting?:
you can't do #!/usr/haxe or whatever to make proper shell scripts, but:

i think Haxe has top-level functions, so don't even need a class?

since Haxe comes with an interpreter, it's pretty simple to run a script using the haxe command:
`haxe --main ScriptName --interp`

and if that't too much, or if you don't want to remember the command arguments, you can just create an hxml file. Though it's a little inconvenient to have two files... **It's probably just best to add the haxe command *in* the script file itself, on the top of the file, commented out.**
`haxe build-file.hxml`

otherwise, there are the following options for more scripting power:

wrapper method: hxp
  - https://github.com/haxelime/hxp
    - you can put the followin directly in the script file, thereby removing the need for a hxml build file
    - `var hxml = new HXML ({ cp: ["src"], main: "Main", js: "bin/index.js" });`
      `hxml.build ();`
      - now thinking about it, **i might just prefer seperating the script from building after all.. I don't think i'd want to add this code to every script file.. :/**
    - then can use `hxp script-file` to run it
    - extend hxp.Script to get CLI-like argument handling, perhaps a bit more complex than just the Sys.args() string
      - **i personally wouldn't go this route as it creates a dependency on hxp for all of your scripts! :/, it's better to just use a CLI parsing lib only when you need it, and use `import CLILib`**
    

haxelib method
  - i was told of this in Discord
  - you'd still need a json file to set the haxelib though, so, same problem, no? How is this different or better than just having an hxml file?
  - maybe you could run it from anywhere..? `haxelib ScriptClass` will work anywhere?
  

hscript
  - https://lib.haxe.org/p/hscript/
    - "Parser and interpreter for Haxe expressions"
    - written by Nicholas, includes:
    - this is contains and optional library for super super advanced stuff... it's something similar to the level of Haxe macros... like AST level stuff :o
      - "`hscript.Macro` : convert Haxe macro into hscript Expr"
    - contains sub-set of haxe?? Like haxe without classes? dynamically typed
    - not only can you parse a script and run it, but you can set variables of the interpreter!
      - **thus seperating variable/configs from the actual script/program** *whoa..*

```    
var parser = new hscript.Parser();
var program = parser.parseString(script); // can just read a file to get the script's string 
var interp = new hscript.Interp();
interp.variables.set("Math",Math); // share the Math class
interp.variables.set("angles",[0,1,2,3]); // set the angles list
trace( interp.execute(program) ); 
```

