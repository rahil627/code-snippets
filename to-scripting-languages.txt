

# conclusion
so basically,

**for C/C++ embedding, Lua is better than Python, and much better than Ruby, yet, for the more specific task of embedding into a game, there might be better options such as Squirrel and Wren, both of which have object-oriented paradigm built-in. Otherwise, if embedding to C/C++ isn't the worry, then just choose the one you like! :)**

All of them have standard libraries, though, Lua with it's goal of minimal size, is the smallest, though in a charming in it's own charming way (see the very simple one-web-page manual). **Python's and Ruby's standard librares are literally *the* standards by now, untouchable.**

Lua's like a primitive language that can build features that other languages have, but, it's not built-in, it's all dynamic-feeling, so overall it feels janky, imo. **For general scripting use, not embedding, I much prefer Ruby or Python over Lua, and Ruby over Python**. **Lua is made for embedding,** and it's great at that, whereas **Ruby and Python are made for scripting.**

So, in the end, it'll just be a preference between Ruby vs Python. *Or*: the bajillion newer languages such as Crystal (compiled, static-typed Ruby), Nim (compiled, static-typed Python), Elixer (Ruby + Erlang), or good ol' Haxe, and whatever else out there. Nowadays most compiled languages also have an interpreter, as the interpreter is *much* simpler to create than a compiler.





# a little random research

https://en.m.wikipedia.org/wiki/Scripting_language

from the wiki:
Bash, an interpreted scripting language for use on Unix and Unix-like operating systems and environments.
PowerShell, a scripting language originally for use on Microsoft Windows but nowadays also installable on macOS and Linux.
sed and AWK, two text processing languages used mainly in Unix-like environments.
Perl,[2] a text processing language that later developed into a general-purpose language, also used as an extension language for various applications.
Python, a general-purpose scripting language, also used as an extension language.
Tcl,[3] a scripting language for Unix-like environments, popular in the 1990s for creating GUI applications.
JavaScript (later: ECMAScript), originally a very small, highly domain-specific language, limited to running within a web browser to dynamically modify the web page being shown, that later developed into a widely portable general-purpose programming language.
x/Visual Basic for Applications, an extension language specifically for Microsoft Office applications.
Lua, a language designed for use as an extension language for applications in general, and used as such by many different applications.
Lisp, a family of general-purpose languages and extension languages for specific applications, e.g. Emacs Lisp, for the Emacs editor.



Lisp, Tcl, Rexx are mysteries to me.
  - tcl seeems incredible, surely a predecessor to ruby from 1988! :o
    - "every type can be treated as a string" :o
    - add object-oriented features in 2012
  - Rexx has a simple beauty to it, like Python from 1996
It makes sense that Perl started out as a text processing language..
  - the Lisp family includes: Racket, Common Lisp, Scheme, and Clojure
    - 2nd oldest language
    - Lisp pioneered many ideas in computer science, including tree data structures, automatic storage management, dynamic typing, conditionals, higher-order functions, recursion, the self-hosting compiler,[8] and the read–eval–print loop.[9]
    - The name LISP derives from "LISt Processor".[10] Linked lists are one of Lisp's major data structures, and Lisp source code is made of lists. Thus, Lisp programs can manipulate source code as a data structure, giving rise to the macro systems that allow programmers to create new syntax or new domain-specific languages embedded in Lisp.
      - and so, everything instruction is within parenthesis :o


https://en.m.wikipedia.org/wiki/Domain-specific_language




https://stackoverflow.com/questions/5327340/ruby-vs-lua-as-scripting-language-for-c
  - "I'm not sure if I should use Ruby or Lua. Lua is easier to embed, but Ruby has a larger library, and better syntax (in my opinion). The problem is, there is no easy way I found to use Ruby as scripting language with C++, whereas it's very easy with Lua."
  - "If you think Lua is too simplistic, and Ruby too hard to embed, maybe you should consider Python?"
  - "I've looked at embedding Ruby into C/C++ before, and it seemed extremely difficult. There are a lot of challenges you'll face:
      Calling into Ruby from C/C++ requires 2 layers of functions to be written (one layer to call, and one to catch exceptions)
      Calling back into C/C++ from Ruby requires the normal SWIG-type work
      Moving data back and forth requires keeping careful track of allocations, since Ruby will want to garbage collect anything it can
      I'm sure that this can be done, but it seemed extremely difficult to me, only doable if you can jump into Ruby in a minimum of entry points."
  - "Luabind is really easy to use, there is no need for an external generator like SWIG, the doc is great. Compile times remain decent.
      Biggest problem I've seen : lua is mostly ... write-only. You don't really have classes, but only associative arrays with a bit of syntaxic sugar ( object['key'] can be written object.key ), so you easily end up adding a 'member' in an obscure function, completely forget about it, and have side effects later.
      For this reason, and this reason only, I'd prefer Python. "
    "Not directly related : None of these can be reliably used in a multithreaded environment (so this depends on the complexity of your server).
       N Python threads : the GIL ( Global Interpreter Lock ) is on your way. Each and every time you use a variable in a thread, it's locked, so it kinda ruins the point, except for long I/O operations and calls to C functions.
       lua has coroutines, but they aren't parallelisable.
       Ruby threads aren't really threads, but similar to Lua's coroutines
       Note that you can still create one environement for each thread, but they won't be able to communicate (except with a C++ machinery). This is especially easy in Lua."
   - "The newest versions of Ruby (1.9+) use real system level threads. It does still have a GIL though, which puts it on equal footing with Python."
   - "You may be interested in learning about Squirrel. I believe it was the scripting language used by Left 4 Dead 2. It is more advanced than lua (uses objects and classes) and is meant to easily be embedded in a C++ app, which sounds like exactly what you are looking for."
   - "One thing Lua has going for it is its ability to shuttle data between C++ (or C) and itself very easily. Essentially you're just pushing/popping data onto a stack in order to communicate between the two. Having multiple Lua environments up and running at the same time is quite simple as well (should you need that functionality). Although Lua is a garbage collected language, it's easy to prevent it from doing so on data that needs to stick around in your C++ code. Creating an extensible plugin system should be easy with Lua once you lay the groundwork. Swapping plugins (in this case, scripts) in and out at runtime is also pretty trivial (although this may be true for Ruby as well, I'm not familiar enough with it to know)."
     "One thing to think about is how much object-oriented stuff you want your scripts to be able to handle. Lua uses functions, tables, metatables, and prototypes to implement OO-like programming. Some people like it, some don't; personally I found it interesting to use, if a bit clunky at times. Not having used Ruby, I can't speak for it, but you may want to weigh your need for object/class support."
     "I think in your situation you should also consider how fast you want to get your project up and running. As you and others have noted, Ruby is hard to embed in C++, whereas Lua is not. Time is always precious and if you want to get something working ASAP, Lua is probably your best bet."
     
     


https://www.lua.org/manual/5.4/manual.html
  - the simple manual of Lua
  - the io, os, math classes are all super simple and nice
  - there's one page at the end that covers the syntax, which shows the power of simplicity, as you're not burdened with remember sytax crap
  - from the intro:
"Lua is a powerful, efficient, lightweight, embeddable scripting language. It supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description.

Lua combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is dynamically typed, runs by interpreting bytecode with a register-based virtual machine, and has automatic memory management with a generational garbage collection, making it ideal for configuration, scripting, and rapid prototyping.

Lua is implemented as a library, written in clean C, the common subset of Standard C and C++. The Lua distribution includes a host program called lua, which uses the Lua library to offer a complete, standalone Lua interpreter, for interactive or batch use. Lua is intended to be used both as a powerful, lightweight, embeddable scripting language for any program that needs one, and as a powerful but lightweight and efficient stand-alone language.

As an extension language, Lua has no notion of a "main" program: it works embedded in a host client, called the embedding program or simply the host. (Frequently, this host is the stand-alone lua program.) The host program can invoke functions to execute a piece of Lua code, can write and read Lua variables, and can register C functions to be called by Lua code. Through the use of C functions, Lua can be augmented to cope with a wide range of different domains, thus creating customized programming languages sharing a syntactical framework."








