

https://www.youtube.com/watch?v=xHebvTGOdH8

:tutor
  - tutorial!
  - TODO: on ch. 12 out of 15
    - skipped parts of ch. 5


my own key-mapping additions:
TODO: in fuzzy-search (file picker), j/k - go down/up list
TODO: X = ]p

helix for vs code:
s+[ and s+]
  - select block


https://docs.helix-editor.com/keymap.html


buffer navigation:
  - these are just aliases for commands
bn/bp - next/previous buffer
bc[!]- close
n - new buffer
o - open file
space,f/F - open file with the fuzzy-search file picker

vs - vertical split
vn - new vertical split
hs - horizontal split
hn - new horizontal split


kakoune selection:
select -> action
"Your cursor is like a single-character selection."


vim-like movement/"motions" key-bindings + kakoune selection:

basic movement:
[#]hjlk / arrow keys
  - mostly use hold-j/k for moving down/up
[#]wbe/WBE, next word, back one word, end of word; until next/previous white-space
home/end, beginning/end of line
  - usually use I/A to insert or gh/gs/gl goto, especially as laptop key-boards may not have it)
  - w/e usually include a white-space, use w,b or b,e to select just the word only (no white-space)
f/F - (f)ind and select upto and including next/previous char
t/T - find and select un(t)il/back-until char
  - useful when select repeating chars

; - deselect
  - alt+; seems to flip the cursor position
, - clear multiple cursors

/ and ? - search regex forward/backward in the entire file
  - n/N - next/previous
    - note: ? is superfluous, just use N
  - note: the searched selection is then stored into the /-register
    as long as the register isn't empty, you can use n/N to jump to the next/previous selection that matches the regex
  - note: regex may contain | (or operator)

c+s - save a place to the jump-list
c+i/o - jump to next/previous place in the jump-list
  - note: big jumps (including between buffers/files!!) are automatically saved to the jump-list, so try it out!
  - super useful to **jump between buffers*



* - primary selection
  - by default the / register is selected (same as "/y)
    - puts the selection into the search register (then can n/N through)

v - selection mode, selections now append
  - v - press it again to go back to normal mode
  - v,n/N - appends the next regex-searched match to current selection
    - allows you to **search and replace without selecting first**

s - select matched regex (within a selection)
  - creates cursors at the beginning of each seperate selection
    - (, clear multiple cursors)
  - s,[regex],c - search and replace
    - remember: can use % to select entire file, then search and replace
  - note: regex may contain | (or operator)
  - (/) cycle through primary selections? 
    - alt+- - remove selection from primary selection?
    - todo: these two didn't work..? chapter 10    
  - alt+(/) - cycle selections

S - split selection (with regex)
  - example: '. |! |? ' split by punctuation
  - example: ' - |    - ' split a non-aligned list that uses '-' as bullet points
  



new:
x - select line (c+l in vscode/emacs(?))
  - x,x add another line to selection (super useful!)
  - X doesn't seem to do anything different.. TODO: maybe can re-map it to select to next paragraph (]p)
[ and ] - pop-up menu for common goto next/previous tree-sitter/ast stuff



insert-mode
i/I - insert at beginning of selection/line
a/A - insert at end of selection/line
o/O - insert a new-line below/above and enter insert mode (i)
. - **repeat last insert action**
  - /,r,. **search and replace one-by-one**

also similar to vim:
d - delete
  - remember: no vim d#/dd nor y#/yy combos, #[motion]d/y instead
c - change (or d,i to clear selection and insert)
  - note: delete and change actions copy deleted text to the default yank register
    - alt+d/c - don't copy deleted text to register
r - replace
  - repeats char when the selection is bigger than a single char
    - useful for ascii art/images
R - replace selection with yanked text
  - TODO: may have to switch these keys around..

y - yank (copy)
p/P - paste before/after cursor
  - note: helix doesn't use the system clipboard
  - space,y/Y/p/P - yank/paste to system clipboard
    - Y - yanks "main selection?" as opposed to selections??

u/U - undo/redo


formatting:
</> - indent
J - join selection of lines into a single line
  - **perfect for badly formatted pasted new-lines!**
C/a+C - add a cursor below/above
    - useful for editing vertically-aligned lists
& - align
  - TODO: in chapter 5
= - format?
  - TODO
c+a/c+x - increment/decrement number
    - **very cool interactivity idea, especially for game vars**
~/`/a+` - invert case/set to lower-case/set to upper-case

programming-language-oriented formatting:
c+c - comment/un-comment
m - match surrounding braces mode pop-up
  - mm - go to matching brace
  - ma/d/r - add/delete/replace braces
  - mi/a - TODO: STOPPED HERE


registers:
  - "Registers are containers identified by a character for storing things like yanked text. Registers are also used to store the most recent search term as well as macros"
"[char] - select a register 
  - also triggers a pop-up list of registers with values
  - great for pasting various yanked texts

macros:
Q - start/stop recording a macro
  - by default, selects the @ register
    - ("[char]),Q - can select a register first
q - run macro
  - make sure the cursor is set at the right position!














  

https://stackoverflow.com/questions/7409134/english-mnemonics-to-vims-shortcuts
  - TODO: learn some more

new:
alt+. - repeat motion
[f and ]f - prev/next function
[c and ]c - prev/next class
[a and ]a - prev/next parameter

theme

modes:
from vim:
esc normal-mode
: command-mode

  
v visual-mode (select), from vim
  - note: can also make selections in normal-mode, from emacs
  - s select-mode, search within selected text

new:
' ' space-mode, from emacs (or just doomemacs/spacemacs?)
  - ?, command list
  - a, code action list
  - f, file picker like telescope
  - s/S, symbol picker
  - r, rename symbol
  
g goto-mode
  - will naturally teach you the motions, just have to go to visual mode
  - ., **last modification**
  - a, **last accessed file**
  - h/s/l, begin/start/end of line
  - d/D/i, definition/declaration/implementation
  - r, reference via picker
  - e, end (f+down)
  - n/p, next/previous buffer
",char register list
  - yank something into a char/key-press's register




paste from clipboard
c+s+p

