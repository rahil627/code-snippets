
see notes in cli-shells.txt

plugin lists:
https://github.com/jorgebucaran/awsm.fish
  - done going through these
https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins
  - ohmyzsh is a community-maintained list of plugins
    - there's way too many, but i think you choose which ones to install..?
  - can go through these once in a while and look for fish alternatives

shorcuts:
https://fishshell.com/docs/current/interactive.html
  - seems like the most useful page

see config.fish for my bindings and notes
https://www.reddit.com/r/fishshell/comments/16hjcpo/is_there_a_way_to_alias_a_batch_of_commands/
  - ways to config fish (my post)

the way i config fish:
i keep a single file with all the 'abbr' expansions and `alias` commands (which create simple functions), and also `source` another file which contains all of the longer functions.
the fisher plugin will add functions to the functions folder, usually prepend `_`

https://www.reddit.com/r/fishshell/comments/16hjcpo/comment/k1eqln1/?context=3
  - post-3.6.0 abbr only exist per session unless you write them in config.fish
    - this makes handling aliases/abbr better, as you don't have to manage deleting old aliases (functions)



tab-completion (c+i?)
[tab]
  - list all commands
partial-command[tab]
  - list all commands (with descriptions!) starting with...
command -[tab]
  - list all flags (with descriptions!)
cd[tab]
  - list directories


when typing in a file-path, the dir/file-names are fuzzy-searched
for example: .config/a-long-name, search .c[tab]/long[tab]

* expands:
rm f*[tab] -> rm f1 f2 f3 file4 fanything

/ (and c+r when using the default/emacs-like key bindings)
  - fuzzy search command history

c+i
  - fuzzy'ish search commands
  - **with one-liner description!!!**
    - **also provides a list of flags!!!**

[ and ]
  - fuzzy search using the word beneath the cursor

a+left, a+right
  - go to previous/next directory
  - prevd/nextd command

dirh
  - directory history
cdh
  - cd history

funced function-name
  - edit a function (for the shell session)
funcsave function-name
  - then save the edited function (for good)

TODO: may have to run funcsave after functions --erase

advanced:
function (command)
  - can run functions on events





fish language:
see learn x in y minutes website

echo (command)
  - command substitution
  - bash and ruby use `command` syntax

NOTE: $path ~= $PATH, use $ALL_CAPS

test $some-int -eq 1


config files:
~/.config/fish/
  - main dir

~/.config/fish/config.fish
  - main config file, i think can just throw everything in here

~/.config/fish/fish_variables

~/.config/fish/conf.d/
  - empty, maybe for keeping modular config files?

~/.config/fish/functions/
  - each function has it's own file
  - thus far, all of my functions were auto-generated either from aliases or plug-install
  - otherwise, you'd have to track which ones i made and remember to save to dotfiles! :/

~/.config/fish/completions/
  - ?


aliases:
alias rm='rm -vi'
  - adds an alias (temporary function?) to current sessions memory
alias -s rm='rm -vi'
  - saves it into a function in ~/.config/fish/function/
functions --erase rm
  - remove an alias, and hopefully function too?

abbr:
expands text, for example rm -> rm -vi after presing enter/space/etc.


bindings:
bind
  - use 'bind' command to see bindings


add to $PATH env var:
fish_add_path ~/path/to/bin

remove a path is missing?? wtf:
https://superuser.com/questions/776008/how-to-remove-a-path-from-path-variable-in-fish/1212305#1212305
echo $fish_user_paths | tr " " "\n" | nl // get the number of the one you want to delete, e.g. the 5th one
set --erase --universal fish_user_paths[5]

