
to make the background transparent:
create a themes folder in the helix config directory
create a new theme: transparent_default.toml
add these two lines in the file:
  inherits = "default"
  "ui.background" ={}

in case you have a custom theme.toml, look for this line:
  "ui.background" = { fg = "foreground", bg = "background" }
remove the bg key
  

https://www.reddit.com/r/HelixEditor/comments/14vqm19/share_your_helix/
  - TODO: edit config some more
  - add languages.toml file


https://www.youtube.com/watch?v=xHebvTGOdH8






:tutor
  - tutorial!
  - TODO: on ch. 12 out of 15
    - skipped parts of ch. 5




my own key-mapping additions:
TODO: in fuzzy-search (file picker), j/k - go down/up list

helix for vs code:
s+[ and s+]
  - select block


https://docs.helix-editor.com/keymap.html

terms:
"picker" = fzf-like fuzzy searchable list

not in the tutor(ial): TODO: PR add these the tutorial!
shift+alt+'-/+' - open a h/v-split terminal 



normal-mode
all other modes
  - esc - go back to normal mode
    - note: re-map caps-lock to esc in the OS

: command-mode
  - provides a fuzzy search completion
  -> o/open - open file
  -> sh/run-shell-command - hmmm, brings up file tree..? TODO
  -> theme
  -> toggle-option
  -> get/set-option

doom-emacs-like space-bar pop-up menus:
space - root pop-up menu leads to other pop-up menus, pickers, special lsp/ast actions
  -> ? - **command pallette** (picker of all commands)
  -> / - **grep in current folder**
  
  -> f/F/j/s/S/d/D - various pickers
  -> ' - **open last picker**
  
  -> y/Y/p/P/R - yank/paste/replace using system clipboard
  
  -> c/C/a+c - comment/block/line comment selection
  
  -> a - **perform code action**
  -> r - rename symbol
  -> h - select symbol references
  -> k - show docs for item under cursor


windows/splits/panes:
  - note: the app can be split into multiple "windows", seperate from buffers
  - note: i created my own key-maps for navigating, opening, 'n closing panes
c+w - window combo key/pop-up menu
  -> n -> v/s / c+v/c+s - split current pane vertically/horizontally
      - NOTE: currently binded to paste/save
  -> v/s - vertical/horizontal split current pane TODO: github issue, why not h?
  -> q/c+q - close split
  -> o/c+o - close all other windows
  -> f/F - goto file in selection v/h-split TODO: dunno

  split navigation:
  -> w/c+w - **cycle to next window**
  -> hjkl/c+hjkl

  -> HJKL - swap panes

  some common split aliases:
  :vs - vertical split
  :vn(ew) - new vertical split TODO: pull request for shortcut?
  :hs - horizontal split
  :hn - new horizontal split


buffer navigation:
note: i created my own key-maps for navigating, opening, 'n closing buffers
note: opened buffers can be loaded into any window/split (the logic is a little different from tabbed editors)
try cycling through buffers (left/right arrows) on the right vertically split window
get used to quickly opening new window splits, selecting a buffer, 'n closing it

space+b - **buffer picker**
  - simpler to use this for changing/searching buffers

right/left arrows - **next/previous buffers**

some common buffer aliases:
:n - new buffer
:bn/bp - next/previous buffer
:bc[!]- close buffer
:o - open file



kakoune selection:
select -> action
"Your cursor is like a single-character selection."


vim-like movement/"motions" key-bindings + kakoune selection:

basic movement (and selection):
[#]hjlk / arrow keys
  - **mostly use hold-j/k for moving down/up**
[/] - goto pop-up menu for next/previous tree-sitter/ast stuff
  -> p - **paragraph**
    - the main one that doesn't require a lsp
  -> f/t/a - function/type definition/argument (TODO: the menu says parameter instead of argument)
g - goto pop-up menu
  -> ., **last modification**
  -> a, **last accessed file**
  -> h/s/l, **begin/start/end of line**
     - useful for deleting the rest of a line
  -> d/D/i, definition/declaration/implementation
  -> r, reference via picker
  -> e, end
  -> n/p, next/previous buffer

basic selection:  
[#]wbe/WBE, next word, back one word, end of word; until next/previous white-space
home/end, beginning/end of line
  - often use I/A to insert or gh/gs/gl goto, especially as laptop key-boards may not have it)
  - w/e usually include a white-space, use w,b or b,e to select just the word only (no white-space)
x - select line (c+l in vscode/emacs(?))
  - x,x add another line to selection (super useful!)
  - X doesn't seem to do anything different.. TODO: maybe can re-map it to select to next paragraph (]p)
f/F - (f)ind and select upto and including next/previous char
t/T - find and select un(t)il/back-until char
  - useful when select repeating chars

; - deselect
  - alt+; seems to flip the cursor position
, - clear multiple cursors

/ and ? - search regex forward/backward in the entire file
  - n/N - next/previous
    - note: ? is superfluous, just use N
  - note: the searched selection is then stored into the /-register
    as long as the register isn't empty, you can use n/N to jump to the next/previous selection that matches the regex
  - note: regex may contain | (or operator)

space+j - open jump-list picker
  - intuitive way to see and understand how the jump-list works
c+s - save a place to the jump-list
c+i/o - jump to next/previous place in the jump-list
  - note: big jumps (including between buffers/files!!) are automatically saved to the jump-list, so try it out!
  - super useful to **jump between buffers*



* - primary selection
  - by default the / register is selected (same as "/y)
    - puts the selection into the search register (then can n/N through)

v - selection mode, selections now append
  - v - press it again to go back to normal mode
  - v,n/N - appends the next regex-searched match to current selection
    - allows you to **search and replace without selecting first**

s - select matched regex (within a selection)
  - creates cursors at the beginning of each seperate selection
    - (, clear multiple cursors)
  - s,[regex],c - search and replace
    - remember: can use % to select entire file, then search and replace
  - note: regex may contain | (or operator)
  - (/) cycle through primary selections? 
    - alt+- - remove selection from primary selection?
    - todo: these two didn't work..? chapter 10    
  - alt+(/) - cycle selections

S - split selection (with regex)
  - example: '. |! |? ' split by punctuation
  - example: ' - |    - ' split a non-aligned list that uses '-' as bullet points
  


insert-mode (vim-like):
i/I - insert at beginning of selection/line
a/A - insert at end of selection/line
o/O - insert a new-line below/above and enter insert mode (i)
. - **repeat last insert action**
  - /,r,. **search and replace one-by-one**

editing
d - delete
  - remember: no vim d#/dd nor y#/yy combos, #[motion]d/y instead
c - change (or d,i to clear selection and insert)
  - note: delete and change actions copy deleted text to the default yank register
    - alt+d/c - don't copy deleted text to register
r - replace
  - repeats char when the selection is bigger than a single char
    - only useful for special cases: ascii art/images
R - replace selection with yanked text
  - TODO: may have to switch these keys around..

y - yank (copy)
p/P - paste before/after cursor
  - note: helix doesn't use the system clipboard
  - space,y/Y/p/P - yank/paste to system clipboard
    - Y - yanks "main selection?" as opposed to selections??

u/U - undo/redo


formatting:
</> - indent
J - join selection of lines into a single line
  - **perfect for badly formatted pasted new-lines!**
C/a+C - add a cursor below/above
    - useful for editing vertically-aligned lists
& - align
  - TODO: in chapter 5
= - format?
  - TODO: ??
c+a/c+x - increment/decrement number
    - **very cool interactivity idea, especially for game vars**
~/`/a+` - invert case/set to lower-case/set to upper-case

programming-language-oriented formatting:
c+c - comment/un-comment
m - match surrounding braces mode pop-up
  - mm - go to matching brace
  - ma/d/r - add/delete/replace braces
  - mi/a - TODO: STOPPED HERE


registers:
  - "Registers are containers identified by a character for storing things like yanked text. Registers are also used to store the most recent search term as well as macros"
"[char] - select a register 
  - also triggers a pop-up list of registers with values
  - great for pasting various yanked texts

macros:
Q - start/stop recording a macro
  - by default, selects the @ register
    - ("[char]),Q - can select a register first
q - run macro
  - make sure the cursor is set at the right position!














  

https://stackoverflow.com/questions/7409134/english-mnemonics-to-vims-shortcuts
  - TODO: learn some more

new:
alt+. - repeat motion

  
