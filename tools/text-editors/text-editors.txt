
looking for:
sane defaults
  - don't want to waste time configing all day, need to focus!
inuititive learning experience
  - quick to re-learn and jump deep into again
unrestrictive

conclusion:
x/0. doom emacs
  - potential is unlimited thanks to emacs, but emacs is not a wormhole i'm willing to invest in at my current later age
  - TODO: still should try it some more
?. focus (editor)
  - TODO: try it, though it'll be tough for one person to beat the rust hive-mind helix has
1. helix (or other fav terminal editor / key-bindings)
  - for quick general use, along with cli tools, remote terminal use, a good step towards emacs
  - adds tree-sitter
  - supports lsp and dap!!
  - https://www.reddit.com/r/HelixEditor/comments/1b9gpz9/three_things_that_helped_me_make_the_switch_to/
    - an emacs user switches to helix and mentions some good plugins
    - TODO: try them!
  - TODO: a version with a file-tree feature is on a git branch
2. vs-code
  - a great start, especially when you haven't coded in a while
  - easy to jump into where everything *just works* with "batteries-included"
  - can use fav key-bindings extension ("helix for vscode" extension), or customize keys yourself
vs-studio
  - for it's advanced features: deep debugging, run-time stuff, etc.
sublime text or notepad (windows)
  - for simple, non-key-oriented editing?
  - TODO: try it

(TODO: knowledge-base software for bigger, conceptually-linked sets of text??)



gui editors:
newer, simpler, things to try:
**focus (editor)**
  - a simpler emacs-style editor
  - made with jai
4coder
  - part of the handmade-hero movement
    - therefore written in C/C++, and also therefore **can be extended using just about any programming langauge**
x/lapce
  - a vs-code copy in rust
    - in development?
    - incredible speed
    - likely will become abandoned after the rust-wave
kate
  - linux, open-source
  - ??


current standard:
**vs code**
  - made using electron (web stack rendered by chromium/node.js)
  - so dominant that it made most other editors abandonware
    - cross-platform, open-source, community-oriented, electron/web-style-dev, all helped it sky-rocket past previous-gen text editors
  - has extensions for all of the classic key-bindings
    - **"helix for vs-code"** is amazing, merging helix bindings with vs-code bindings and gui cursor
  - plugins are a bit of a pain to make, especially compared to the lisp-extending experience, thus creating a barrier between you and and the ideal editor experience


old standards:
(note: i missed out on the atom vs sublime generation)
**sublime text**
  - the best simple gui text editor, replacing notepad++
  - perhaps the most loved text editor pre-vs-code, the real victor vs atom, but eventually lost to the momentum of vs-code's community
  - "It's a much nicer editor but clunky vscode has a better on boarding experience (I see you coding x, would you like to install this extension to help with x). Whereas with sublime you have to do a lot of hunting and manual installation to get all set up with extensions.
    And frankly vscode is where the community is at, which means that's where almost all the extension dev is happening.
    There is some effort to piggyback off vscode in sublime via language servers which is hopeful. Vscode's extension in sublime would be best of both worlds.
    I bought sublime before vscode existed. I use both. Working on a Hugo static website right now and use vscode for html & css but sublime for the markdown based content."
      - https://www.reddit.com/r/SublimeText/comments/m1g9x9/newbie_is_sublime_text_better_than_visual_studio/
  - **designed for speed and simplicity**
    - **written in C++**, scripted in python
  - shareware (not open-source, but free?)
x/atom
  - the electron framework was created in the process of making this
  - ...people don't seem to have liked this one.. probably for the same reasons they don't like vs-code..
(probably missing some others here)

classics:
notepad++
  - a windows classic, same as ever, still cute and functional for an old 90s thing
textmate
  - a mac classic
notepad2
  - a classic windows notepad replacement



cli/terminal editors:
mostly for the key-bindings, then can use an associated extension on vscode
also provides a clutter/distraction-free experience

**helix**
  - the best of all past worlds: vim, doom-emacs, and kakoune
    - doom-emacs's intuitive pop-up menus
    - vim-like key-bindings, but more intuitive, lower learning curve, less key-bindings, and perhaps even less key-strokes
    - kakoune style selection -> action flow (vs vim’s action -> selection flow)
  - fantastic sane defaults with the most essential features already built-in
  - "helix for vscode" extension to ease transition / aid in using both at the same time
    - TODO: ...no pop-up menus tho..?
  - rust
    - much much much better than vim script (and lua), but not so sure how it compares to elisp, as lisp is quite the ideal langauge for providing a simple way to extend the program

classics:
emacs
  - much more than a text editor, it's basically an OS!
  - elisp macros
    - actually a joy to use (especially when compared to vimscript!)
    - because it's lisp, you're basically writing the program itself, not merely some plugin manager
  - mature, well-written plugins
  - org-mode
  - "m-x is godsend"
  - slow startup time
  - **doom-emacs**
    - a great starter config that makes a really nice onboarding experience
    - *i really really liked this, found it very quick to find and precisely just what i needed*
    - **intuitive space-bar menu to ease learning**
    - evil-mode to use vim-keybindings
  - x/prelude
      - a light-weight starter kit closer to vanilla emacs, in case doom is too much, or if i want to make my own
  - every person that i've known that uses emacs is a great great programmer/problem-solver/maker
  - emacs itself is speghetti, and as there are no other great alternatives (that can compete with it's power/flexiblity/ease-of-extending), they get so deep into it, that there's no reason to use another tool

(neo)vim
  - vim
    - modal (normal, insert, visual/select, command)
    - *heavily* key-board input user interface
      - i personally feel more comfy using a touch-screen/mouse/keyboard combo
  - lua scripting for configs 'n plugins!
    - used to be in an archaic language: vimscript, which killed it
  - horrendous amount of time wasted starting out from scratch, reminiscent of the terrible linux config experience, but worsened by archaic language and the unprofessional open-source community it attracts
    - thus better to try various starter configs with sane defaults
  - bad learning curve, especially from vanilla neovim





IDEs:
mostly langauge-specific

generally adds these features: integrated interactive debugger, profiler, advanced code completion, advanced refactoring, better file navigation (go to definition in deep libraries 'n back), tasks runner (including tests), database integration
  - though, nowadays, with LSP an DAP protocols gaining popularity, only the most advanced features make IDEs stand out

**vs studio**
  - the standard advanced IDE with the most features
    - it's combo with C# set the standard for IDEs
  - seems to be mostly focused on C/C++/C# compared to other langs..??
  - microsoft
    - therefore took a long time before making vs-mac

various IDEs by JetBrains
seems to fill the gap vs-studio has left with other languages
recently seperated into language specific IDEs:
https://www.jetbrains.com/ides/
  - rubymine
    - ruby, the standard for it
  - rider
    - c#, games?
  - intellij
    - java, jvm langs?, the standard for it
      - i think this was their first/main editor that started their business
  - pycharm
    - (python)
  - etc.




https://pawelgrzybek.com/the-joy-of-learning-helix-and-probably-other-modal-terminal-based-editors/
  - todo: read



https://www.reddit.com/r/ruby/comments/11ji4u7/rubymine_or_vs_code_extensions_for_debugging_in/

I keep trying to switch off of Rubymine and I keep going back. Debugging in Code is good enough, like no issue, once you find the right combination of articles to help you set it up. Autocomplete, intellisense, and similar are much worse, whether you use Solargraph or Sorbet + Ruby-LSP, and there are essentially zero refactoring actions. But the real killer feature for me is that Rubymine let’s me search, add breakpoints in, or jump to a definition in gems used in my application.

But the real real killer feature is that it all just works, no hassle. Sure it’s a little sluggish sometimes. Sure the interface is a lil heavy. Sure the plug-in ecosystem is way less active. I got work to do, damnit.


https://www.reddit.com/r/ruby/comments/bq95m6/so_thoughts_between_vscode_vs_rubymine/

VSCode sits somewhere between Sublime/Atom and Rubymine. It's not a full IDE, nor will it ever be, but it has a lot of the features a full-featured IDE would have. I used it for a while but just switched away from it, simply because there are UI things that really bother me, like the fonts support, particularly in the sidebar and the search. I work on projects with thousands of files and a hard-to-read search just doesn't work for me. And the ruby/rails support is sub-par, at best, compared to others.

I've found Atom can do everything VSCode did for me (though maybe not for others) and it looks better, which makes me more willing to spend time in it. Sure, that's not everyone's requirement, but it is for me.

I switched away from Sublime to VSCode, not because Sublime was bad, but I needed a change. But Sublime is absolutely the best in terms of speed.

I personally don't find the need for something like Rubymine, but I've been writing Rails code for, jeez, 10+ years. It just gets in my way and never does what I think it should do. But it may be for you. VSCode is free, and Rubymine has a trial/demo. Try them. Spend a week or two with each. You'll find things you like and don't like about both. Everyone's needs and wants are different, and there are reasons some people love VIM over anything else. Just try them out.
