
# looking for:
sane defaults
  - don't want to waste time configing all day, need to focus!
inuititive learning experience
  - quick to re-learn and jump deep into again
a simple language to write extensions
  - (and a simple way to add extensions!!)
unrestrictive
  - see the "four pillars" below

https://www.reddit.com/r/emacs/comments/124eyh6/things_your_editor_should_have_with_amir_rajan/
  - four pillars:
    - 1. can see the function when you press a button
    - 2. can set a key to a series of functions: a macro
    - 3. **can create your own function**
      - the most important
    - 4. can see the source code
    additional pillars:
    - 5. written in lisp or smalltalk or a similarly powerful interactive dev runtime

  - tests:
    - vscode
      - no? (maybe there's an extension..?), probably, **yes, but not simple** (have to write an extension), sure (but hella complex), no
    - helix
      - no (can request 'n discuss), yes, **not yet (but even then, limited to the api/interface provided to the scripting lang)**, yes, sorta (limited to api)
    - **lem**
      - likely, sure, **yes!**, yes, yes
    - **emacs**
      - of course yes to all, though you probably wouldn't want to look at the source code..
  

# conclusion:
*. focus (editor)
  - in. fucking. credible. finally. a god damn text editor that doesn't slow down the marvel of contemporary machinery!! gamers make the best shit.
  - no key-bindings to learn, just jump in and type.
1. emacs (doom)
  - potential is unlimited, written in lisp, one tool-set to rule them all, but it just sounds like the wrong rabbit hole to go into in 2024
    - https://www.reddit.com/r/emacs/comments/1fh999a/is_emacs_still_the_one_in_2024_or_how_did_we_end/
    - TODO: still should try it some more, also will get the chance to try lisp (via elisp) and have the best lisp dev environments too (common lisp, clojure)
      - TODO: try portacle config for common lisp
*. lem
  - BUGGY as of 10/4/2024
  - looks like a great way to try common lisp without emacs
    - actually kind of a dream editor, writing tiny programs in sbcl..
  - also can be completely altered as it is written in common lisp, making it the most malleable text editor
2. helix
  - for quick general use, along with cli tools, remote terminal use, a good step towards emacs
  - https://www.reddit.com/r/HelixEditor/comments/1b9gpz9/three_things_that_helped_me_make_the_switch_to/
    - an emacs user switches to helix and mentions some good plugins
    - TODO: try them!
  - TODO: a version with a file-tree feature is on a git branch
  - scheme scripting coming soon!!
2. vs-code (or lapce)
  - TODO: give lapce another try!
  - a great start, especially when you haven't coded in a while
  - easy to jump into where everything *just works* with "batteries-included": file manager, terminal window, debugging window, zen-mode, etc.
  - can use fav key-bindings extension ("helix for vscode" extension), or customize keys yourself
  - eats up cpu, memory, etc.
vs-studio
  - for it's advanced features: deep debugging, run-time stuff, etc.
sublime text or notepad (windows)
  - for simple, brain-less editing
  - TODO: try it

(TODO: knowledge-base software for bigger, conceptually-linked sets of text??)



# gui editors:
## newer, simpler, things to try:
lem
  - unfortunately, buggy as shit: crashes when a pop-up window is open and you alt+tab away :( i was very close to really getting into lisp-mode too!!
  - still... quite a great introduction to lisp, as there aren't too many functions (unless you're hacking at the core of the editor..), and you can quickly write your own functions and map them to commands 'n keys, all in a few lines, all in one file... simple..!
    - though, if you're only using the functions given, then it would be no different than using helix and writing scripts with the functions it provides..
  - https://www.reddit.com/r/emacs/comments/1b4a2tq/what_do_you_guys_think_of_the_lem_ide/
    - emacs default key-mappings, Dired-like file explorer, Projectile-like stuff, Paraedit-like structured edit... sounds like it basically learned and took the good things from emacs with it
  - completely written in common lisp (sbcl?)
    - (emacs has a C core, particularly for it's display)
    - **and thus can be extended or completely altered in common lisp too :)**
    - fast, compiled
    - modular front-end: sdl2 for gpu-powered gui, ncurses for terminal
    - **great CFFI, thus easily allowing easy access to all C libs**, "which makes the world your oyster"
      - why doesn't emacs have it?
        - https://www.reddit.com/r/emacs/comments/16396v0/why_doesnt_elisp_have_a_c_ffi/
          - "I've been wondering why there isn't a C FFI which would eliminate the need for new C code to be written for every library integration, and which would allow everything to be written in elisp.""
          - "Political Reasons...However, I do agree that CFFI would have been helpful, not because it would make for less code, but because it would enable people to implement extensions without needing to wait for devs to make it available through the official release.
            Observe that tree-sitter was available as a module before it was available in the core, but for some reason, modules are not a thing in the Emacs community."
          - "As for FFI it is handy but it lacks compile time checking. It's not always easy to use ie converting pointers and C types. Emacs also has Emacs C modules which works nicely if you need to interface with C."
    - smaller, more manageable code-base
      - doesn't plan to become an OS
    - common problems of new projects: lack of docs, bugs, etc.
  - made specfically for common lisp, though it can support any lang
  - made by a Japanese person!

4coder
  - part of the handmade-hero movement
    - therefore written in C/C++, and also therefore **can be extended using just about any programming langauge**
**lapce**
  - a vs-code copy in rust
    - already has advanced features: modal lsp, remote dev, built-in terminal..
  - felt quite in development when i tried it last..
  - incredible speed
  - "Plugins can be written in programming languages that can compile to the WASI runtime (C, Rust, AssemblyScript)"
    - this is it's limiting factor, though AssemblyScript actually looks just like javascript!
    - although plugins can be written in AssemblyScript, it seems like first api's must be written in it's core language first: rust, therefore, in termas of hackability, it's less hackable than vs-code, which it is directly competing..


## smalltalk is back!?!?
**glamourous toolkit**
  - kind of **the emacs of smalltalk**, but made in ~2020?, after 6 years of dev, 14 years of research
    - "It seems an editor/database query engine/ browser with a object oriented language Pharo as control/scripting language, while emacs is an editor with emcas-Lisp as the scripting language."
  - *the moldable development environment*: uses the features of smalltalk, especially it's built-in IDE, as tools to create your own specific applications: like for code-base exploration/documentation, build an editor, etc.
    - https://lepiter.io/feenk/what-exactly-is-glamorous-toolkit-v1-0--7sex44dze2dqlocqxwfz8ju0i/
      - "Our goal is to make systems explainable by means of custom tools created for each problem. Glamorous Toolkit makes this possible by making the creation of custom tools inexpensive and seamless."
      - "A central component in GT is Lepiter, the knowledge management system."
  - built on Pharo, though it's a project of it's own
    - renders crisply to retina displays compared to Pharo's native ui
    - "GToolkit uses a completely parallel graphics stack to standard Pharo. The VM and library ecosystem are still there but the UI is rebuilt from scratch on a modern vector based toolkit.
    
      The productivity of the GToolkit developers is impressive."


## current alts
**focus (editor)**
  - the best text editor experience i've had in quite some time.. a sort of zen text editor but intended for programmers, absolutely replacing all the old trusty fallbacks (notepad2/notepad++/sublime)
  - incredible speed, incredible defaults, incredibly simple, lives up to it's name and induces focus
    - learn everything in 5 minutes: find file via fuzzy search, set up workspaces, command prompt, config
    - great little view mode (c+a+arrow keys)
    - some sane defaults (and great sense of design) include:
      - infinite undo-history for all files during the session, even after closing it..??
      - jumping the cursor back after highlight or viewing
      - saving config reloads it
      - diff on the scroll bar
        - i forgot how gooood scrolling felt..!
  - **made with jai**
  
**helix**
  - the best key-bindings/keyboard-interface of all past worlds: vim, doom-emacs, and kakoune
    - doom-emacs's intuitive pop-up menus
    - vim-like key-bindings, but more intuitive, lower learning curve, less key-bindings, and perhaps even less key-strokes
    - kakoune style more interactive workflow: selection -> action flow (vs vimâ€™s action -> selection flow): wd vs dw
  - fantastic sane defaults with the most essential features already built-in, config-free(!!): tree-sitter, lsp, dap
  - "helix for vscode" extension to ease transition / aid in using both at the same time
    - TODO: ...no pop-up menus tho..?
  - vi/terminal/buffer style navigation: file picker, buffers and buffer list, jump markers and jump lists
  - rust
    - truly a force of reckoning those people
  - scheme scripting
    - !!!, finally, get to use lisp :) 
    - https://github.com/helix-editor/helix/pull/8675
  - until the scripting feature is out, it lacks a lot of things that would likely become scripted plugins: file manager, more advanced debugging, etc.
  - though it will have lisp scripting, it is written in rust, and thus not really malleable as a program written entirely in a scripting a language, and definitely nowhere close to a program written entirely in lisp. in hackabilty, it's worse than vs-code, which is written entirely in a scripting language: javascript

## current standard:
**vs code**
  - made using electron (web stack rendered by chromium/node.js)
  - so dominant that it made most other editors abandonware
    - cross-platform, open-source, community-oriented, electron/web-style-dev, all helped it sky-rocket past previous-gen text editors
  - has extensions for all of the classic key-bindings
    - **"helix for vs-code"** is amazing, merging helix bindings with vs-code bindings and gui cursor
  - plugins are a bit of a pain to make, especially compared to the lisp-extending experience, thus creating a barrier between you and and the ideal editor experience
  - simple, easily-recognizable os-like gui: tabs, show/hide panels/windows

old standards:
(note: i missed out on the atom vs sublime generation)
**sublime text**
  - the best simple gui text editor, replacing notepad++
  - perhaps the most loved text editor pre-vs-code, the real victor vs atom, but eventually lost to the momentum of vs-code's community
  - "It's a much nicer editor but clunky vscode has a better on boarding experience (I see you coding x, would you like to install this extension to help with x). Whereas with sublime you have to do a lot of hunting and manual installation to get all set up with extensions.
    And frankly vscode is where the community is at, which means that's where almost all the extension dev is happening.
    There is some effort to piggyback off vscode in sublime via language servers which is hopeful. Vscode's extension in sublime would be best of both worlds.
    I bought sublime before vscode existed. I use both. Working on a Hugo static website right now and use vscode for html & css but sublime for the markdown based content."
      - https://www.reddit.com/r/SublimeText/comments/m1g9x9/newbie_is_sublime_text_better_than_visual_studio/
  - **designed for speed and simplicity**
    - **written in C++**, scripted in python
  - shareware (not open-source, but free?)
x/atom
  - the electron framework (see the relation in it's name?) was created in the process of making this
  - tree-sitter was also developed by github for the project
  - ...people don't seem to have liked this one.. probably for the same reasons they don't like vs-code..
  - though historically important, basically replaced by vs-code, since microsoft had acquired github..
  - made by github!!
(probably missing some others here..)

basic gui classics:
kate
  - a linux classic?
notepad++
  - a windows classic, same as ever, still cute and functional for an old 90s thing
textmate
  - a mac classic
notepad2
  - a classic windows notepad replacement




classics:
notably, most current text editors still use the key-bindings from these two editors: neovim for modal text editing and emacs for non-modal. So, once you learn one of them, you can use an associated extension on vscode. Though, i think vscode derives from emacs

though both originally were cli/terminal apps, now emacs is a gui, and even neovim has neovide (rust)

**emacs**
  - much more than a text editor, it's basically an OS! based on around text buffers
    - **this has the great benefit that everything is written in the same language, morever, the most dynamic language of all time. Otherwise, you'd have to use an entire set of tools, wherein each tool can be writtern in a different langauge, have different onpinions, and just not work as seamlessly together: terminal, terminal multi-plexer, text editor, git tui, file-manager tui, knowledge-base tui, and so on.**
      - **at the moment, for me, all of the tools i use are now written in rust, which is infinitely harder than lisp to edit, let alone develop.** The language itself is complex, along with it's memory-management model, and it's build process.. It's all a pain. Whereas with emacs, you just need to know one language, no memory-management, no build-process(?)
      - also, simply, **none of the other languages are as dynamic as lisp**: you can't simply just create a function for the program. For every C-like program, including rust, an interface (ffi) is required, and then another dynamic language is used (lua, lisp). In that case, why not just use lisp to begin with..?? **Lisp just seems like the right choice for programmers' tools.**
      - i think this thought continued to this reddit post i made:
        - https://www.reddit.com/r/emacs/comments/1fh999a/is_emacs_still_the_one_in_2024_or_how_did_we_end/
  - elisp macros
    - actually a joy to use (especially when compared to vimscript!!)
    - because it's lisp, you're basically writing the program itself, not merely some plugin manager
  - mature (possibly the oldest of all currently used code), well-written plugins
    - **org-mode**
      - the ultimate knowledge-base software, simple yet powerful
      - **org-babel**
        - can combine programming languages, using the output of one as the input of another, perhaps similar to the much much later jupyter notebooks
    - magit
      - the best git experience
    - auctex
      - the best latex experience
    - slime (common lisp), geiser (scheme), cider (clojure)
      - the best lisp dev environemnts
      - **portacle** is an emacs config set up for common lisp dev
  - "m-x is godsend"
  - slow startup time
  - **doom-emacs**
    - a great starter config that makes a really nice onboarding experience
    - *i really really liked this, found it very quick to find and precisely just what i needed*
    - **intuitive space-bar menu to ease learning**
    - evil-mode to use vim-keybindings
  - x/prelude
      - a light-weight starter kit closer to vanilla emacs, in case doom is too much, or if i want to make my own
  - every person that i've personally met that uses emacs is a great great programmer/problem-solver/doer
  - emacs itself is a deep pot of speghetti, and as there are no other great alternatives (that can compete with it's power/flexiblity/ease-of-extending), they get so deep into it, that there's no reason to use another tool

  https://batsov.com/articles/2024/02/27/m-x-reloaded-the-second-golden-age-of-emacs/

(neo)vim
  - vim
    - modal (normal, insert, visual/select, command)
    - *heavily* key-board input user interface
      - i personally feel more comfy using a touch-screen/mouse/keyboard combo
      - it's legacy is based on it's key-mappings: modes, motions, actions, etc.
  - lua scripting for configs 'n plugins!
    - used to be in an archaic language: vimscript, which killed it
  - horrendous amount of time wasted starting out from scratch, reminiscent of the terrible linux config experience, but worsened by archaic language and the unprofessional open-source community it attracts
    - best to try various starter configs with sane defaults
  - a very very bad learning curve, especially from vanilla neovim. bad for learning the key-bindings. bad for setting up for development. bad for finding good souces to do everything. just plain bad.





IDEs:
mostly langauge-specific

generally adds these features: integrated interactive debugger, profiler, advanced code completion, advanced refactoring, better file navigation (go to definition in deep libraries 'n back), tasks runner (including tests), database integration
  - though, nowadays, with LSP an DAP protocols gaining popularity, only the most advanced features make IDEs stand out

**vs studio**
  - the standard advanced IDE with the most features
    - it's combo with C# set the standard for IDEs
  - seems to be mostly focused on C/C++/C# compared to other langs..??
  - microsoft
    - therefore took a long time before making vs-mac

various IDEs by JetBrains
seems to fill the gap vs-studio has left with other languages
recently seperated into language specific IDEs:
https://www.jetbrains.com/ides/
  - rubymine
    - ruby, the standard for it
  - rider
    - c#, games?
  - intellij
    - java, jvm langs?, the standard for it
      - i think this was their first/main editor that started their business
  - pycharm
    - (python)
  - etc.




https://pawelgrzybek.com/the-joy-of-learning-helix-and-probably-other-modal-terminal-based-editors/
  - todo: read



https://www.reddit.com/r/ruby/comments/11ji4u7/rubymine_or_vs_code_extensions_for_debugging_in/

I keep trying to switch off of Rubymine and I keep going back. Debugging in Code is good enough, like no issue, once you find the right combination of articles to help you set it up. Autocomplete, intellisense, and similar are much worse, whether you use Solargraph or Sorbet + Ruby-LSP, and there are essentially zero refactoring actions. But the real killer feature for me is that Rubymine letâ€™s me search, add breakpoints in, or jump to a definition in gems used in my application.

But the real real killer feature is that it all just works, no hassle. Sure itâ€™s a little sluggish sometimes. Sure the interface is a lil heavy. Sure the plug-in ecosystem is way less active. I got work to do, damnit.


https://www.reddit.com/r/ruby/comments/bq95m6/so_thoughts_between_vscode_vs_rubymine/

VSCode sits somewhere between Sublime/Atom and Rubymine. It's not a full IDE, nor will it ever be, but it has a lot of the features a full-featured IDE would have. I used it for a while but just switched away from it, simply because there are UI things that really bother me, like the fonts support, particularly in the sidebar and the search. I work on projects with thousands of files and a hard-to-read search just doesn't work for me. And the ruby/rails support is sub-par, at best, compared to others.

I've found Atom can do everything VSCode did for me (though maybe not for others) and it looks better, which makes me more willing to spend time in it. Sure, that's not everyone's requirement, but it is for me.

I switched away from Sublime to VSCode, not because Sublime was bad, but I needed a change. But Sublime is absolutely the best in terms of speed.

I personally don't find the need for something like Rubymine, but I've been writing Rails code for, jeez, 10+ years. It just gets in my way and never does what I think it should do. But it may be for you. VSCode is free, and Rubymine has a trial/demo. Try them. Spend a week or two with each. You'll find things you like and don't like about both. Everyone's needs and wants are different, and there are reasons some people love VIM over anything else. Just try them out.
